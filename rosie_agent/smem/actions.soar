#!##########################################################################
#! Manipulation Actions
#! 001-099

### +@pick-up1 [001]
smem --add {
   # 1 Argument: Pick up the <obj>
   #             Pick up the yellow block

   (@100123 ^handle pick-up1 ^procedural <proc001> ^item-type action ^goal <goal001>)
   (<proc001> ^op_name op_pick-up1 
              ^arg1 <parg0011>
              ^subtasks <subtasks001>)
   (<parg0011> ^arg-type object ^required true ^id <obj-slot0011>)
   (<goal001> ^handle pick-up1goal1 ^item-type task-goal ^subgoal-count 1 ^1 <subgoal0011>)
      (<subgoal0011> ^handle pick-up1sg1 ^predicates <gpreds0011>)
         (<gpreds0011> ^pred-count 1 ^1 <gpred001g1p1>)
         (<gpred001g1p1> ^type unary ^id <pred-slot0012> ^1 <obj-slot0011>)
            (<pred-slot0012> ^default <gpdef0012>)
               (<gpdef0012> ^predicate-handle grabbed ^property-handle arm-status)
}


### +@put-down1 [002]
smem --add {
   # 1 Argument Version: Put down the <obj>
   # 2 Argument Version: Put the <obj> <rel> <obj2>

   (@100124 ^handle put-down1 ^procedural <proc002> ^item-type action ^goal <goal002>)
   (<proc002> ^op_name op_put-down1 
              ^arg1 <parg0021>
              ^arg2 <parg0022>
              ^subtasks <subtasks002>)
   (<parg0021> ^arg-type object ^required true ^id <obj-slot0021>)
   (<parg0022> ^arg-type partial-predicate ^id <pred-slot0022> ^2 <obj-slot0022>)
   (<goal002> ^handle put-down1goal1 ^item-type task-goal ^subgoal-count 1 ^1 <subgoal0021>)
      (<subgoal0021> ^handle put-down1sg1 ^predicates <gpreds0021>)
         (<gpreds0021> ^pred-count 1 ^1 <gpred002g1p1>)
         (<gpred002g1p1> ^type relation ^id <pred-slot0022> ^1 <obj-slot0021> ^2 <obj-slot0022>)
            (<pred-slot0022> ^default <def-pred0022>)
               (<def-pred0022> ^predicate-handle in1)
            (<obj-slot0022> ^default <def-obj0022>)
               (<def-obj0022> ^category location ^modifier1 current1)
}


### +@open1 [003]
smem --add {
   # Open the <obj>
   # Open the pantry

   (@100125 ^handle open1 ^procedural <proc003> ^item-type action ^goal <goal003>)
   (<proc003> ^op_name op_open1 
              ^arg1 <parg0031>
              ^subtasks <subtasks003>)
   (<parg0031> ^arg-type object ^required true ^id <obj-slot0031>)
   (<goal003> ^handle open1goal1 ^item-type task-goal ^subgoal-count 1 ^1 <subgoal0031>)
      (<subgoal0031> ^handle open1sg1 ^predicates <gpreds0031>)
         (<gpreds0031> ^pred-count 1 ^1 <gpred003g1p1>)
         (<gpred003g1p1> ^type unary ^id <pred-slot0032> ^1 <obj-slot0031>)
            (<pred-slot0032> ^default <gpdef0032>)
               (<gpdef0032> ^predicate-handle open2 ^property-handle door2)
}


### +@close1 [004]
smem --add {
   # Close the <obj>
   # Close the stove

   (@100126 ^handle close1 ^procedural <proc004> ^item-type action ^goal <goal004>)
   (<proc004> ^op_name op_close1
              ^arg1 <parg0041>
              ^subtasks <subtasks004>)
   (<parg0041> ^arg-type object ^required true ^id <obj-slot0041>)
   (<goal004> ^handle close1goal1 ^item-type task-goal ^subgoal-count 1 ^1 <subgoal0041>)
      (<subgoal0041> ^handle close1sg1 ^predicates <gpreds0041>)
         (<gpreds0041> ^pred-count 1 ^1 <gpred004g1p1>)
            (<gpred004g1p1> ^type unary ^id <pred-slot0042> ^1 <obj-slot0041>)
               (<pred-slot0042> ^default <gpdef0042>)
                  (<gpdef0042> ^predicate-handle closed2 ^property-handle door2)
}

### +@turn-on1 [005]
smem --add {
   # Turn on the <obj>
   # Turn on the lights

   (@100127 ^handle turn-on1 ^procedural <proc005> ^item-type action ^goal <goal005>)
   (<proc005> ^op_name op_turn-on1 
              ^arg1 <parg0051>
              ^subtasks <subtasks005>)
   (<parg0051> ^arg-type object ^required true ^id <obj-slot0051>)
   (<goal005> ^handle turn-on1goal1 ^item-type task-goal ^subgoal-count 1 ^1 <subgoal0051>)
      (<subgoal0051> ^handle turn-on1sg1 ^predicates <gpreds0051>)
         (<gpreds0051> ^pred-count 1 ^1 <gpred005g1p1>)
            (<gpred005g1p1> ^type unary ^id <pred-slot0052> ^1 <obj-slot0051>)
               (<pred-slot0052> ^default <gpdef0052>)
                  (<gpdef0052> ^predicate-handle on2 ^property-handle activation1)
}

### +@turn-off1 [006]
smem --add {
   # Turn off the <obj>
   # Turn off the stove

   (@100128 ^handle turn-off1 ^procedural <proc006> ^item-type action ^goal <goal006>)
   (<proc006> ^op_name op_turn-off1 
              ^arg1 <parg0061>
              ^subtasks <subtasks006>)
   (<parg0061> ^arg-type object ^required true ^id <obj-slot0061>)
   (<goal006> ^handle turn-off1goal1 ^item-type task-goal ^subgoal-count 1 ^1 <subgoal0061>)
      (<subgoal0061> ^handle turn-off1sg1 ^predicates <gpreds0061>)
         (<gpreds0061> ^pred-count 1 ^1 <gpred006g1p1>)
            (<gpred006g1p1> ^type unary ^id <pred-slot0062> ^1 <obj-slot0061>)
               (<pred-slot0062> ^default <gpdef0062>)
                  (<gpdef0062> ^predicate-handle off2 ^property-handle activation1)
}

### +@write1 [007]
smem --add {
   # 2 Argument Version: write a <num> onto <obj2>
   #                     Write a five onto the green location

   (@100129 ^handle write1 ^procedural <proc007> ^item-type action)
   (<proc007> ^op_name op_write1
              ^arg1 <parg0071> ^arg2 <parg0072>)
   (<parg0071> ^arg-type concept ^required true ^id <conc-slot0071>)
   (<parg0072> ^arg-type partial-predicate ^required true ^id <pred-slot0072> ^2 <obj-slot0072>) 
}

### +@give1 [008]
smem --add {
   # Give the <obj> to <person>.

   (@100130 ^handle give1 ^procedural <proc008> ^item-type action)
   (<proc008> ^op_name op_give1
             ^arg1 <parg0081> ^arg2 <parg0082>)
   (<parg0081> ^arg-type object ^required true ^id <obj-slot0081>)
   (<parg0082> ^arg-type partial-predicate ^required true ^id <pred-slot0082> ^2 <obj-slot0082>) 
}

### +@point1 [009]
smem --add {
   # Point at the <obj>

   (@100131 ^handle point1 ^procedural <proc009> ^item-type action)
   (<proc009> ^op_name op_point1
              ^arg1 <parg0091>)
   (<parg0091> ^arg-type partial-predicate ^required true ^id <pred-slot0091> ^2 <obj-slot0091>)
}

### +@use1 [011]
smem --add {
   # Use the cup with the faucet. 

   (@100132 ^handle use1 ^procedural <proc011> ^item-type action ^goal <goal011>)
   (<proc011> ^op_name op_use1
              ^arg1 <parg0111>
              ^arg2 <parg0112>)
   (<parg0111> ^arg-type object ^required true ^id <obj-slot0111>)
   (<parg0112> ^arg-type partial-predicate ^required true ^id <pred-slot0112> ^2 <obj-slot0112>)
   (<goal011> ^handle use1goal1 ^item-type task-goal ^subgoal-count 1 ^1 <subgoal0111>)
      (<subgoal0111> ^handle use1sg1 ^predicates <gpreds0111>)
         (<gpreds0111> ^pred-count 1 ^1 <gpred011g1p1>)
         (<gpred011g1p1> ^type execute-command ^command-name use-command)
}

### +@remove1 [012]
smem --add {
   # 2 Argument Version: remove a <obj2>
   #                     Remove the green block

   (@100133 ^handle remove1 ^procedural <proc012> ^item-type action)
   (<proc012> ^op_name op_remove1
              ^arg1 <parg0121>)
   (<parg0121> ^arg-type object ^importance required ^id <obj-slot0121>)
}

### +@reset-arm1 [013]
smem --add {
   # Reset

   (@100134 ^handle reset-arm1 ^procedural <proc013> ^item-type action ^goal <goal013>)
   (<proc013> ^op_name op_reset-arm1 )
   (<goal013> ^handle reset-arm1goal1 ^item-type task-goal ^subgoal-count 1 ^1 <subgoal0131>)
      (<subgoal0131> ^handle reset-arm1sg1 ^predicates <gpreds0131>)
         (<gpreds0131> ^pred-count 1 ^1 <gpred013g1p1>)
         (<gpred013g1p1> ^type execute-command ^command-name reset-command)
}

### +@roll1 [014]
smem --add {
   # Roll the blue cube (cozmo)

   (@100135 ^handle roll1 ^procedural <proc014> ^item-type action ^goal <goal014>)
   (<proc014> ^op_name op_roll1 
              ^arg1 <parg0141>)
   (<parg0141> ^arg-type object ^importance required ^id <obj-slot0141>)
   (<goal014> ^handle roll1goal1 ^item-type task-goal ^subgoal-count 1 ^1 <subgoal0141>)
      (<subgoal0141> ^handle roll1sg1 ^predicates <gpreds0141>)
         (<gpreds0141> ^pred-count 1 ^1 <gpred014g1p1>)
         (<gpred014g1p1> ^type execute-command ^command-name roll-command)
}

### +@wheelie1 [015]
smem --add {
   # Wheelie on the green cube (cozmo)

   (@100136 ^handle wheelie1 ^procedural <proc015> ^item-type action ^goal <goal015>)
   (<proc015> ^op_name op_wheelie1 
              ^arg2 <parg0152>)
   (<parg0152> ^arg-type partial-predicate ^required true ^id <pred-slot0152> ^2 <obj-slot0152>)
   (<goal015> ^handle wheelie1goal1 ^item-type task-goal ^subgoal-count 1 ^1 <subgoal0151>)
      (<subgoal0151> ^handle wheelie1sg1 ^predicates <gpreds0151>)
         (<gpreds0151> ^pred-count 1 ^1 <gpred015g1p1>)
         (<gpred015g1p1> ^type execute-command ^command-name wheelie-command)
}

### +@change-color1 [016]
smem --add {
   # Change the white cube to a red cube

   (@100137 ^handle change-color1 ^procedural <proc016> ^item-type action)
   (<proc016> ^op_name op_change-color1 
              ^arg1 <parg0161>
              ^arg2 <parg0162>)
   (<parg0161> ^arg-type object ^required true ^id <obj-slot0161>)
   (<parg0162> ^arg-type partial-predicate ^required true ^id <pred-slot0162> ^2 <obj-slot0162>)
}


#!####################################################################
#!####################################################################
#! Robot Tasks
#! 101-199

### +@move1 [101]
smem --add {
   # 2 Argument Version: Move the <obj> <rel> <obj2>
   #                     Move the red block onto the green block

   (@100138 ^handle move1 ^procedural <proc101> ^item-type action ^goal <goal101>)
   (<proc101> ^op_name op_move1
              ^arg1 <parg1011> ^arg2 <parg1012>
              ^subtasks <subs101>)
   (<parg1011> ^arg-type object ^required true ^id <obj-slot1011>)
   (<parg1012> ^arg-type partial-predicate ^required true ^id <pred-slot1012> ^2 <obj-slot1012>)
   (<goal101> ^handle move1goal1 ^item-type task-goal ^subgoal-count 1 ^1 <subgoal1011>)
   (<subgoal1011> ^handle move1sg1 ^predicates <gpreds1011>)
      (<gpreds1011> ^pred-count 1 ^1 <gpred101g1p1>)
         (<gpred101g1p1> ^type relation ^id <pred-slot1012> ^1 <obj-slot1011> ^2 <obj-slot1012>)
}

### +@store1 [102]
smem --add {
   # Store the <obj>

   (@100139 ^handle store1 ^item-type action)
}

### +@discard1 [103]
smem --add {
   # Discard the <obj>

   (@100140 ^handle discard1 ^item-type action)
}

### +@deliver1 [104]
smem --add {
   # Deliver the <obj> to the <loc>

(@100141 ^handle deliver1 ^procedural <proc104> ^item-type action ^implicit-objects <objs104>)
   (<proc104> ^op_name op_deliver1 ^arg1 <parg1041> ^arg2 <parg1042> ^subtasks <subs>)
   (<parg1041> ^arg-type object ^required true ^id <obj-slot1041>)
   (<parg1042> ^arg-type partial-predicate ^required true ^id <pred-slot1042> ^2 <obj-slot1042>)
   #   (@deliver1 ^goal <goal104>)
   #   (<goal104> ^handle deliver1goal1 ^item-type task-goal ^subgoal-count 1 ^1 <subgoal1041>)
   #      (<subgoal1041> ^handle deliver1sg1 ^predicates <gpreds1041>)
   #         (<gpreds1041> ^pred-count 1 ^1 <gpred104g1p1>)
   #      (<gpred104g1p1> ^type relation ^id <gpred-slot1041> ^1 <obj-slot1041> ^2 <obj-slot1042>)
   #          (<gpred-slot1041> ^default <gdef1041>)
   #          (<gdef1041> ^predicate-handle in1)
}

### +@fetch1 [105]
smem --add {
   # Fetch a <obj>
   # Fetch a <obj> from the <loc>

   (@100142 ^handle fetch1 ^item-type action)
}

### +@take1 [106]
smem --add {
   # Take the <obj> to the <loc>

   (@100143 ^handle take1 ^item-type action)
}

### +@guide1 [107]
smem --add {
   # Guide <person>

   (@100144 ^handle guide1 ^item-type action)
}

### +@serve1 [108]
smem --add {
   # Serve [person]

   (@100145 ^handle serve1 ^item-type action)
}

### +@bring1 [109]
smem --add {
   # Bring <obj> to the <loc>

   (@100146 ^handle bring1 ^item-type action)
}

### +@tell1 [110]
smem --add {
   # Tell <person> |Bob says hi|

   (@100147 ^handle tell1 ^item-type action)
}

### +@stack1 [111]
#smem --add {
#   # Stack the <obj1> and the <obj2>
#
#   (@stack1 ^handle stack1 ^item-type action)
#}

### +@cook1 [112]
smem --add {
   # Cook the steak

   (@100148 ^handle cook1 ^item-type action)
}

### +@set1 [113]
smem --add {
   # Set the table
      # AM: Check this
      (@100149 ^handle set)
}

### +@clean1 [114]
smem --add {
   # Clean up
   # Clean the table

   (@100150 ^handle clean1 ^item-type action)
}

### +@throw1 [115]
smem --add {
   # Throw away the object

   (@100151 ^handle throw1 ^procedural <proc115> ^item-type action)
   (<proc115> ^op_name op_throw1
              ^arg1 <parg1151>)
     (<parg1151> ^arg-type object ^id <obj-slot1151>)
}

### +@organize1 [116]
smem --add {
   # Organize the table

   (@100152 ^handle organize1 ^item-type action)
}


### +@patrol1 [117]
smem --add {
   # Patrol.

   (@100153 ^handle patrol1 ^item-type action)
}

### +@refrigerate1 [118]
smem --add {
   # Refrigerate the soda

   (@100154 ^handle refrigerate1 ^item-type action)
}

### +@lead1 [119]
smem --add {
   # Lead a tour

   (@100155 ^handle lead1 ^item-type action)
}

### +@squaredance1 [120]
smem --add {
   # Drive in a square.

   (@100156 ^handle squaredance1 ^item-type action)
}

### +@recite1 [121]
smem --add {
   # Recite a poem.

   (@100157 ^handle recite1 ^item-type action)
}

### +@heat1 [122]
smem --add {
   # Heat the mug. 

   (@100158 ^handle heat1 ^item-type action)
}

### +@describe [123]
smem --add {
   # Describe the <obj>

   (@100159 ^handle describe1 ^item-type action)
}

#!#############################################################################################
#!#############################################################################################
#! Driving Actions
#! 201-299

### +@turn1 [201]
smem --add {
   # Change direction, Turn [right|left|around]

   (@100160 ^handle turn1 ^procedural <proc201> ^item-type action ^goal <goal201>)
   (<proc201> ^op_name op_turn1 
              ^arg1 <parg2011>)
   (<parg2011> ^arg-type concept ^required true ^id <conc-slot2011>)
   (<goal201> ^handle turn1goal1 ^item-type task-goal ^subgoal-count 1 ^1 <subgoal2011>)
      (<subgoal2011> ^handle turn1sg1 ^predicates <gpreds2011>)
         (<gpreds2011> ^pred-count 1 ^1 <gpred201g1p1>)
         (<gpred201g1p1> ^type execute-command ^command-name turn-command)
}

### +@follow-wall1 [202]
smem --add {
   # Follow the [right|left] wall

   (@100161 ^handle follow-wall1 ^procedural <proc202> ^item-type action)
   (<proc202> ^op_name op_follow-wall1 
              ^arg1 <parg2021>)
   (<parg2021> ^arg-type object ^required true ^id <conc-slot2021>)
}

### +@orient1 [203]
smem --add {
   # Orient [north|south|east|west]

   (@100162 ^handle orient1 ^procedural <proc203> ^item-type action ^goal <goal203>)
   (<proc203> ^op_name op_orient1 
              ^arg1 <parg2031>)
   (<parg2031> ^arg-type concept ^required true ^id <conc-slot2031>)
   (<goal203> ^handle orient1goal1 ^item-type task-goal ^subgoal-count 1 ^1 <subgoal2031>)
      (<subgoal2031> ^handle orient1sg1 ^predicates <gpreds2031>)
         (<gpreds2031> ^pred-count 1 ^1 <gpred203g1p1>)
         (<gpred203g1p1> ^type execute-command ^command-name orient-command)
}

### +@face1 [204]
smem --add {
   # Face the <obj>
   # Face the door

   (@100163 ^handle face1 ^procedural <proc204> ^item-type action ^goal <goal204>)
   (<proc204> ^op_name op_face1
              ^arg1 <parg2041>)
   (<parg2041> ^arg-type object ^required true ^id <obj-slot2041>)
   (<goal204> ^handle face1goal1 ^item-type task-goal ^subgoal-count 1 ^1 <subgoal2041>)
      (<subgoal2041> ^handle face1sg1 ^predicates <gpreds2041>)
         (<gpreds2041> ^pred-count 1 ^1 <gpred204g1p1>)
         (<gpred204g1p1> ^type execute-command ^command-name face-command)
}

### +@drive1 [205]
smem --add {
   # Drive forward.
   # Drive.
   # Drive down the hall.
   (@100164 ^handle drive1 ^procedural <proc205> ^item-type action)
   (<proc205> ^op_name op_drive1
              ^arg1 <parg2051>)
   (<parg2051> ^arg-type concept ^id <conc-slot2051>)
}

### +@go-to-location1 [206]
smem --add {
   # Go to the <loc>
   (@100165 ^handle go-to-location1 ^procedural <proc206> ^item-type action)
   (<proc206> ^op_name op_go-to-location1 
              ^arg2 <parg2062>)
   (<parg2062> ^arg-type partial-predicate ^id <pred-slot2062> ^2 <obj-slot2062>)
}

### +@go-to-waypoint1 [207]
smem --add {
   # Used internally, used to navigate between any 2 waypoints

   (@100166 ^handle go-to-waypoint1 ^procedural <proc207> ^item-type action)
   (<proc207> ^op_name op_go-to-waypoint1 ^arg2 <parg2071>)
   (<parg2071> ^arg-type concept ^id <conc-slot2071>)
}

### +@go-to-next-waypoint1 [208]
smem --add {
   # Used internally, navigate to an adjacent waypoint (edge traversal)

   (@100167 ^handle go-to-next-waypoint1 ^procedural <proc208> ^item-type action)
   (<proc208> ^op_name op_go-to-next-waypoint1 ^arg2 <parg2081>)
   (<parg2081> ^arg-type concept ^id <conc-slot2081>)
}

### +@stop1 [209]
smem --add {
   # Stop.

   (@100168 ^handle stop1 ^procedural <proc209> ^item-type action ^goal <goal209>
   (<proc209> ^op_name op_stop1)
   (<goal209> ^handle stop1goal1 ^item-type task-goal ^subgoal-count 1 ^1 <subgoal2091>)
      (<subgoal2091> ^handle stop1sg1 ^predicates <gpreds2091>)
         (<gpreds2091> ^pred-count 1 ^1 <gpred209g1p1>)
         (<gpred209g1p1> ^type execute-command ^command-name stop-command)
}

### +@scan1 [210]
smem --add {
   # scan the room
   # Scan.
   # Scan until you see the <obj>.

   (@100169 ^handle scan1 ^procedural <proc210> ^item-type action ^learn-proposal true)
   (<proc210> ^op_name op_scan1)
}

### +@explore1 [211]
smem --add {
   # Explore.
   # Explore until you see the <obj>.

   (@100170 ^handle explore1 ^procedural <proc211> ^item-type action ^learn-proposal true)
   (<proc211> ^op_name op_explore1)
}

### +@find1 [212]
smem --add {
   # Find the <obj>

   (@100171 ^handle find1 ^procedural <proc212> ^item-type action ^goal <goal212>)
   (<proc212> ^op_name op_find1 
              ^arg1 <parg2121>)
      (<parg2121> ^arg-type object ^required true ^id <obj-slot2121>)
   (<goal212> ^handle find1goal1 ^item-type task-goal ^subgoal-count 1 ^1 <subgoal2121>)
      (<subgoal2121> ^handle find1sg1 ^predicates <gpredsg1p1>)
         (<gpredsg1p1> ^pred-count 1 ^1 <gp212g1p1>)
            (<gp212g1p1> ^type unary ^id <pred-slot2121> ^1 <obj-slot2121>)
               (<pred-slot2121> ^default <def2121>)
                  (<def2121> ^predicate-handle visible1 ^property-handle is-visible1)
}

### +@start-leading1 [213]
smem --add {
   # Start leading <person>

   (@100172 ^handle start-leading1 ^procedural <proc213> ^item-type action ^goal <goal213>)
   (<proc213> ^op_name op_start-leading1
              ^arg1 <parg2131>)
   (<parg2131> ^arg-type object ^required true ^id <obj-slot2131>)
   (<goal213> ^handle start-leading1goal1 ^item-type task-goal ^subgoal-count 1 ^1 <subgoal2131>)
      (<subgoal2131> ^handle start-leading1sg1 ^predicates <gpreds2131>)
         (<gpreds2131> ^pred-count 1 ^1 <gpred213g1p1>)
         (<gpred213g1p1> ^type unary ^id <pred-slot2132> ^1 <obj-slot2131>)
            (<pred-slot2132> ^default <gpdef2132>)
               (<gpdef2132> ^predicate-handle following1 ^property-handle is-following1)
}

### +@stop-leading1 [214]
smem --add {
   # Stop leading <person>

   (@100173 ^handle stop-leading1 ^procedural <proc214> ^item-type action ^goal <goal214>)
   (<proc214> ^op_name op_stop-leading1
              ^arg1 <parg2141>)
   (<parg2141> ^arg-type object ^required true ^id <obj-slot2141>)
   (<goal214> ^handle stop-leading1goal1 ^item-type task-goal ^subgoal-count 1 ^1 <subgoal2141>)
      (<subgoal2141> ^handle stop-leading1sg1 ^predicates <gpreds2141>)
         (<gpreds2141> ^pred-count 1 ^1 <gpred214g1p1>)
         (<gpred214g1p1> ^type unary ^id <pred-slot2142> ^1 <obj-slot2141>)
            (<pred-slot2142> ^default <gpdef2142>)
               (<gpdef2142> ^predicate-handle not-following1 ^property-handle is-following1)
}

### +@start-following1 [215]
smem --add {
   # Start following <person>

   (@100174 ^handle start-following1 ^procedural <proc215> ^item-type action)
   (<proc215> ^op_name op_start-following1
              ^arg1 <parg2151>)
   (<parg2151> ^arg-type object ^required true ^id <obj-slot2151>)
}

### +@stop-following1 [216]
smem --add {
   # Stop following <person>

   (@100175 ^handle stop-following1 ^procedural <proc216> ^item-type action)
   (<proc216> ^op_name op_stop-following1
              ^arg1 <parg2161>)
   (<parg2161> ^arg-type object ^required true ^id <obj-slot2161>)
}

### +@approach1 [217]
smem --add {
   # Approach the <obj>

   (@100176 ^handle approach1 ^procedural <proc217> ^item-type action ^goal <goal217>)
   (<proc217> ^op_name op_approach1 
              ^arg1 <parg2171>)
      (<parg2171> ^arg-type object ^required true ^id <obj-slot2171>)
   (<goal217> ^handle approach1goal1 ^item-type task-goal ^subgoal-count 1 ^1 <subgoal2171>)
      (<subgoal2171> ^handle approach1sg1 ^predicates <gpreds2171>)
         (<gpreds2171> ^pred-count 1 ^1 <gpred217g1p1>)
         (<gpred217g1p1> ^type execute-command ^command-name approach-command)
}

### +@advance1 [218]
smem --add {
   # Advance (drive forward 0.5 meter)

   (@100177 ^handle advance1 ^procedural <proc218> ^item-type action)
   (<proc218> ^op_name op_advance1)
}

### +@look1 [219]
smem --add {
   # Look up, Look down

   (@100178 ^handle look1 ^procedural <proc219> ^item-type action ^goal <goal219>)
   (<proc219> ^op_name op_look1
              ^arg1 <parg2191>)
      (<parg2191> ^arg-type concept ^id <conc-slot2191>)
   (<goal219> ^handle look1goal1 ^item-type task-goal ^subgoal-count 1 ^1 <subgoal2191>)
      (<subgoal2191> ^handle look1sg1 ^predicates <gpreds2191>)
         (<gpreds2191> ^pred-count 1 ^1 <gpred219g1p1>)
         (<gpred219g1p1> ^type execute-command ^command-name look-command)
}

### +@lift1 [220]
smem --add {
   # Lift up, Lift down

   (@100179 ^handle lift1 ^procedural <proc220> ^item-type action ^goal <goal220>)
   (<proc220> ^op_name op_lift1
              ^arg1 <parg2201>)
      (<parg2201> ^arg-type concept ^id <conc-slot2201>)
   (<goal220> ^handle lift1goal1 ^item-type task-goal ^subgoal-count 1 ^1 <subgoal2201>)
      (<subgoal2201> ^handle lift1sg1 ^predicates <gpreds2201>)
         (<gpreds2201> ^pred-count 1 ^1 <gpred220g1p1>)
         (<gpred220g1p1> ^type execute-command ^command-name lift-command)
}

### +@go-to-xy1 [221]
smem --add {
   # Used internally, navigate to a position

   (@100180 ^handle go-to-xy1 ^procedural <proc221> ^item-type action ^goal <goal221>)
   (<proc221> ^op_name op_go-to-xy1 ^arg1 <parg2211>)
   (<parg2211> ^arg-type coordinate ^id <coord-slot2211>)
   (<goal221> ^handle goto-xy1goal1 ^item-type task-goal ^subgoal-count 1 ^1 <subgoal2211>)
      (<subgoal2211> ^handle goto-xy1sg1 ^predicates <gpreds2211>)
         (<gpreds2211> ^pred-count 1 ^1 <gpred221g1p1>)
         (<gpred221g1p1> ^type execute-command ^command-name go-to-command)
}

#!#############################################################################################
#!#############################################################################################
#! Actions involving Language
#! 301-399

### +@ask1 [301]
smem --add {
   # Ask 'QUOTED MESSAGE'

   (@100181 ^handle ask1 ^procedural <proc301> ^item-type action ^learn-proposal true ^perform once)
   (<proc301> ^op_name op_ask1
             ^arg1 <parg3011>
             ^match no)
   (<parg3011> ^arg-type object ^required true ^id <obj-slot3011>)
}

### +@say1 [302]
smem --add {
   # Say 'hello' to bob

   (@100182 ^handle say1 ^procedural <proc302> ^type action)
   (<proc302> ^op_name op_say1
              ^arg1 <parg3021>
              ^arg2 <parg3022>)
   (<parg3021> ^arg-type object ^required true ^id <obj-slot3021>)
   (<parg3022> ^arg-type object ^id <obj-slot3022>)
   # TODO: conditional goal on whether there is an arg2 person
}

### +@announce1 [303]
smem --add {
   # Say 'hello' to bob

   (@100183 ^handle announce1 ^type action)
}


#!#############################################################################################
#!#############################################################################################
#! Actions involving the Agent's internal state
#! 401-499

### +@sense1 [401]
   smem --add {

   (@100184 ^handle sense1 ^procedural <proc401> ^item-type action)
   (<proc401> ^op_name op_sense1)
}

### +@remember1 [402]
smem --add {
   # Remember the current location as the starting location

   (@100185 ^handle remember1 ^procedural <proc402> ^item-type action ^learn-proposal true ^perform once)
   (<proc402> ^op_name op_remember1
              ^arg1 <parg4021> ^arg2 <parg4022>)
   (<parg4021> ^arg-type object ^required true ^id <obj-slot4021>)
   (<parg4022> ^arg-type object ^required true ^id <obj-slot4022>)
}

### +@recall1 [403]
smem --add {
   # Recall the soda in a location

   (@100186 ^handle recall1 ^procedural <proc403> ^item-type action ^learn-proposal true ^perform once)
    (<proc403> ^op_name op_recall1
                ^arg1 <parg4031> ^arg2 <parg4032>)
    (<parg4031> ^arg-type object ^required true ^id <obj-slot4031>)
    (<parg4032> ^arg-type partial-predicate ^required true ^id <pred-slot4032> ^2 <obj-slot4032>)
}

### +@think1 [404]
smem --add {
   # AM: EDIT: removed the 2nd argument 
   # 'Think of a storage location of the soda'
   # The soda argument is put under the first as a sub-relation

   (@100187 ^handle think1 ^procedural <proc404> ^item-type action ^learn-proposal true ^perform once)
   (<proc404> ^op_name op_think1
              ^arg1 <parg4041> ^arg2 <parg4042>)
   (<parg4041> ^arg-type partial-predicate ^required true ^id <pred-slot4041> ^2 <obj-slot4041>)
   (<parg4042> ^arg-type partial-predicate ^required true ^id <pred-slot4042> ^2 <obj-slot4042>)
}

### +@heard1 [405]
smem --add {
   (@100188 ^handle heard1 ^procedural <proc405> ^type action)
   (<proc405> ^op_name op_heard1)
}

### +@wait1 [406]
smem --add {
   (@100189 ^handle wait1 ^procedural <proc406> ^item-type action)
   (<proc406> ^op_name op_wait1)
}

### +@check1 [407]
smem --add {
   (@100190 ^handle check1 ^procedural <proc407> ^item-type action)
   (<proc407> ^op_name op_check1)
}



#!#############################################################################################
#!#############################################################################################
#! Game Actions
#! 501-599

### +@attend1 [501]
smem --add {
   (@100191 ^handle attend1 ^procedural <proc501> ^item-type action)
   (<proc501> ^op_name initiate-attend1)
}

### +@ignore1 [502]
smem --add {
   (@100192 ^handle ignore1 ^procedural <proc502> ^item-type action)
   (<proc502> ^op_name initiate-ignore1)
}

### +@has1 [503]
smem --add {
   (@100193 ^handle has1 ^procedural <proc503> ^item-type action)
   (<proc503> ^op_name initiate-has1)
}

### +@play1 [504]
smem --add {
   (@100194 ^handle play1 ^procedural <proc504> ^item-type action)
   (<proc504> ^op_name initiate-play1)
}

### +@win1 [505]
smem --add {
   (@100195 ^handle win1 ^procedural <proc505> ^item-type action)
   (<proc505> ^op_name initiate-win1)
}

### +@lose1 [506]
smem --add {
   (@100196 ^handle lose1 ^procedural <proc506> ^item-type action)
   (<proc506> ^op_name initiate-lose1)
}

### +@prefer1 [507]
smem --add {
   (@100197 ^handle prefer1 ^procedural <proc507> ^item-type action)
   (<proc507> ^op_name initiate-prefer1) 
}

### +@avoid1 [508]
smem --add {
   (@100198 ^handle avoid1 ^procedural <proc508> ^item-type action)
   (<proc508> ^op_name initiate-avoid1)
}

### +@attack1 [509]
smem --add {
   (@100199 ^handle attack1 ^procedural <proc509> ^item-type action)
   (<proc509> ^op_name initiate-attack)
}

### +@fill1 [510]
smem --add {
   (@100200 ^handle fill1 ^procedural <proc510> ^item-type action)
   (<proc510> ^op_name initiate-fill)
}

### +@load1 [511]
smem --add {
   (@100201 ^handle load1 ^procedural <proc511> ^item-type action)
   (<proc511> ^op_name initiate-load)
}

### +@consider1 [512]
smem --add {
   (@100202 ^handle consider1 ^procedural <proc512> ^item-type action)
   (<proc512> ^op_name initiate-consider1) 
}

### +@match1 [513]
smem --add {
   (@100203 ^handle matches1) 
}

### +@cover1 [514]
#smem --add {
   #(@covers1 ^handle covers1
   #         ^tense past)
#}

### +@perform1 [515]
smem --add {
   (@100204 ^handle perform1 ^item-type action)
}

