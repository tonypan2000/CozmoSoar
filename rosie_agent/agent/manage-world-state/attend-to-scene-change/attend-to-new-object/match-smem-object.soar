# Propose match-smem-object using object handle
sp {attend-to-new-object*propose*match-smem-object*using*handle
   (state <s> ^name attend-to-new-object
              ^source-type <> perception-obj <> smem-obj
              ^source-obj.handle <obj-handle>
             -^matches-smem-object)
-->
   (<s> ^operator <o> +)
   (<o> ^name match-smem-object
        ^type handle
        ^cue <cue>)
   (<cue> ^object-instance true
          ^handle <obj-handle>)
}

sp {attend-to-new-object*propose*match-smem-object*using*imagined*properties
   (state <s> ^name attend-to-new-object
              ^source-type imagined-obj
              ^source-obj.predicates <preds>
              ^matches-smem-object none
             -^matched-smem-predicates)
-->
   (<s> ^operator <o> +)
   (<o> ^name match-smem-object
        ^type predicate
        ^cue <cue>)
   (<cue> ^object-instance true)
}

sp {attend-to-new-object*elaborate*match-smem-object*cue*using*imagined*properties
   (state <s> ^name attend-to-new-object
              ^operator <o> +
              ^source-type imagined-obj
              ^source-obj.predicates.<prop-name> <pred-name>)
   (<o> ^name match-smem-object
        ^type predicate
        ^cue <cue>)
-->
   (<cue> ^<prop-name> <pred-name>)
}

sp {attend-to-new-object*apply*match-smem-object*predicate*result*mark*matched-smem-predicates
   (state <s> ^name attend-to-new-object
              ^operator <o>
              ^smem.result <res>
              ^smem.command <cmd>)
   (<o> ^name match-smem-object
        ^type predicate
        ^cue <cue>)
   (<res> ^{ << success failure >> } <cue>)
-->
   (<s> ^matched-smem-predicates true)
}

# For a perception object, if a handle match isn't found
#    then try to match just based on predicates

# Propose match-smem-object using perception-obj predicates
sp {attend-to-new-object*propose*match-smem-object*from*perception
   (state <s> ^name attend-to-new-object
              ^source-type perception-obj
              ^perception-object-info <obj-info>
              -^matches-smem-object)
-->
   (<s> ^operator <o> +)
   (<o> ^name match-smem-object
        ^cue <cue>)
   (<cue> ^object-instance true
          ^item-type object)
}

sp {attend-to-new-object*reject*match-smem-object*no*perceptual*properties
   (state <s> ^name attend-to-new-object
              ^operator <o> +
              ^perception-object-info <obj-info>)
   (<o> ^name match-smem-object)
   (<obj-info> -^properties.property-info.predicate-handle)
-->
   (<s> ^operator <o> -)
}

sp {attend-to-new-object*elaborate*match-smem-object*cue*from*perception
   (state <s> ^name attend-to-new-object
              ^source-type perception-obj
              ^perception-object-info <obj-info>
              ^operator <o> +)
   (<o> ^name match-smem-object
        ^cue <cue>)
   (<obj-info> ^properties.property-info <prop-info>)
   (<prop-info> ^property-handle <prop>
                ^predicate-handle <pred>)
-->
   (<cue> ^<prop> <pred>)
}

# Create the query             
sp {attend-to-new-object*apply*match-smem-object*create*query
   (state <s> ^name attend-to-new-object
              ^operator <o>
              ^smem.command <cmd>)
   (<o> ^name match-smem-object
        ^cue <cue>)
-->
   (<cmd> ^query <cue>)
}

# Success: Copy the object as matches-smem-object
sp {attend-to-new-object*apply*match-smem-object*success*copy*object
   (state <s> ^name attend-to-new-object
              ^operator <o>
              ^smem.result <res>
              ^smem.command <cmd>)
   (<o> ^name match-smem-object
        ^cue <cue>)
   (<res> ^success <cue>
          ^retrieved <obj-lti>)
-->
   (<s> ^matches-smem-object <obj-lti>)
   (<cmd> ^query <cue> -)
}
        
# Failure: Create ^matches-smem-object none
sp {attend-to-new-object*apply*match-smem-object*failure*mark*matches*none
   (state <s> ^name attend-to-new-object
              ^operator <o>
              ^smem.result.failure <cue>
              ^smem.command <cmd>)
   (<o> ^name match-smem-object
        ^cue <cue>)
-->
   (<s> ^matches-smem-object none)
   (<cmd> ^query <cue> -)
}
