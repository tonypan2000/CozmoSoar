# Add new world.robot.moving-status
sp {anystate*apply*attend-to-scene-change*changed-moving-status*add*new
   (state <s> ^operator <o>
              ^top-state.world.robot <robot>)
   (<o> ^name attend-to-scene-change
        ^change <c>)
   (<c> ^type changed-moving-status
        ^self-info.moving-status <cur-state>)
-->
   (<robot> ^moving-status <cur-state>)
}
   
# Remove old world.robot.moving-status
sp {anystate*apply*attend-to-scene-change*changed-moving-status*remove*old
   (state <s> ^operator <o>
              ^top-state.world.robot <robot>)
   (<o> ^name attend-to-scene-change
        ^change <c>)
   (<c> ^type changed-moving-status
        ^self-info.moving-status <cur-state>)
   (<robot> ^moving-status { <old-state> <> <cur-state> })
-->
   (<robot> ^moving-status <old-state> -)
}

# If print-perception is on, print the info
sp {anystate*apply*attend-to-scene-change*monitor*changed-moving-status
   (state <s> ^operator <o>
              ^agent-params.print-perception true)
   (<o> ^name attend-to-scene-change
        ^change <c>)
   (<c> ^type changed-moving-status
        ^self-info.moving-status <status>)
-->
   (write |robot moving-status: | <status> (crlf))
}
