# Adds new information about new location to working memory
sp {enter-new-waypoint*propose*add-new-information
   (state <s> ^name enter-new-waypoint)
-->
   (<s> ^operator <o> +)
   (<o> ^name add-new-information)
}

# Creates world.robot.current-waypoint
sp {enter-new-waypoint*apply*add-new-information*current-waypoint
   (state <s> ^name enter-new-waypoint
              ^operator.name add-new-information
              ^new-waypoint <wp>
              ^top-state.world.robot <rob>)
-->
   (<rob> ^current-waypoint <wp>)
}

# Creates world.robot.current-location
sp {enter-new-waypoint*apply*add-new-information*current-location
   (state <s> ^name enter-new-waypoint
              ^operator.name add-new-information
              ^new-location { <loc> <> none }
              ^top-state.world.robot <rob>)
-->
   (<rob> ^current-location <loc>)
}

# SCANOP
#sp {enter-new-waypoint*apply*add-new-information*havent-scanned
#   (state <s> ^name enter-new-waypoint
#              ^operator.name add-new-information
#              ^new-location { <loc> <> none }
#              ^top-state.world.robot <rob>)
#-->
#   (<rob> ^havent-scanned <loc>)
#}

# Adds each episodic memory object to the top-state.world
#   through perception-monitor.changes.new-object
# Object must be confirmed and in the new location
sp {enter-new-waypoint*apply*add-new-information*add*epmem-obj
   (state <s> ^name enter-new-waypoint
              ^operator.name add-new-information
              ^retrieved-episode.world.objects.object <obj>
              ^retrieved-episode.world.predicates.predicate <in-pred>
              ^new-location.handle <loc-handle>
             -^top-state.world.objects.object.handle <obj-handle>
              ^top-state.perception-monitor.changes <chgs>)
   (<obj> ^handle <obj-handle>
          ^predicates.is-confirmed1 confirmed1)
   (<in-pred> ^handle in1
              ^instance <i>)
   (<i> ^1 <obj> ^{2}.handle <loc-handle>)
-->
   (<chgs> ^change <c>)
   (<c> ^type new-object
        ^epmem-obj <obj>)
}

## If an object is visible, add an in predicate
#sp {enter-new-waypoint*add*in*predicates*for*visible*objects
#   (state <s> ^name enter-new-waypoint
#              ^operator.name add-new-information
#              ^new-location { <loc> <> none }
#              ^top-state.world.predicates.predicate <in-pred>
#              ^top-state.world.objects.object <obj>)
#   (<in-pred> ^handle in1)
#   (<obj> ^predicates.is-visible1 visible1
#         -^predicates.arm-status grabbed
#         -^predicates.category location)
#   -{(<in-pred> ^instance <cur-i>)
#     (<cur-i> ^1 <obj> ^2 <loc>)}
#-->
#   (<in-pred> ^instance <i>)
#   (<i> ^1 <obj> ^2 <loc>)
#}

# Mark the new location as confirmed and visible
sp {enter-new-waypoint*apply*add-new-information*set*location*visible
   (state <s> ^name enter-new-waypoint
              ^operator.name add-new-information
              ^new-location.predicates <preds>)
-->
   (<preds> ^is-visible1 visible1 
            ^is-visible1 not-visible1 -
            ^is-confirmed1 confirmed1
            ^is-confirmed1 not-confirmed1 -)
}
