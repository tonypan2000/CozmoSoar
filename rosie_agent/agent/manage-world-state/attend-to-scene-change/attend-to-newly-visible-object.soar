# Adds the ^is-visible1 visible1 predicate
sp {anystate*apply*attend-to-scene-change*attend-to-newly-visible-object*add*visible1
   (state <s> ^operator <o>)
   (<o> ^name attend-to-scene-change
        ^change <c>)
   (<c> ^type newly-visible-object
        ^object-info.wm-obj.predicates <wm-preds>)
-->
   (<wm-preds> ^is-visible1 visible1)
}

# Removes the ^is-visible1 not-visible1 predicate
sp {anystate*apply*attend-to-scene-change*attend-to-newly-visible-object*remove*not-visible1
   (state <s> ^operator <o>)
   (<o> ^name attend-to-scene-change
        ^change <c>)
   (<c> ^type newly-visible-object
        ^object-info.wm-obj.predicates <wm-preds>)
   (<wm-preds> ^is-visible1 not-visible1)
-->
   (<wm-preds> ^is-visible1 not-visible1 -)
}

# If the object has no ^is-confirmed1, create confirmed
sp {anystate*apply*attend-to-scene-change*attend-to-newly-visible-object*create*is-confirmed1*confirmed
   (state <s> ^operator <o>)
   (<o> ^name attend-to-scene-change
        ^change <c>)
   (<c> ^type newly-visible-object
        ^object-info.wm-obj.predicates <wm-preds>)
   (<wm-preds> -^is-confirmed1)
-->
   (<wm-preds> ^is-confirmed1 confirmed1)
}

# If the object has ^is-confirmed1 not-confirmed1, change to confirmed
sp {anystate*apply*attend-to-scene-change*attend-to-newly-visible-object*change*is-confirmed1*to*confirmed
   (state <s> ^operator <o>)
   (<o> ^name attend-to-scene-change
        ^change <c>)
   (<c> ^type newly-visible-object
        ^object-info.wm-obj.predicates <wm-preds>)
   (<wm-preds> ^is-confirmed1 not-confirmed1)
-->
   (<wm-preds> ^is-confirmed1 not-confirmed1 -
               ^is-confirmed1 confirmed1)
}

## Add an in predicate instance for in(obj, cur-loc)
#sp {anystate*apply*attend-to-scene-change*attend-to-newly-visible-object*add*in*predicate
#   (state <s> ^operator <o>
#              ^top-state.world <world>)
#   (<o> ^name attend-to-scene-change
#        ^change <c>)
#   (<c> ^type newly-visible-object
#        ^object-info.wm-obj <obj>)
#   (<world> ^predicates.predicate <in-pred>
#            ^robot.current-location <cur-loc>)
#   (<in-pred> ^handle in1)
#   -{(<in-pred> ^instance <i>)
#     (<i> ^1 <obj> ^2 <cur-loc>)}
#   (<obj> ^predicates <preds>)
#   (<preds> -^arm-status grabbed)
#-->
#    (<in-pred> ^instance <i>)
#    (<i> ^1 <obj> ^2 <cur-loc>)
#}

# Remove any in predicate instances for other locations
sp {anystate*apply*attend-to-scene-change*attend-to-newly-visible-object*remove*old*in*predicate
   (state <s> ^operator <o>
              ^top-state.world <world>)
   (<o> ^name attend-to-scene-change
        ^change <c>)
   (<c> ^type newly-visible-object
        ^object-info.wm-obj <obj>)
   (<world> ^predicates.predicate <in-pred>
            ^robot.current-location <cur-loc>)
   (<in-pred> ^handle in1
              ^instance <i>)
   (<i> ^1 <obj> ^2 {<old-loc> <> <cur-loc>})
   (<old-loc> ^predicates.category location)
-->
    (<in-pred> ^instance <i> -)
}

# if print-perception is on, print a message
sp {anystate*apply*attend-to-scene-change*attend-to-newly-visible-object*print-perception*print
   (state <s> ^operator <o>
              ^agent-params.print-perception true)
   (<o> ^name attend-to-scene-change
        ^change <c>)
   (<c> ^type newly-visible-object
        ^object-info.object-handle <handle>)
-->
   (write |Object | <handle> |: marking visible| (crlf))
}
