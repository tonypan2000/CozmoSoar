##############################################################
#
# Monitoring new objects
#   (New perception objects not added to the world world)
#
##############################################################

sp {top-state*perception-monitor*object-monitor*elaborate*new-object-info
   (state <s> ^superstate nil
              ^perception-monitor.object-monitor <obj-mon>
              ^perception-monitor.spatial-scene.child <perc-obj>)
   (<obj-mon> -^object-info.perception-obj <perc-obj>)
   (<perc-obj> -^id << arm world eye robot >>
                ^object-source perception)
-->
   (<obj-mon> ^new-object-info <new-obj-info>)
   (<new-obj-info> ^perception-obj <perc-obj>)
}

sp {top-state*perception-monitor*object-monitor*new-object-info*elaborate*confirmed*simulate
   (state <s> ^superstate nil
              ^agent-params.domain internal
              ^agent-params.simulate-perception true
              ^perception-monitor.object-monitor.new-object-info <obj-info>)
   (<obj-info> ^status <status>)
-->
   (<status> ^stability-timer-expired true)
}

sp {top-state*perception-monitor*object-monitor*elaborate*new-object-info*object-handle
   (state <s> ^superstate nil
              ^perception-monitor.object-monitor.new-object-info <obj-info>)
   (<obj-info> ^perception-obj.id <svs-id>)
-->
   (<obj-info> ^object-handle <svs-id>)
}

sp {top-state*perception-monitor*object-monitor*new-object*elaborate*input-link-obj
   (state <s> ^superstate nil
              ^perception-monitor.object-monitor.new-object-info <obj-info>
              ^perception-monitor.input-link.objects.object <il-obj>)
   (<obj-info> ^object-handle <handle>)
   (<il-obj> ^object-handle <handle>)
-->
   (<obj-info> ^input-link-obj <il-obj>)
}

##############################################################
#
# Monitoring confirmed objects (those in the world)
#
##############################################################

sp {top-state*perception-monitor*object-monitor*object-info*elaborate*belief-obj
  (state <s> ^superstate nil
              ^perception-monitor.object-monitor.object-info <obj-info>
              ^perception-monitor.spatial-scene.child <belief-obj>)
  (<obj-info> ^belief-id <bel-id>)
  (<belief-obj> ^id <bel-id>)
-->
  (<obj-info> ^belief-obj <belief-obj>)
}

sp {top-state*perception-monitor*object-monitor*object-info*elaborate*perception-obj
   (state <s> ^superstate nil
              ^perception-monitor.object-monitor.object-info <obj-info>
              ^perception-monitor.spatial-scene.child <perc-obj>)
   (<obj-info> ^perception-id <perc-id>)
   (<perc-obj> ^id <perc-id>)
-->
   (<obj-info> ^perception-obj <perc-obj>)
}

# If one object is linked to another, they share the perception-obj
sp {top-state*perception-monitor*object-monitor*object-info*elaborate*perception-obj*internal
   (state <s> ^superstate nil
              ^perception-monitor.object-monitor.object-info <obj-info1>
              ^perception-monitor.object-monitor.object-info <obj-info2>)
   (<obj-info1> ^object-handle <handle1>
                ^internal-link <handle2>)
   (<obj-info2> ^object-handle <handle2>
                ^perception-obj <perc-obj>)
-->
   (<obj-info1> ^perception-obj <perc-obj>)
}
   
sp {top-state*perception-monitor*object-monitor*object-info*elaborate*input-link-obj
   (state <s> ^superstate nil
              ^perception-monitor.object-monitor.object-info <obj-info>
              ^perception-monitor.input-link.objects.object <il-obj>)
   (<obj-info> ^perception-id <perc-id>)
   (<il-obj> ^object-handle <perc-id>)
-->
   (<obj-info> ^input-link-obj <il-obj>)
}

