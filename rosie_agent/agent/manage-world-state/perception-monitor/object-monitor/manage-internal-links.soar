# If an object is being internally linked to, link it to itself
sp {top-state*perception-monitor*object-monitor*object-info*elaborate*internal-link
   (state <s> ^superstate nil
              ^perception-monitor.object-monitor <m>
              ^agent-params.print-perception <flag>)
   (<m> ^object-info <obj-info>
        ^object-info { <other-info> <> <obj-info> })
   (<obj-info> ^object-handle <handle>)
   (<other-info> ^internal-link <handle>)
-->
   (<obj-info> ^internal-link <handle>)
   (write (ifeq <flag> true (concat |Linking | <handle> | to itself| (crlf)) ||))
}

# If an internally-linked object appears again, remove the link
sp {top-state*perception-monitor*object-monitor*remove*internal-link*not*stale
   :o-support
   (state <s> ^superstate nil
              ^perception-monitor.object-monitor.object-info <obj-info>
              ^agent-params.print-perception <flag>)
   (<obj-info> ^object-handle <handle>
          ^internal-link {<handle2> <> <handle>}
          ^perception-id <percId>
          ^perception-obj.id <percId>)
-->
   (<obj-info> ^internal-link <handle2> -)
   (write (ifeq <flag> true (concat |Removing link | <handle2> | from | <handle> |: visible again| (crlf)) ||))
}

sp {top-state*perception-monitor*object-monitor*remove*internal-link*not*stale*remove*occlusion
   :o-support
   (state <s> ^superstate nil
              ^perception-monitor.object-monitor.object-info <obj-info>)
   (<obj-info> ^object-handle <handle>
               ^internal-link {<handle2> <> <handle>}
               ^perception-id <percId>
               ^perception-obj.id <percId>
               ^check-occlusion-time <t>
               ^status <status>)
   (<status> ^is-occluded true)
-->
   (<obj-info> ^check-occlusion-time <t> -)
   (<status> ^is-occluded true -)
}

sp {top-state*perception-monitor*object-monitor*remove*internal-link*stale*object
   :o-support
   (state <s> ^superstate nil
              ^perception-monitor.object-monitor <mon>)
   (<mon> ^object-info <src>
          ^object-info <dest>)
   (<dest> ^object-handle <handle>
           ^internal-link {<handle2> <> <handle>})
   (<src> ^object-handle <handle2>
         -^perception-obj)
-->
   (<dest> ^internal-link <handle2> -)
}

# Don't attend to a stale object which is being linked to another one
sp {anystate*reject*attend-to-scene-change*stale-object*internally-linked
   (state <s> ^operator <o> +
              ^agent-params.print-perception <flag>)
   (<o> ^name attend-to-scene-change
        ^change <c>)
   (<c> ^type stale-object
        ^object-info <obj-info>)
   (<obj-info> ^object-handle <handle>
               ^internal-link {<handle2> <> <handle>})
-->
   (<s> ^operator <o> -)
   (<c> ^rejected true)
   (write (ifeq <flag> true (concat |Reject attend to stale object | <handle> |: linked to | <handle2> (crlf)) ||))
}

# Don't attend to linked object properties, size, or position changes (can't trust)
sp {anystate*reject*attend-to-scene-change*pos*size*changes*internally-linked
   (state <s> ^operator <o> +
              ^agent-params.print-perception <flag>)
   (<o> ^name attend-to-scene-change
        ^change <c>)
   (<c> ^type { <type> << grown-object shrunken-object moved-object >> }
        ^object-info <obj-info>)
   (<obj-info> ^object-handle <handle>
               ^internal-link <handle2>)
-->
   (<s> ^operator <o> -)
   (<c> ^rejected true)
   (write (ifeq <flag> true (concat |Reject attend to | <type> | for object | <handle> | linked to | <handle2> (crlf)) ||))
}

sp {anystate*reject*attend-to-scene-change*property*changes*internally-linked
   (state <s> ^operator <o> +
              ^agent-params.print-perception <flag>)
   (<o> ^name attend-to-scene-change
        ^change <c>)
   (<c> ^type { <type> << changed-object-status changed-object-predicate >> }
        ^object-info <obj-info>)
   (<obj-info> ^object-handle <handle>
               ^internal-link <handle2>)
-->
   (<s> ^operator <o> -)
   (<c> ^rejected true)
   (write (ifeq <flag> true (concat |Reject attend to | <type> | for object | <handle> | linked to | <handle2> (crlf)) ||))
}

# Internally linked objects should periodically check occlusion
#   If not occluded, then remove the link (should be able to see)
sp {top-state*perception-monitor*object-monitor*elaborate*occlusion-timer-expired*internal-link
   (state <s> ^superstate nil
              ^perception-monitor.object-monitor.object-info <obj-info>
              ^agent-params.print-perception <flag>)
   (<obj-info> ^object-handle <handle>
               ^internal-link { <handle2> <> <handle> }
              -^check-occlusion-time
               ^status <status>)
-->
   (<status> ^occlusion-timer-expired true)
   (write (ifeq <flag> true (concat |Start checking occlusion for object | <handle> | linked to | <handle2> (crlf)) ||))
}

sp {check-for-occlusion*apply*occlusion-command*is-occluded*false*remove*internal-link
   (state <s> ^name check-for-occlusion
              ^operator.name occlusion-command
              ^report-to-top-state true
              ^object-occluded false
              ^object-info <obj-info>
              ^agent-params.print-perception <flag>)
   (<obj-info> ^object-handle <handle>
               ^internal-link { <handle2> <> <handle> })
-->
   (<obj-info> ^internal-link <handle2> -)
   (write (ifeq <flag> true (concat |Object | <handle> | no longer occluded. Remove link to | <handle2> (crlf)) ||))
}

