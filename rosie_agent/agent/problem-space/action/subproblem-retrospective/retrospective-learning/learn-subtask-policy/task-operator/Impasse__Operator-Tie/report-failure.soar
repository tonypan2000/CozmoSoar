sp {subproblem*retrospective*selection*propose*report-failure*no*subtask
  (state <s> ^name selection
             ^problem-space.subproblem retrospective
             ^subtasks.next none)
-->
  (<s> ^operator <o> + >)
  (<o> ^name report-failure
       ^always-propose true)
}

sp {subproblem*retrospective*selection*propose*report-failure*no*subtask
  (state <s> ^name selection
             ^problem-space.subproblem retrospective
             ^subtasks.next none)
-->
  (<s> ^operator <o> + >)
  (<o> ^name report-failure
       ^always-propose true)
}

sp {subproblem*retrospective*selection*propose*report-failure*pass*up
  (state <s> ^name selection
             ^problem-space.subproblem retrospective
             ^retrospective-learning-result failure)
-->
  (<s> ^operator <o> + >)
  (<o> ^name report-failure
       ^always-propose true)
}

sp {subproblem*retrospective*selection*apply*report-failure*super*superstate
  (state <s> ^name selection
             ^problem-space.subproblem retrospective
             ^operator.name report-failure
             ^quiescence t
             ^superstate.superstate <sss>)
-->
   (<sss> ^retrospective-learning-result failure)
}

sp {subproblem*retrospective*selection*SNC*propose*report-failure*no*subtask
  (state <s> ^impasse no-change
             ^attribute state
             ^superstate.name selection
             ^superstate.problem-space.subproblem retrospective
            -^learning-task-utils-rule true)
-->
  (<s> ^operator <o> + >)
  (<o> ^name report-failure
       ^always-propose true)
}

sp {subproblem*retrospective*selection*SNC*apply*report-failure*pass*up
  (state <s> ^impasse no-change
             ^attribute state
             ^operator.name report-failure
             ^quiescence t
             ^superstate <ss>)
   (<ss> ^name selection
         ^problem-space.subproblem retrospective)
-->
   (<ss> ^retrospective-learning-result failure)
}
