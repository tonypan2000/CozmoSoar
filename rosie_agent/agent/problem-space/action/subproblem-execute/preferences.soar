# If we are in an execute-task substate without a segment, we need to create the segment
sp {subproblem*execute*copy-task-operator*reject*all*others
   (state <s> ^problem-space.subproblem execute
              ^operator <o1> +
              ^operator <o2> +)
   (<o1> ^name copy-task-operator)
   (<o2> ^name <> copy-task-operator)
-->
   (<s> ^operator <o1> > <o2>)
}

# The first time an execute-task substate is reached, remove the ^start-of-execution flag
sp {subproblem*execute*prefer*remove-start-of-execution-flag*over*others
   (state <s> ^problem-space.subproblem execute
              ^operator <o1> +
              ^operator <o2> +)
   (<o1> ^name remove-start-of-execution-flag)
   (<o2> ^name <> remove-start-of-execution-flag)
-->
   (<s> ^operator <o1> > <o2>)
}

# Do smem lookup before other things
sp {subproblem*execute*prefer*smem-query*over*others
   (state <s> ^problem-space.subproblem execute
              ^operator <o1> +
              ^operator <o2> +)
   (<o1> ^name smem-query )
   (<o2> ^name <> smem-query <> remove-start-of-execution-flag <> copy-task-operator)
-->
   (<s> ^operator <o1> > <o2>)
}

sp {subproblem*execute*prefer*other*operators*over*subtasks
   (state <s> ^problem-space.subproblem execute
             -^child-task-segment
              ^operator <o1> +
              ^operator <o2> +)
   (<o1> -^item-type task-operator
          ^name <> wait)
   (<o2> ^item-type task-operator)
-->
   (<s> ^operator <o1> > <o2>)
}

# Don't complete the task until the agent is done attending to things
sp {subproblem*execute*prefer*attend-to-scene-change*over*complete-task
   (state <s> ^problem-space.subproblem execute
              ^operator <o1> +
              ^operator <o2> +)
   (<o1> ^name attend-to-scene-change)
   (<o2> ^name complete-task)
-->
   (<s> ^operator <o1> > <o2>)
}

# Prefer attend-to-scene-change over command operators
sp {subproblem*execute*prefer*attend-to-scene-change*over*command-operator
   (state <s> ^problem-space.subproblem execute
              ^operator <o1> +
              ^operator <o2> +)
   (<o1> ^name attend-to-scene-change)
   (<o2> ^item-type command-operator)
-->
   (<s> ^operator <o1> > <o2>)
}

sp {subproblem*execute*complete-task*over*failure*handling
   (state <s> ^problem-space.subproblem execute
              ^operator <o1> +
              ^operator <o2> +)
   (<o1> ^name complete-task)
   (<o2> ^category failure-handling)
-->
   (<s> ^operator <o1> > <o2>)
}

sp {subproblem*execute*elaborate*pest-prev-eval*subtask*operator*matches*desired
   (state <s> ^problem-space.subproblem execute
              ^operator <o> +
              ^desired.<pnum> <gp>)
   (<gp> ^type subtask
         ^subtask-handle <sh>)
   (<o> ^item-type task-operator
        ^subtask-handle <sh>)
-->
   (<s> ^operator <o> >
        ^best-pref-eval <o>)
}

sp {subproblem*execute*reject*subtask*operator*if*no*policy
   (state <s> ^problem-space.subproblem execute
              ^operator <o1> +
             -^child-task-segment
             -^created-subtask <sh>
             -^best-pref-eval <o1>)
   (<o1> ^item-type task-operator
         ^subtask-handle <sh>)
-->
   (<s> ^operator <o1> -)
}

sp {subproblem*execute*reject*send*command*if*already*sent
   (state <s> ^problem-space.subproblem execute
              ^operator <o> +
              ^current-task-segment.<cmd-name> <cmd>)
   (<o> ^item-type command-operator
        ^command-name <cmd-name>)
-->
   (<s> ^operator <o> -)
}

################# child-task-segment ####################
# Once a child task is pushed onto the stack
#   we force it to be selected until it is finished

# Finish the child-task-segment before any other operators
sp {subproblem*execute*if*child-task-segment*reject*all*others
   (state <s> ^problem-space.subproblem execute
              ^child-task-segment.task-operator <task-op>
              ^operator <task-op> +
              ^operator { <o2> <> <task-op> } +)
   (<o2> ^name <> pop-task-segment <> add-subtask-to-tcn)
-->
   (<s> ^operator <o2> -)
}

# Only operator to prefer over child-task is pop-task-segment
sp {subproblem*execute*prefer*operators*over*subtask
   (state <s> ^problem-space.subproblem execute
              ^child-task-segment.task-operator <task-op>
              ^operator <task-op> +
              ^operator <o2> +)
   (<o2> ^name << pop-task-segment add-subtask-to-tcn >>)
-->
   (<s> ^operator <o2> > <task-op>)
}

#################### force-state-no-change #########################

## If we want to learn an action model, force a SNC
sp {subproblem*execute*learn-task-action-model*force-state-no-change
   (state <s> ^problem-space.subproblem execute
              ^learn-task-action-model true)
-->
   (<s> ^force-state-no-change true)
}

# If there is an unproposed subtask, force a SNC to learn it
sp {subproblem*execute*unlearned-subtask-proposal*force-state-no-change
   (state <s> ^problem-space.subproblem execute
              ^current-task-segment.learn-subtask-proposal <sub-h>
              ^child-task-segment.task-operator <task-op>)
   -{(<s> ^operator { <sub-op> <> <task-op> } +)
     (<sub-op> ^subtask-handle <sub-h>)}
-->
   (<s> ^force-state-no-change true)
}

# If the agent has not yet learned an elaboration rule for a subgoal, force a SNC
sp {problem-space*action*elaborate*force-state-no-change*if*unlearned*desired
  (state <s> ^problem-space.subproblem execute
             ^task-operator <task-op>
             ^superstate.operator <task-op>
            -^desired)
   (<task-op> ^current-subgoal)
-->
   (<s> ^force-state-no-change true)
}
