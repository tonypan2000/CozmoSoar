############## problem-space.subproblem execute ###############

### State Representation ###
task-operator: The operator representing this task
task-concept-network: The root LTI for the smem knowledge about this task

task-stack: The top-state stack representing the current task decomposition
current-task-segment: The segment on the task-stack for this substate
parent-task-segment: The parent task's task segment
child-task-segment: The child task's task segment




### Problem Space ###
(<ps> ^name action
      ^subproblem execute
	  ^world.copy-type shallow)

### Order of things ###

1. If we are in an execute-task substate without a segment, we need to create the segment
   OP: copy-task-operator - copy the superstate operator as a task-operator
							Then create a new-task-segment on the superstate

2. The first time an execute-task substate is reached, remove the ^start-of-execution flag
   OP: remove-start-of-execution

3. Retrieve the task-concept-network from smem
   OP: smem-query

4. Add the first current-subgoal to the task-operator
   OP: init-current-subgoal

5. If a child task comes from instruction, add a copy of it as a subtask on the TCN
   OP: add-subtask-to-tcn 

6. If a child task is selected:
   OP: push-task-segment - The child task will create a new-task-segment on the state, push it
   OP: <child-task-op>   - We propose the child task operator
   OP: pop-task-segment  - Once the child is finished (child-task-segment has a status), pop it

7. If a ^propose-wait flag is on the state, then the wait operator will be proposed
   OP: wait

8. If the current subgoal is satisfied, advance it to the next one (if present)
   OP: advance-current-subgoal

9. If the final subgoal is achieved, or an error occurs, add a status to the current-task-segment
   OP: complete-task


### Operators ###
remove-start-of-execution-flag
  When an task-stack segment is first created, it has ^start-of-execution true
  First time an execute-task substate is reached, this flag is removed

smem-query [retrieve-tcn]
  Will retrieve the smem info for the task being executed

init-current-subgoal
  Will initialize ^task-operator.current-subgoal if not present

<child-task-seg>
  If there is a child-task-segment with an task-operator, propose it

pop-task-segment
  If the child-task-segment is satisfied, pop it

advance-current-subgoal
  If the current-subgoal is satisfied and there is another subgoal, 
    change the current-subgoal on the task-operator

copy-task-operator
   If we are in an execute-task substate without a segment, 
   propose copy-task-operator to copy the task-operator and create a new segment

push-task-segment
   If there is a ^new-task-segment on the state, 
   Push a new segment onto the stack

add-subtask-to-tcn
   If a child task came from instruction, 
   (has ^task-source instruction)
   Creates a generalized smem version and adds it to the TCN

   Waits until there is a ^created-subtask <h> 
     then removes it and adds ^learn-subtask-proposal <h>

complete-task
  If the goal is satisfied, or a failure detected, 
    add a ^status to the current-task-segment representation

pop-task-segment
  If the child-task-segment has a status, 
     pop the segment 
  

wait
  If the flag ^propose-wait true is on the state, this will propose a wait operator


  preferences.soar


### Task Learning ###

Task Structure - What arguments are needed
  A new task command given by the instructor, 
  Inside generate-task-operator, adds/modifies TCN

Task Goal - What the purpose of the task are
  

### Knowledge Needed ###
Goal Elaboration
Subtask Proposals
Selection Knowledge


