################### propose op_put-down1 ######################

#sp {problem-space*action*propose*op_put-down1*from*goal
#   (state <s> ^problem-space <ps>
#              ^desired.<pnum> <pred>)
#   (<pred> ^type relation ^handle <ph> ^1 <obj1> ^2 <obj2>)
#   (<ps> ^name action
#         ^propose-subtasks true)
#   (<obj1> ^predicates.arm-status grabbed)
#   (<obj2> ^predicates.category object)
#-->
#   (<s> ^operator <op> +)
#   (<op> ^name op_put-down1
#         ^item-type task-operator
#         ^task-handle put-down1
#         ^perform multiple
#         ^arg1 <arg1>
#         ^arg2 <arg2>)
#   (<arg1> ^arg-type object
#           ^id <obj1>)
#   (<arg2> ^arg-type partial-predicate
#           ^handle <ph>
#           ^2 <obj2>)
#}

# put-down on surface receptacle (e.g. table, countertop)
sp {problem-space*action*propose*op_put-down1*on1*surface
   (state <s> ^problem-space <ps>
              ^world.objects.object <obj>
              ^world.objects.object { <obj2> <> <obj> })
   (<ps> ^name action
         ^propose-subtasks true)
   (<obj> ^predicates.arm-status grabbed)
   (<obj2> ^predicates.receptacle surface)
-->
   (<s> ^operator <op> +)
   (<op> ^name op_put-down1
         ^item-type task-operator
         ^task-handle put-down1
         ^perform multiple
         ^arg1 <arg1>
         ^arg2 <arg2>)
   (<arg1> ^arg-type object
           ^id <obj>)
   (<arg2> ^arg-type partial-predicate
           ^handle on1
           ^2 <obj2>)
}

# put-down inside receptacle without a door (e.g. sink)
sp {problem-space*action*propose*op_put-down1*in1*receptacle*no*door
   (state <s> ^problem-space <ps>
              ^world.objects.object <obj>
              ^world.objects.object { <obj2> <> <obj> })
   (<ps> ^name action
         ^propose-subtasks true)
   (<obj> ^predicates.arm-status grabbed)
   (<obj2> ^predicates <obj2-preds>)
   (<obj2-preds> ^receptacle receptacle
                -^door2)
-->
   (<s> ^operator <op> +)
   (<op> ^name op_put-down1
         ^item-type task-operator
         ^task-handle put-down1
         ^perform multiple
         ^arg1 <arg1>
         ^arg2 <arg2>)
   (<arg1> ^arg-type object
           ^id <obj>)
   (<arg2> ^arg-type partial-predicate
           ^handle in1
           ^2 <obj2>)
}

sp {problem-space*action*propose*op_put-down1*in1*receptacle*with*door
   (state <s> ^problem-space <ps>
              ^world.objects.object <obj>
              ^world.objects.object { <obj2> <> <obj> })
   (<ps> ^name action
         ^propose-subtasks true)
   (<obj> ^predicates.arm-status grabbed)
   (<obj2> ^predicates <obj2-preds>)
   (<obj2-preds> ^receptacle receptacle
                 ^door2 open2)
-->
   (<s> ^operator <op> +)
   (<op> ^name op_put-down1
         ^item-type task-operator
         ^task-handle put-down1
         ^perform multiple
         ^arg1 <arg1>
         ^arg2 <arg2>)
   (<arg1> ^arg-type object
           ^id <obj>)
   (<arg2> ^arg-type partial-predicate
           ^handle in1
           ^2 <obj2>)
}

### put-down in the current-location
sp {problem-space*action*propose*op_put-down1*in*current-location
   (state <s> ^problem-space <ps>
              ^world <w>)
   (<w> ^objects.object <obj>)
   (<ps> ^name action
         ^propose-subtasks true)
   (<obj> ^predicates.arm-status grabbed)
-->
   (<s> ^operator <op> +)
   (<op> ^name op_put-down1
         ^item-type task-operator
         ^task-handle put-down1
         ^perform multiple
         ^arg1 <arg1>)
   (<arg1> ^arg-type object
           ^id <obj>)
}

### put-down on another object
sp {problem-space*action*propose*op_put-down1*on*other*object
   (state <s> ^problem-space <ps>
              ^world.objects.object <obj>
              ^world.objects.object { <obj2> <> <obj> }
              ^agent-params.domain << magicbot fetch tabletop cozmo >> )
   (<ps> ^name action
         ^propose-subtasks true)
   (<obj> ^predicates.arm-status grabbed)
   (<obj2> ^predicates <obj2-preds>)
   (<obj2-preds> ^category object
                -^receptacle)
-->
   (<s> ^operator <op> +)
   (<op> ^name op_put-down1
         ^item-type task-operator
         ^task-handle put-down1
         ^perform multiple
         ^arg1 <arg1>
         ^arg2 <arg2>)
   (<arg1> ^arg-type object
           ^id <obj>)
   (<arg2> ^arg-type partial-predicate
           ^handle on1
           ^2 <obj2>)
}
