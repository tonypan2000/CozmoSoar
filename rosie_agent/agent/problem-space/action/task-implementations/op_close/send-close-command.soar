### Send the low-level close command when the door is visible and reachable ###

sp {op_close1*propose*send-close-command
   (state <s> ^name op_close1
              ^target-object <obj>)
   (<obj> ^predicates <preds>)
   (<preds> ^is-visible1 visible1
            ^is-reachable1 reachable1
            ^door2 open2)
-->
   (<s> ^operator <o> + =)
   (<o> ^name send-close-command
        ^command-name close-command
        ^item-type command-operator
        ^object <obj>)
}

### model send-close-command (during planning) ###

sp {op_close1*internal*apply*send-close-command*change*door
   (state <s> ^name op_close1
              ^problem-space.execution-type internal
              ^operator <o>)
   (<o> ^name send-close-command
        ^object.predicates <preds>)
   (<preds> ^door2 open2)
-->
   (<preds> ^door2 open2 -
            ^door2 closed2)
}

### ai2thor and internal ### 

sp {op_close1*external*apply*send-close-command*ai2thor*internal
   (state <s> ^name op_close1
              ^problem-space.execution-type external
              ^agent-params.domain << ai2thor internal >>
              ^operator <o>
              ^io.output-link <ol>
              ^current-task-segment <seg>)
   (<o> ^name send-close-command
        ^command-name <cmd-name>
        ^object.handle <h>)
-->
   (<ol> ^perform-action <pa>)
   (<pa> ^item-type output-command
         ^name close
         ^object <h>)
   (<seg> ^<cmd-name> <pa>)
}


### tabletop ###

sp {op_close1*external*apply*send-close-command*tabletop
   (state <s> ^name op_close1
              ^problem-space.execution-type external
              ^agent-params.domain tabletop
              ^operator <o>
              ^io.output-link <ol>
              ^current-task-segment <seg>)
   (<o> ^name send-close-command
        ^command-name <cmd-name>
        ^object.handle <h>)
-->
   (<ol> ^set-state <set>)
   (<set> ^object-handle <h>
          ^name door2
          ^value closed2)
   (<seg> ^<cmd-name> <set>)
}
