sp {op_remember*propose*merge-objects
   (state <s> ^name op_remember1
              ^object1 <obj1>
              ^object2 <obj2>)
-->
   (<s> ^operator <o> + )
   (<o> ^name merge-objects
        ^object1 <obj1>
        ^object2 <obj2>)
}

sp {op_remember*apply*merge-objects*copy*predicates
   (state <s> ^name op_remember1
              ^operator <o>)
   (<o> ^name merge-objects
        ^object1.predicates <preds>
        ^object2 <obj2>)
   (<obj2> ^predicates.{ <att> << modifier1 property category >> } <val>)
-->
   (<preds> ^<att> <val>)
}

sp {op_remember*apply*merge-objects*link*objects
   (state <s> ^name op_remember1
              ^operator <o>)
   (<o> ^name merge-objects
        ^object1 <obj1>
        ^object2 <obj2>)
-->
   (<obj2> ^linked-to <obj1>)
}
#
#sp {op_remember*apply*merge-objects*remove*object2*from*world
#   (state <s> ^problem-space.name execute-primitive-action
#              ^task-handle remember1
#              ^operator <o>
#              ^top-state.world.objects <objs>)
#   (<o> ^name merge-objects
#        ^object2 <obj2>)
#   (<objs> ^object <obj2>)
#-->
#   (<objs> ^object <obj2> -)
#}

sp {op_remember*apply*merge-objects*mark*complete
   (state <s> ^name op_remember1
              ^operator.name merge-objects
              ^current-task-segment <seg>)
-->
   (<seg> ^status success)
}

sp {op_remember*apply*merge-objects*mark*parent-task-segment*remembered
   (state <s> ^name op_remember1
              ^top-state.task-stack.bottom <seg>
              ^operator <o>)
   (<o> ^name merge-objects
        ^object1 <obj1>
        ^object2 <obj2>)
   (<obj2> ^predicates.{ <att> << modifier1 category property >> } <val>)
   (<obj1> -^predicates.<att> <val>)
-->
   (<seg> ^remembered <rem>)
   (<rem> ^object <obj1>
          ^attribute <att>
          ^value <val>)
}
