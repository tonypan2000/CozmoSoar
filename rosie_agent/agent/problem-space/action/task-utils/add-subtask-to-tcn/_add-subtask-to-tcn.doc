
######################### add-subtask-to-tcn #############################

Takes the operator representation for a subtask and creates a generalized
  representation to be stored in semantic memory which will form the basis
  for a proposal rule to propose this subtask

This happens for certain subtasks where the initial proposal rules aren't
  enough and we need to learn a new proposal rule

It is proposed while executing a task if the subtask doesn't match
  and it has a ^learn-proposal flag on it




##### Operator #####

(<o> ^name add-subtask-to-tcn
     ^task-concept-network <tcn>  - The task-concept-network for the parent task
     ^task-operator  - The task-operator for the parent task
     ^subtask        - The task-operator representation of the subtask


##### State Rep #####

task-concept-network - TCN for the parent task, elaborated from superoperator
task-operator - task-operator for the parent task, elaborated from superoperator
subtask       - task-operator for the subtask, elaborated from superoperator
subtask-tcn   - TCN for the subtask, retrieved through an smem-query
subtask-structure - The generalized rep to be stored in smem

argument-info
  arg-name <arg-name> - name of the argument (from the subtask.<arg-name>)
  arg-type << object concept predicate until-clause >>
  argument <arg>
  generalized <gen>  - link to the corresponding generalize-task-argument on the state

generalize-task-argument - helper structure used to generalize arguments against task-operator
  (See action/task-utils/generalize-task-operator)


##### Results ######

Copies subtask-structure to superstate as store-subtask <struct>


##### Operators #####

create-subtask - Creates the initial subtask-structure and copies basic info
create-subtask-argument - Copies the generalized rep of each argument onto the subtask-structure
generalize-task-argument       - Generalizes each argument (see action/task-utils/generalize-task-operator)
return-subtask-structure - Copies the subtask-structure as superstate.store-subtask
