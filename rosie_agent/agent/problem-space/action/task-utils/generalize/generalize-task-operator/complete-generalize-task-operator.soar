sp {task-utils*generalize-task-operator*propose*complete-generalize-task-operator
   (state <s> ^name generalize-task-operator)
-->
   (<s> ^operator <o> +)
   (<o> ^name complete-generalize-task-operator)
}

# Copy the perform flag
sp {task-utils*generalize-task-operator*elaborate*complete-generalize-task-operator*perform*from*task-concept-network
   (state <s> ^name generalize-task-operator
              ^operator <o> +
              ^task-concept-network.perform <perf>)
   (<o> ^name complete-generalize-task-operator)
-->
   (<o> ^perform <perf>)
}

# Default perform flag
sp {task-utils*generalize-task-operator*elaborate*complete-generalize-task-operator*perform*default
   (state <s> ^name generalize-task-operator
              ^operator <o> +
              ^task-concept-network <tcn>)
   (<o> ^name complete-generalize-task-operator)
   (<tcn> -^perform)
-->
   (<o> ^perform multiple)
}

# Create the root structure
sp {task-utils*generalize-task-operator*apply*complete-generalize-task-operator*create*general-task-rep
   (state <s> ^name generalize-task-operator
              ^task-operator.name <op-name>
              ^task-concept-network.handle <handle>
              ^operator <o>)
   (<o> ^name complete-generalize-task-operator
        ^perform <perf>)
-->
   (<s> ^general-task-rep <gen>)
   (<gen> ^op_name <op-name>
          ^task-handle <handle>
          ^perform <perf>)
}

# ARGSTATUS
## Copy the arg-status flag onto the argument
#sp {generalize-task-operator*apply*complete-generalize-task-operator*copy*arg-status
#   (state <s> ^name generalize-task-operator
#              ^operator.name complete-generalize-task-operator
#              ^task-concept-network.procedural.<arg-name>.arg-status <arg-status>
#              ^generalize-task-argument <arg>)
#   (<arg> ^arg-name <arg-name>
#          ^general-arg-rep <gen-arg>)
#-->
#   (<gen-arg> ^arg-status <arg-status>)
#}


# Copy the arguments onto the general-task-rep and copy the general-task-rep to the superstate
# (Will create the chunked application rule)
# ENUMERATE: 0-6 arguments

sp {__generalize__task__operator__application__*complete-generalize-task-operator*0*arguments
   (state <s> ^name generalize-task-operator
              ^operator.name complete-generalize-task-operator
              ^num-args 0
              ^general-task-rep <gen>
              ^result-destination <dest>)
-->
   (<dest> ^general-task-rep <gen>)
}

sp {__generalize__task__operator__application__*complete-generalize-task-operator*1*arguments
   (state <s> ^name generalize-task-operator
              ^operator.name complete-generalize-task-operator
              ^num-args 1
              ^general-task-rep <gen>
              ^generalize-task-argument   <arg1>
              ^result-destination <dest>)
   (<arg1> ^arg-name <arg1-name> ^general-arg-rep <gen-arg1> ^arg-type <arg1-type>)
-->
   (<dest> ^general-task-rep <gen>)
   (<gen> ^<arg1-name> <gen-arg1>)
   (<gen-arg1> ^arg-type <arg1-type>)
}

sp {__generalize__task__operator__application__*complete-generalize-task-operator*2*arguments
   (state <s> ^name generalize-task-operator
              ^operator.name complete-generalize-task-operator
              ^num-args 2
              ^general-task-rep <gen>
              ^generalize-task-argument   <arg1>
              ^generalize-task-argument { <arg2> > <arg1>}
              ^result-destination <dest>)
   (<arg1> ^arg-name <arg1-name> ^general-arg-rep <gen-arg1> ^arg-type <arg1-type>)
   (<arg2> ^arg-name <arg2-name> ^general-arg-rep <gen-arg2> ^arg-type <arg2-type>)
-->
   (<dest> ^general-task-rep <gen>)
   (<gen> ^<arg1-name> <gen-arg1>
          ^<arg2-name> <gen-arg2>)
   (<gen-arg1> ^arg-type <arg1-type>)
   (<gen-arg2> ^arg-type <arg2-type>)
}

sp {__generalize__task__operator__application__*complete-generalize-task-operator*3*arguments
   (state <s> ^name generalize-task-operator
              ^operator.name complete-generalize-task-operator
              ^num-args 3
              ^general-task-rep <gen>
              ^generalize-task-argument   <arg1>
              ^generalize-task-argument { <arg2> > <arg1>}
              ^generalize-task-argument { <arg3> > <arg2>}
              ^result-destination <dest>)
   (<arg1> ^arg-name <arg1-name> ^general-arg-rep <gen-arg1> ^arg-type <arg1-type>)
   (<arg2> ^arg-name <arg2-name> ^general-arg-rep <gen-arg2> ^arg-type <arg2-type>)
   (<arg3> ^arg-name <arg3-name> ^general-arg-rep <gen-arg3> ^arg-type <arg3-type>)
-->
   (<dest> ^general-task-rep <gen>)
   (<gen> ^<arg1-name> <gen-arg1>
          ^<arg2-name> <gen-arg2>
          ^<arg3-name> <gen-arg3>)
   (<gen-arg1> ^arg-type <arg1-type>)
   (<gen-arg2> ^arg-type <arg2-type>)
   (<gen-arg3> ^arg-type <arg3-type>)
}

sp {__generalize__task__operator__application__*complete-generalize-task-operator*4*arguments
   (state <s> ^name generalize-task-operator
              ^operator.name complete-generalize-task-operator
              ^num-args 4
              ^general-task-rep <gen>
              ^generalize-task-argument   <arg1>
              ^generalize-task-argument { <arg2> > <arg1>}
              ^generalize-task-argument { <arg3> > <arg2>}
              ^generalize-task-argument { <arg4> > <arg3>}
              ^result-destination <dest>)
   (<arg1> ^arg-name <arg1-name> ^general-arg-rep <gen-arg1> ^arg-type <arg1-type>)
   (<arg2> ^arg-name <arg2-name> ^general-arg-rep <gen-arg2> ^arg-type <arg2-type>)
   (<arg3> ^arg-name <arg3-name> ^general-arg-rep <gen-arg3> ^arg-type <arg3-type>)
   (<arg4> ^arg-name <arg4-name> ^general-arg-rep <gen-arg4> ^arg-type <arg4-type>)
-->
   (<dest> ^general-task-rep <gen>)
   (<gen> ^<arg1-name> <gen-arg1>
          ^<arg2-name> <gen-arg2>
          ^<arg3-name> <gen-arg3>
          ^<arg4-name> <gen-arg4>)
   (<gen-arg1> ^arg-type <arg1-type>)
   (<gen-arg2> ^arg-type <arg2-type>)
   (<gen-arg3> ^arg-type <arg3-type>)
   (<gen-arg4> ^arg-type <arg4-type>)
}

sp {__generalize__task__operator__application__*complete-generalize-task-operator*5*arguments
   (state <s> ^name generalize-task-operator
              ^operator.name complete-generalize-task-operator
              ^num-args 5
              ^general-task-rep <gen>
              ^generalize-task-argument   <arg1>
              ^generalize-task-argument { <arg2> > <arg1>}
              ^generalize-task-argument { <arg3> > <arg2>}
              ^generalize-task-argument { <arg4> > <arg3>}
              ^generalize-task-argument { <arg5> > <arg4>}
              ^result-destination <dest>)
   (<arg1> ^arg-name <arg1-name> ^general-arg-rep <gen-arg1> ^arg-type <arg1-type>)
   (<arg2> ^arg-name <arg2-name> ^general-arg-rep <gen-arg2> ^arg-type <arg2-type>)
   (<arg3> ^arg-name <arg3-name> ^general-arg-rep <gen-arg3> ^arg-type <arg3-type>)
   (<arg4> ^arg-name <arg4-name> ^general-arg-rep <gen-arg4> ^arg-type <arg4-type>)
   (<arg5> ^arg-name <arg5-name> ^general-arg-rep <gen-arg5> ^arg-type <arg5-type>)
-->
   (<dest> ^general-task-rep <gen>)
   (<gen> ^<arg1-name> <gen-arg1>
          ^<arg2-name> <gen-arg2>
          ^<arg3-name> <gen-arg3>
          ^<arg4-name> <gen-arg4>
          ^<arg5-name> <gen-arg5>)
   (<gen-arg1> ^arg-type <arg1-type>)
   (<gen-arg2> ^arg-type <arg2-type>)
   (<gen-arg3> ^arg-type <arg3-type>)
   (<gen-arg4> ^arg-type <arg4-type>)
   (<gen-arg5> ^arg-type <arg5-type>)
}

sp {__generalize__task__operator__application__*complete-generalize-task-operator*6*arguments
   (state <s> ^name generalize-task-operator
              ^operator.name complete-generalize-task-operator
              ^num-args 6
              ^general-task-rep <gen>
              ^generalize-task-argument   <arg1>
              ^generalize-task-argument { <arg2> > <arg1>}
              ^generalize-task-argument { <arg3> > <arg2>}
              ^generalize-task-argument { <arg4> > <arg3>}
              ^generalize-task-argument { <arg5> > <arg4>}
              ^generalize-task-argument { <arg6> > <arg5>}
              ^result-destination <dest>)
   (<arg1> ^arg-name <arg1-name> ^general-arg-rep <gen-arg1> ^arg-type <arg1-type>)
   (<arg2> ^arg-name <arg2-name> ^general-arg-rep <gen-arg2> ^arg-type <arg2-type>)
   (<arg3> ^arg-name <arg3-name> ^general-arg-rep <gen-arg3> ^arg-type <arg3-type>)
   (<arg4> ^arg-name <arg4-name> ^general-arg-rep <gen-arg4> ^arg-type <arg4-type>)
   (<arg5> ^arg-name <arg5-name> ^general-arg-rep <gen-arg5> ^arg-type <arg5-type>)
   (<arg6> ^arg-name <arg6-name> ^general-arg-rep <gen-arg6> ^arg-type <arg6-type>)
-->
   (<dest> ^general-task-rep <gen>)
   (<gen> ^<arg1-name> <gen-arg1>
          ^<arg2-name> <gen-arg2>
          ^<arg3-name> <gen-arg3>
          ^<arg4-name> <gen-arg4>
          ^<arg5-name> <gen-arg5>
          ^<arg6-name> <gen-arg6>)
   (<gen-arg1> ^arg-type <arg1-type>)
   (<gen-arg2> ^arg-type <arg2-type>)
   (<gen-arg3> ^arg-type <arg3-type>)
   (<gen-arg4> ^arg-type <arg4-type>)
   (<gen-arg5> ^arg-type <arg5-type>)
   (<gen-arg6> ^arg-type <arg6-type>)
}
