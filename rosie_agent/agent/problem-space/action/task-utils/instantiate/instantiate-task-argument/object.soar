### INSTANTIATE OBJECT


## object procedural match depth 1
sp {task-utils*instantiate-task-operator*propose*instantiate-task-argument*object*matches*procedural*depth*1
   (state <s> ^instantiate-task-argument <arg>
              ^reference-tcn-proc.<arg-name> <parg>
              ^reference-task-op.<arg-name> <op-arg>)
  (<arg> ^arg-type object
         ^general-arg-rep.id <obj-slot>
          -^instantiation)
  (<parg> ^arg-type object
          ^id <obj-slot>)
  (<op-arg> ^arg-type object
            ^id <obj>)
-->
  (<s> ^operator <o> + =)
  (<o> ^name instantiate-task-argument
       ^argument <arg>
       ^arg-type object
       ^match-type procedural
       ^id <obj>)
}

## object procedural match depth 2
sp {task-utils*instantiate-task-operator*propose*instantiate-task-argument*object*matches*procedural*depth*2
   (state <s> ^instantiate-task-argument <arg>
              ^reference-tcn-proc.<arg-name> <parg>
              ^reference-task-op.<arg-name> <op-arg>)
  (<arg> ^arg-type object
         ^general-arg-rep.id <obj-slot>
          -^instantiation)
  (<parg> ^arg-type partial-predicate
          ^2 <obj-slot>)
  (<op-arg> ^arg-type partial-predicate
            ^2 <obj>)
-->
  (<s> ^operator <o> + =)
  (<o> ^name instantiate-task-argument
       ^argument <arg>
       ^arg-type object
       ^match-type procedural
       ^id <obj>)
}

# ENUMERATE: 1-6 predicates on default rep

## object default match with 1 predicate
sp {task-utils*instantiate-task-operator*propose*instantiate-task-argument*object*matches*default*1
   (state <s> ^instantiate-task-argument <arg>
              ^world.objects.object <obj>)
   (<arg> ^arg-type object
          ^general-arg-rep.id.default <def>
          -^instantiation)
   (<def> ^<prop1> <pred1>)
   -{(<def> ^{ <prop2> <> <prop1> })}
   (<obj> ^predicates <preds>)
   (<preds> ^<prop1> <pred1>)
-->
  (<s> ^operator <o> + =)
  (<o> ^name instantiate-task-argument
       ^argument <arg>
       ^arg-type object
       ^match-type default
       ^id <obj>)
}

## object default match with 2 predicate
sp {task-utils*instantiate-task-operator*propose*instantiate-task-argument*object*matches*default*2
   (state <s> ^instantiate-task-argument <arg>
              ^world.objects.object <obj>)
   (<arg> ^arg-type object
          ^general-arg-rep.id.default <def>
          -^instantiation)
   (<def> ^<prop1> <pred1>
          ^{<prop2> > <prop1>} <pred2>)
   -{(<def> ^{ <prop3> <> <prop1> <> <prop2> })}
   (<obj> ^predicates <preds>)
   (<preds> ^<prop1> <pred1>
            ^<prop2> <pred2>)
-->
  (<s> ^operator <o> + =)
  (<o> ^name instantiate-task-argument
       ^argument <arg>
       ^arg-type object
       ^match-type default
       ^id <obj>)
}

## object default match with 3 predicate
sp {task-utils*instantiate-task-operator*propose*instantiate-task-argument*object*matches*default*3
   (state <s> ^instantiate-task-argument <arg>
              ^world.objects.object <obj>)
   (<arg> ^arg-type object
          ^general-arg-rep.id.default <def>
          -^instantiation)
   (<def> ^<prop1> <pred1>
          ^{<prop2> > <prop1>} <pred2>
          ^{<prop3> > <prop2>} <pred3>)
   -{(<def> ^{ <prop4> <> <prop1> <> <prop2> <> <prop3>})}
   (<obj> ^predicates <preds>)
   (<preds> ^<prop1> <pred1>
            ^<prop2> <pred2>
            ^<prop3> <pred3>)
-->
  (<s> ^operator <o> + =)
  (<o> ^name instantiate-task-argument
       ^argument <arg>
       ^arg-type object
       ^match-type default
       ^id <obj>)
}

## object default match with 4 predicate
sp {task-utils*instantiate-task-operator*propose*instantiate-task-argument*object*matches*default*4
   (state <s> ^instantiate-task-argument <arg>
              ^world.objects.object <obj>)
   (<arg> ^arg-type object
          ^general-arg-rep.id.default <def>
          -^instantiation)
   (<def> ^<prop1> <pred1>
          ^{<prop2> > <prop1>} <pred2>
          ^{<prop3> > <prop2>} <pred3>
          ^{<prop4> > <prop3>} <pred4>)
   -{(<def> ^{ <prop5> <> <prop1> <> <prop2> <> <prop3> <> <prop4>})}
   (<obj> ^predicates <preds>)
   (<preds> ^<prop1> <pred1>
            ^<prop2> <pred2>
            ^<prop3> <pred3>
            ^<prop4> <pred4>)
-->
  (<s> ^operator <o> + =)
  (<o> ^name instantiate-task-argument
       ^argument <arg>
       ^arg-type object
       ^match-type default
       ^id <obj>)
}

## object default match with 5 predicate
sp {task-utils*instantiate-task-operator*propose*instantiate-task-argument*object*matches*default*5
   (state <s> ^instantiate-task-argument <arg>
              ^world.objects.object <obj>)
   (<arg> ^arg-type object
          ^general-arg-rep.id.default <def>
          -^instantiation)
   (<def> ^<prop1> <pred1>
          ^{<prop2> > <prop1>} <pred2>
          ^{<prop3> > <prop2>} <pred3>
          ^{<prop4> > <prop3>} <pred4>
          ^{<prop5> > <prop4>} <pred5>)
   -{(<def> ^{ <prop5> <> <prop1> <> <prop2> <> <prop3> <> <prop4> <> <prop5>})}
   (<obj> ^predicates <preds>)
   (<preds> ^<prop1> <pred1>
            ^<prop2> <pred2>
            ^<prop3> <pred3>
            ^<prop4> <pred4>
            ^<prop5> <pred5>)
-->
  (<s> ^operator <o> + =)
  (<o> ^name instantiate-task-argument
       ^argument <arg>
       ^arg-type object
       ^match-type default
       ^id <obj>)
}

## object default match with 6 predicate
sp {task-utils*instantiate-task-operator*propose*instantiate-task-argument*object*matches*default*6
   (state <s> ^instantiate-task-argument <arg>
              ^world.objects.object <obj>)
   (<arg> ^arg-type object
          ^general-arg-rep.id.default <def>
          -^instantiation)
   (<def> ^<prop1> <pred1>
          ^{<prop2> > <prop1>} <pred2>
          ^{<prop3> > <prop2>} <pred3>
          ^{<prop4> > <prop3>} <pred4>
          ^{<prop5> > <prop4>} <pred5>
          ^{<prop6> > <prop5>} <pred6>)
  -{(<def> ^{ <prop6> <> <prop1> <> <prop2> <> <prop3> <> <prop4> <> <prop5> <> <prop6> })}
   (<obj> ^predicates <preds>)
   (<preds> ^<prop1> <pred1>
            ^<prop2> <pred2>
            ^<prop3> <pred3>
            ^<prop4> <pred4>
            ^<prop5> <pred5>
            ^<prop6> <pred6>)
-->
  (<s> ^operator <o> + =)
  (<o> ^name instantiate-task-argument
       ^argument <arg>
       ^arg-type object
       ^match-type default
       ^id <obj>)
}

## object abstract match
sp {task-utils*instantiate-task-operator*propose*instantiate-task-argument*object*matches*abstract
  (state <s> ^instantiate-task-argument <arg>)
   (<arg> ^arg-type object
          ^general-arg-rep.id.default <def>
          -^instantiation)
-->
  (<s> ^operator <o> + =)
  (<o> ^name instantiate-task-argument
       ^argument <arg>
       ^arg-type object
       ^match-type abstract
       ^object-rep <def>)
}

### APPLICATION ###

sp {task-utils*instantiate-task-operator*apply*instantiate-task-argument*object*procedural*default*create*instantiation
  (state <s> ^operator <o>)
  (<o> ^name instantiate-task-argument
       ^argument <arg>
       ^arg-type object
       ^match-type << procedural default >>
       ^id <obj>)
-->
  (<arg> ^instantiation <i>)
  (<i> ^id <obj>)
}

## ENUMERATE: abstract objects with 1-6 predicates in default rep

# instantiate-task-argument abstract with 1 predicate
sp {task-utils*instantiate-task-operator*apply*instantiate-task-argument*object*abstract*1*predicate
  (state <s> ^operator <o>)
  (<o> ^name instantiate-task-argument
       ^argument <arg>
       ^arg-type object
       ^match-type abstract
       ^object-rep <rep>)
  (<rep> ^<prop1> <pred1>)
  -{(<rep> ^{ <prop2> <> <prop1> })}
-->
  (<arg> ^instantiation <i>)
  (<i> ^id <obj>)
  (<obj> ^item-type object
         ^predicates <preds>)
  (<preds> ^<prop1> <pred1>)
}

# instantiate-task-argument abstract with 2 predicates
sp {task-utils*instantiate-task-operator*apply*instantiate-task-argument*object*abstract*2*predicate
  (state <s> ^operator <o>)
  (<o> ^name instantiate-task-argument
       ^argument <arg>
       ^arg-type object
       ^match-type abstract
       ^object-rep <rep>)
   (<rep> ^<prop1> <pred1>
          ^{<prop2> > <prop1>} <pred2>)
   -{(<rep> ^{ <prop3> <> <prop1> <> <prop2> })}
-->
  (<arg> ^instantiation <i>)
  (<i> ^id <obj>)
   (<obj> ^item-type object
           ^predicates <preds>)
   (<preds> ^<prop1> <pred1>
            ^<prop2> <pred2>)
}

# instantiate-task-argument abstract with 3 predicates
sp {task-utils*instantiate-task-operator*apply*instantiate-task-argument*object*abstract*3*predicate
  (state <s> ^operator <o>)
  (<o> ^name instantiate-task-argument
       ^argument <arg>
       ^arg-type object
       ^match-type abstract
       ^object-rep <rep>)
   (<rep> ^<prop1> <pred1>
          ^{<prop2> > <prop1>} <pred2>
          ^{<prop3> > <prop2>} <pred3>)
   -{(<rep> ^{ <prop4> <> <prop1> <> <prop2> <> <prop3>})}
-->
  (<arg> ^instantiation <i>)
  (<i> ^id <obj>)
   (<obj> ^item-type object
           ^predicates <preds>)
   (<preds> ^<prop1> <pred1>
            ^<prop2> <pred2>
            ^<prop3> <pred3>)
}

# instantiate-task-argument abstract with 4 predicates
sp {task-utils*instantiate-task-operator*apply*instantiate-task-argument*object*abstract*4*predicate
  (state <s> ^operator <o>)
  (<o> ^name instantiate-task-argument
       ^argument <arg>
       ^arg-type object
       ^match-type abstract
       ^object-rep <rep>)
   (<rep> ^<prop1> <pred1>
          ^{<prop2> > <prop1>} <pred2>
          ^{<prop3> > <prop2>} <pred3>
          ^{<prop4> > <prop3>} <pred4>)
   -{(<rep> ^{ <prop5> <> <prop1> <> <prop2> <> <prop3> <> <prop4>})}
-->
  (<arg> ^instantiation <i>)
  (<i> ^id <obj>)
   (<obj> ^item-type object
           ^predicates <preds>)
   (<preds> ^<prop1> <pred1>
            ^<prop2> <pred2>
            ^<prop3> <pred3>
            ^<prop4> <pred4>)
}

# instantiate-task-argument abstract with 5 predicates
sp {task-utils*instantiate-task-operator*apply*instantiate-task-argument*object*abstract*5*predicate
  (state <s> ^operator <o>)
  (<o> ^name instantiate-task-argument
       ^argument <arg>
       ^arg-type object
       ^match-type abstract
       ^object-rep <rep>)
   (<rep> ^<prop1> <pred1>
          ^{<prop2> > <prop1>} <pred2>
          ^{<prop3> > <prop2>} <pred3>
          ^{<prop4> > <prop3>} <pred4>
          ^{<prop5> > <prop4>} <pred5>)
   -{(<rep> ^{ <prop5> <> <prop1> <> <prop2> <> <prop3> <> <prop4> <> <prop5>})}
-->
  (<arg> ^instantiation <i>)
  (<i> ^id <obj>)
   (<obj> ^item-type object
           ^predicates <preds>)
   (<preds> ^<prop1> <pred1>
            ^<prop2> <pred2>
            ^<prop3> <pred3>
            ^<prop4> <pred4>
            ^<prop5> <pred5>)
}

# instantiate-task-argument abstract with 6 predicates
sp {task-utils*instantiate-task-operator*apply*instantiate-task-argument*object*abstract*6*predicate
  (state <s> ^operator <o>)
  (<o> ^name instantiate-task-argument
       ^argument <arg>
       ^arg-type object
       ^match-type abstract
       ^object-rep <rep>)
   (<rep> ^<prop1> <pred1>
          ^{<prop2> > <prop1>} <pred2>
          ^{<prop3> > <prop2>} <pred3>
          ^{<prop4> > <prop3>} <pred4>
          ^{<prop5> > <prop4>} <pred5>
          ^{<prop6> > <prop5>} <pred6>)
  -{(<rep> ^{ <prop6> <> <prop1> <> <prop2> <> <prop3> <> <prop4> <> <prop5> <> <prop6> })}
-->
  (<arg> ^instantiation <i>)
  (<i> ^id <obj>)
   (<obj> ^item-type object
           ^predicates <preds>)
   (<preds> ^<prop1> <pred1>
            ^<prop2> <pred2>
            ^<prop3> <pred3>
            ^<prop4> <pred4>
            ^<prop5> <pred5>
            ^<prop6> <pred6>)
}
