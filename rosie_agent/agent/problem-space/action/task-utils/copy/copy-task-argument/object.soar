### COPY OBJECT ARGUMENT

# Propose copy-argument for each object argument

# Not using a map, just directly copy the object reference
sp {task-utils*copy-task-argument*propose*copy-task-argument*object*shallow*no*object-map
   (state <s> ^copy-task-argument <arg>)
   (<arg> ^arg-type object
          ^source-arg.id <obj>
         -^arg-copy
          ^object-map none)
-->
   (<s> ^operator <o> + =)
   (<o> ^name copy-task-argument
        ^argument <arg>
        ^arg-type object
        ^copy-type shallow
        ^object <obj>)
}

# We are using a map which has the object, use the map copy of the object
sp {task-utils*copy-task-argument*propose*copy-task-argument*object*shallow*using*object-map
   (state <s> ^copy-task-argument <arg>)
   (<arg> ^arg-type object
          ^source-arg.id <src-obj>
         -^arg-copy
          ^object-map.<src-obj> <obj-copy>)
-->
   (<s> ^operator <o> + =)
   (<o> ^name copy-task-argument
        ^argument <arg>
        ^arg-type object
        ^copy-type shallow
        ^object <obj-copy>)
}

# The object is not in the object-map, deep copy it
sp {task-utils*copy-task-argument*propose*copy-task-argument*object*deep
   (state <s> ^copy-task-argument <arg>)
   (<arg> ^arg-type object
          ^source-arg.id <src-obj>
         -^arg-copy
          ^object-map { <map> <> none })
   (<map> -^<src-obj> <obj-copy>)
-->
   (<s> ^operator <o> + =)
   (<o> ^name copy-task-argument
        ^argument <arg>
        ^arg-type object
        ^copy-type deep
        ^object <src-obj>)
}


### Apply the copy-argument by creating an object argument
sp {task-utils*copy-task-argument*apply*copy-task-argument*object*shallow*copy
   (state <s> ^operator <o>)
   (<o> ^name copy-task-argument
        ^argument <arg>
        ^arg-type object
        ^copy-type shallow
        ^object <obj>)
-->
   (<arg> ^arg-copy <copy>)
   (<copy> ^arg-type object
           ^id <obj>)
}

# ENUMERATE: deep copy objects with 0-8 predicates

sp {task-utils*copy-task-argument*apply*copy-task-argument*object*deep*copy*0*predicates
   (state <s> ^operator <o>)
   (<o> ^name copy-task-argument
        ^argument <arg>
        ^arg-type object
        ^copy-type deep
        ^object <obj>)
   (<obj> ^predicates <preds>)
   (<preds> -^<p1> <v1>)

-->
   (<arg> ^arg-copy <copy>)
   (<copy> ^arg-type object
           ^id <new-obj>)
   (<new-obj> ^item-type object
              ^predicates <new-preds>)
}

sp {task-utils*copy-task-argument*apply*copy-task-argument*object*deep*copy*1*predicates
   (state <s> ^operator <o>)
   (<o> ^name copy-task-argument
        ^argument <arg>
        ^arg-type object
        ^copy-type deep
        ^object <obj>)
   (<obj> ^predicates <preds>)
   (<preds> ^{ <p1>        } <v1>
           -^{ <p2> <> <p1> } <v2>)
-->
   (<arg> ^arg-copy <copy>)
   (<copy> ^arg-type object
           ^id <new-obj>)
   (<new-obj> ^item-type object
              ^predicates <new-preds>)
   (<new-preds> ^<p1> <v1>)
}


sp {task-utils*copy-task-argument*apply*copy-task-argument*object*deep*copy*2*predicates
   (state <s> ^operator <o>)
   (<o> ^name copy-task-argument
        ^argument <arg>
        ^arg-type object
        ^copy-type deep
        ^object <obj>)
   (<obj> ^predicates <preds>)
   (<preds> ^{ <p1>        } <v1>
            ^{ <p2> > <p1> } <v2>
           -^{ <p3> <> <p2> <> <p1> } <v3>)
-->
   (<arg> ^arg-copy <copy>)
   (<copy> ^arg-type object
           ^id <new-obj>)
   (<new-obj> ^item-type object
              ^predicates <new-preds>)
   (<new-preds> ^<p1> <v1>
                ^<p2> <v2>)
}

sp {task-utils*copy-task-argument*apply*copy-task-argument*object*deep*copy*3*predicates
   (state <s> ^operator <o>)
   (<o> ^name copy-task-argument
        ^argument <arg>
        ^arg-type object
        ^copy-type deep
        ^object <obj>)
   (<obj> ^predicates <preds>)
   (<preds> ^{ <p1>        } <v1>
            ^{ <p2> > <p1> } <v2>
            ^{ <p3> > <p2> } <v3>
           -^{ <p4> <> <p3> <> <p2> <> <p1> } <v4>)
-->
   (<arg> ^arg-copy <copy>)
   (<copy> ^arg-type object
           ^id <new-obj>)
   (<new-obj> ^item-type object
              ^predicates <new-preds>)
   (<new-preds> ^<p1> <v1>
                ^<p2> <v2>
                ^<p3> <v3>)
}

sp {task-utils*copy-task-argument*apply*copy-task-argument*object*deep*copy*4*predicates
   (state <s> ^operator <o>)
   (<o> ^name copy-task-argument
        ^argument <arg>
        ^arg-type object
        ^copy-type deep
        ^object <obj>)
   (<obj> ^predicates <preds>)
   (<preds> ^{ <p1>        } <v1>
            ^{ <p2> > <p1> } <v2>
            ^{ <p3> > <p2> } <v3>
            ^{ <p4> > <p3> } <v4>
           -^{ <p5> <> <p4> <> <p3> <> <p2> <> <p1> } <v5>)
-->
   (<arg> ^arg-copy <copy>)
   (<copy> ^arg-type object
           ^id <new-obj>)
   (<new-obj> ^item-type object
              ^predicates <new-preds>)
   (<new-preds> ^<p1> <v1>
                ^<p2> <v2>
                ^<p3> <v3>
                ^<p4> <v4>)
}

sp {task-utils*copy-task-argument*apply*copy-task-argument*object*deep*copy*5*predicates
   (state <s> ^operator <o>)
   (<o> ^name copy-task-argument
        ^argument <arg>
        ^arg-type object
        ^copy-type deep
        ^object <obj>)
   (<obj> ^predicates <preds>)
   (<preds> ^{ <p1>        } <v1>
            ^{ <p2> > <p1> } <v2>
            ^{ <p3> > <p2> } <v3>
            ^{ <p4> > <p3> } <v4>
            ^{ <p5> > <p4> } <v5>
           -^{ <p6> <> <p5> <> <p4> <> <p3> <> <p2> <> <p1> } <v6>)
-->
   (<arg> ^arg-copy <copy>)
   (<copy> ^arg-type object
           ^id <new-obj>)
   (<new-obj> ^item-type object
              ^predicates <new-preds>)
   (<new-preds> ^<p1> <v1>
                ^<p2> <v2>
                ^<p3> <v3>
                ^<p4> <v4>
                ^<p5> <v5>)
}
     
sp {task-utils*copy-task-argument*apply*copy-task-argument*object*deep*copy*6*predicates
   (state <s> ^operator <o>)
   (<o> ^name copy-task-argument
        ^argument <arg>
        ^arg-type object
        ^copy-type deep
        ^object <obj>)
   (<obj> ^predicates <preds>)
   (<preds> ^{ <p1>        } <v1>
            ^{ <p2> > <p1> } <v2>
            ^{ <p3> > <p2> } <v3>
            ^{ <p4> > <p3> } <v4>
            ^{ <p5> > <p4> } <v5>
            ^{ <p6> > <p5> } <v6>
           -^{ <p7> <> <p6> <> <p5> <> <p4> <> <p3> <> <p2> <> <p1> } <v7>)
-->
   (<arg> ^arg-copy <copy>)
   (<copy> ^arg-type object
           ^id <new-obj>)
   (<new-obj> ^item-type object
              ^predicates <new-preds>)
   (<new-preds> ^<p1> <v1>
                ^<p2> <v2>
                ^<p3> <v3>
                ^<p4> <v4>
                ^<p5> <v5>
                ^<p6> <v6>)
}
           
sp {task-utils*copy-task-argument*apply*copy-task-argument*object*deep*copy*7*predicates
   (state <s> ^operator <o>)
   (<o> ^name copy-task-argument
        ^argument <arg>
        ^arg-type object
        ^copy-type deep
        ^object <obj>)
   (<obj> ^predicates <preds>)
   (<preds> ^{ <p1>        } <v1>
            ^{ <p2> > <p1> } <v2>
            ^{ <p3> > <p2> } <v3>
            ^{ <p4> > <p3> } <v4>
            ^{ <p5> > <p4> } <v5>
            ^{ <p6> > <p5> } <v6>
            ^{ <p7> > <p6> } <v7>
           -^{ <p8> <> <p7> <> <p6> <> <p5> <> <p4> <> <p3> <> <p2> <> <p1> } <v8>)
-->
   (<arg> ^arg-copy <copy>)
   (<copy> ^arg-type object
           ^id <new-obj>)
   (<new-obj> ^item-type object
              ^predicates <new-preds>)
   (<new-preds> ^<p1> <v1>
                ^<p2> <v2>
                ^<p3> <v3>
                ^<p4> <v4>
                ^<p5> <v5>
                ^<p6> <v6>
                ^<p7> <v7>)
}
        
sp {task-utils*copy-task-argument*apply*copy-task-argument*object*deep*copy*8*predicates
   (state <s> ^operator <o>)
   (<o> ^name copy-task-argument
        ^argument <arg>
        ^arg-type object
        ^copy-type deep
        ^object <obj>)
   (<obj> ^predicates <preds>)
   (<preds> ^{ <p1>        } <v1>
            ^{ <p2> > <p1> } <v2>
            ^{ <p3> > <p2> } <v3>
            ^{ <p4> > <p3> } <v4>
            ^{ <p5> > <p4> } <v5>
            ^{ <p6> > <p5> } <v6>
            ^{ <p7> > <p6> } <v7>
            ^{ <p8> > <p7> } <v8>
           -^{ <p9> <> <p8> <> <p7> <> <p6> <> <p5> <> <p4> <> <p3> <> <p2> <> <p1> } <v9>)
-->
   (<arg> ^arg-copy <copy>)
   (<copy> ^arg-type object
           ^id <new-obj>)
   (<new-obj> ^item-type object
              ^predicates <new-preds>)
   (<new-preds> ^<p1> <v1>
                ^<p2> <v2>
                ^<p3> <v3>
                ^<p4> <v4>
                ^<p5> <v5>
                ^<p6> <v6>
                ^<p7> <v7>
                ^<p8> <v8>)
}
        

# TODO: Linked objects?

#sp {retrospective-learning*elaborate*copy-subtask-info*argument-info*object*matches-world*linked
#   (state <s> ^name retrospective-learning
#              ^operator <o> +
#              ^current-task-segment.added <obj>
#              ^world.objects.object <link-obj>)
#   (<o> ^name copy-subtask-info
#        ^argument-info <arg-info>)
#   (<arg-info> ^arg-type object
#              -^source.id.predicates.category message
#               ^source.id.handle <obj-handle>)
#   (<obj> ^handle <obj-handle>
#          ^linked-to.handle <link-handle>)
#   (<link-obj> ^handle <link-handle>)
#-->
#   (<arg-info> ^matches-world <link-obj>)
#}
