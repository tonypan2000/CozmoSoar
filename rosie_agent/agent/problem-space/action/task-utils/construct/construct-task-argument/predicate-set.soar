### construct predicate-set

sp {task-utils*construct-task-argument*expand*predicate-set*predicate
   (state <s> ^construct-task-argument <arg>)
   (<arg> ^arg-type predicate-set
          ^source.{ <num> << 1 2 3 4 5 >> } <pred>)
-->
   (<arg> ^(concat |construct-pred| <num>) <cons>)
   (<cons> ^arg-type predicate
           ^source <pred>)
   (<s> ^construct-task-argument <cons>)
}

### PROPOSE 
sp {task-utils*construct-task-argument*propose*construct-task-argument*predicate-set
   (state <s> ^construct-task-argument <arg>)
   (<arg> ^arg-type predicate-set
          ^source.pred-count <c>
         -^created-arg)
-->
   (<s> ^operator <o> + =)
   (<o> ^name construct-task-argument
        ^argument <arg>
        ^arg-type predicate-set
        ^pred-count <c>)
}

### REJECT (if subpredicates are not all constructed)
sp {task-utils*construct-task-argument*reject*construct-task-argument*predicate-set*unconstructed*predicate
   (state <s> ^operator <o> +)
   (<o> ^name construct-task-argument
        ^argument <arg>)
   (<arg> ^<cons-pred> <cp>)
   (<cp> ^arg-type predicate
        -^created-arg)
-->
   (<s> ^operator <o> -)
}


### APPLY
# ENUMERATE: 1-5 predicates

sp {task-utils*construct-task-argument*apply*construct-task-argument*predicate-set*1
   (state <s> ^operator <o>)
   (<o> ^name construct-task-argument
        ^argument <arg>
        ^arg-type predicate-set
        ^pred-count 1)
   (<arg> ^construct-pred1.created-arg <cons1>)
-->
   (<arg> ^created-arg <cons>)
   (<cons> ^pred-count 1
           ^1 <cons1>)
}

sp {task-utils*construct-task-argument*apply*construct-task-argument*predicate-set*2
   (state <s> ^operator <o>)
   (<o> ^name construct-task-argument
        ^argument <arg>
        ^arg-type predicate-set
        ^pred-count 2)
   (<arg> ^construct-pred1.created-arg <cons1>
          ^construct-pred2.created-arg <cons2>)
-->
   (<arg> ^created-arg <cons>)
   (<cons> ^pred-count 2
           ^1 <cons1>
           ^2 <cons2>)
}

sp {task-utils*construct-task-argument*apply*construct-task-argument*predicate-set*3
   (state <s> ^operator <o>)
   (<o> ^name construct-task-argument
        ^argument <arg>
        ^arg-type predicate-set
        ^pred-count 3)
   (<arg> ^construct-pred1.created-arg <cons1>
          ^construct-pred2.created-arg <cons2>
          ^construct-pred3.created-arg <cons3>)
-->
   (<arg> ^created-arg <cons>)
   (<cons> ^pred-count 3
           ^1 <cons1>
           ^2 <cons2>
           ^3 <cons3>)
}

sp {task-utils*construct-task-argument*apply*construct-task-argument*predicate-set*4
   (state <s> ^operator <o>)
   (<o> ^name construct-task-argument
        ^argument <arg>
        ^arg-type predicate-set
        ^pred-count 4)
   (<arg> ^construct-pred1.created-arg <cons1>
          ^construct-pred2.created-arg <cons2>
          ^construct-pred3.created-arg <cons3>
          ^construct-pred4.created-arg <cons4>)
-->
   (<arg> ^created-arg <cons>)
   (<cons> ^pred-count 4
           ^1 <cons1>
           ^2 <cons2>
           ^3 <cons3>
           ^4 <cons4>)
}

sp {task-utils*construct-task-argument*apply*construct-task-argument*predicate-set*5
   (state <s> ^operator <o>)
   (<o> ^name construct-task-argument
        ^argument <arg>
        ^arg-type predicate-set
        ^pred-count 5)
   (<arg> ^construct-pred1.created-arg <cons1>
          ^construct-pred2.created-arg <cons2>
          ^construct-pred3.created-arg <cons3>
          ^construct-pred4.created-arg <cons4>
          ^construct-pred5.created-arg <cons5>)
-->
   (<arg> ^created-arg <cons>)
   (<cons> ^pred-count 5
           ^1 <cons1>
           ^2 <cons2>
           ^3 <cons3>
           ^4 <cons4>
           ^5 <cons5>)
}

