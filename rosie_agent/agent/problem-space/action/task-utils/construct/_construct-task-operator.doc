### 0. [elaborations.soar]
#       State elaborations
   ^world - from superstate.world
   ^command-message - from superstate.operator

### 1. [retrieve-tcn.soar]
#      Retrieve the task concept network from smem 
   ^task-concept-network <tcn>

### 2. [add-procedural-link-to-tcn.soar]
#      Create the procedural structure on the TCN, if it doesn't exist 
   operator add-procedural-link-to-tcn 

### 3. [create-operator-base.soar]
#      Create the base task-operator structure w/o arguments 
   ^task-operator
      ^item-type task-operator
      ^task-handle <h>
      ^name <op-name>

### 4. [propose-construct-task-argument.soar + substate]
#      Construct each argument 
#       Take the argument from the command message 
#       and create the appropriate structure on the task-operator
   operator construct-task-argument
     ^arg-name <arg-name> # The name to use when adding to the task-operator
     ^arg-type <arg-type> # Type of the argument << concept object predicate until-clause >>
     ^message-arg <marg>  # The corresponding argument on the command-message

### 5. [mark-argument-missing.soar] 
#      If a required argument is missing on the command-message  
#      (The argument is marked ^required true on the task-concept-network)
#      Then mark it missing on the task-operator (Add ^missing-argument <arg-name>)
   operator mark-argument-missing
      ^arg-name <arg-name>

### 6. [store-smem-concepts.soar]
#      Store any changes to smem structures 
#      (If there exist any ^to-store identifiers on the state)
   operator store-smem-concepts

### 7. [create-new-task-segment.soar]
#      Once the task-operator is constructed, create a new-task-segment
   operator create-new-task-segment

### 8. [push-task-segment.soar]
#      Once the new-task-segment is created, push it onto the task-stack
#      (See problem-space/action/task-utils/push-task-segment)
#      Will add ^pushed <seg> to the state when finished
   operator push-task-segment

### 9. [complete-construct-task-operator.soar]
#      Once the new-task-segment is pushed, 
#        mark the message as pushed to exit the substate
   operator complete-construct-task-operator

      
