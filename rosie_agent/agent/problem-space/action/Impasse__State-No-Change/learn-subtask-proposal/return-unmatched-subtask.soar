sp {learn-subtask-proposal*propose*return-unmatched-subtask
   (state <s> ^name learn-subtask-proposal
              ^subtask-operator <op>)
-->
   (<s> ^operator <o> + >)
   (<o> ^name return-unmatched-subtask
        ^subtask-operator <op>
        ^always-propose true)
}

sp {learn-subtask-proposal*reject*return-unmatched-subtask*if*not*unmatched
   (state <s> ^name learn-subtask-proposal
              ^operator <o> +
             -^no-subtask-matches true)
   (<o> ^name return-unmatched-subtask)
-->
   (<s> ^operator <o> -)
}

# CREATE RESULT
sp {TASK*PROPOSE*SUBTASK*learn-subtask-proposal*unmatched*subtask
   (state <s> ^name learn-subtask-proposal
              ^operator <o>
              ^superstate.superstate <ss>)
   (<o> ^name return-unmatched-subtask
        ^subtask-operator <op>)
-->
   (<ss> ^operator <op> +)
}

sp {learn-subtask-proposal*apply*return-unmatched-subtask*removed*learned*no*superstate
   (state <s> ^name learn-subtask-proposal
              ^superstate <ss>
              ^operator <o>
              ^subtask-handle <h>)
   (<o> ^name return-unmatched-subtask
        ^subtask-operator <op>)
   (<ss> ^name task-state-no-change
         ^task-concept-network.procedural.subtasks.subtask <sub>)
   (<sub> ^handle <h>
          ^learned no)
-->
   (<sub> ^learned no -)
}

