sp {chunk*chunk-puzzle-impasse*apply*complete*OpNoChange*t5218-3
    :chunk
    (state <s1> ^retrieve-game lazy-stacked-frogs1 -^opponent <o1>)
    -->
    (<s1> ^retrieve-handle action-default29 +)
}

sp {chunk*chunk-puzzle-impasse*apply*complete*OpNoChange*t5218-2
    :chunk
    (state <s1> ^retrieve-game lazy-stacked-frogs1 -^opponent <o1>)
    -->
    (<s1> ^retrieve-handle goal-default42 +)
}

sp {chunk*chunk-puzzle-impasse*apply*complete*start-search-depth*OpNoChange*t5218-1
    :chunk
    (state <s1> ^retrieve-game lazy-stacked-frogs1 -^opponent <o1>)
    -->
    (<s1> ^start-search-depth 3 +)
}

sp {chunk*chunk-predicate-impasse*apply*complete*action*OpNoChange*t5107-1
    :chunk
    (state <s1> ^gtype goal ^retrieve-handle goal-default42)
    -->
    (<s1> ^goal <g1> +)
    (<g1> ^potential-args <p1> + ^parameter-set <p2> + ^formated predicate +
           ^primary-rtype set + ^nlp-set <n1> + ^aname goal-default42 +
           ^handle goal-default42 +)
    (<p2> ^argnum 2 +)
    (<n1> ^conditions <c1> + ^conditions <c2> + ^aname goal-default42 +)
    (<c1> ^return-type number + ^function soar-count + ^rtype single +
           ^args <a1> + ^negative false + ^parameter <p6> + ^result <r4> +
           ^name count + ^type function +)
    (<a1> ^num 1 + ^2 <i1> +)
    (<i1> ^rtype set + ^args <a2> + ^negative false + ^parameter <p5> +
           ^result <r3> + ^attribute predicate + ^name clear + ^type concept +)
    (<a2> ^num 1 + ^1 <i2> +)
    (<i2> ^rtype single + ^args <a3> + ^negative false + ^parameter <p4> +
           ^result <r2> + ^attribute category + ^name location +
           ^type attribute +)
    (<a3> ^num 1 + ^1 <i3> +)
    (<i3> ^rtype single + ^args <a4> + ^negative false + ^parameter <p3> +
           ^result <r1> + ^attribute primitive + ^name object +
           ^type attribute +)
    (<p3> ^num 0 +)
    (<r1> ^set <s2> +)
    (<p4> ^num 0 +)
    (<r2> ^set <s3> +)
    (<p5> ^num 1 + ^1 <i4> +)
    (<i4> ^param-id 1 + ^type set +)
    (<r3> ^set <s4> +)
    (<p6> ^num 2 + ^2 <i5> + ^1 <i6> +)
    (<i5> ^param-id 1 + ^type set +)
    (<i6> ^param-id 2 + ^type single +)
    (<r4> ^set <s5> +)
    (<c2> ^return-type number + ^rtype single + ^args <a5> + ^negative false +
           ^parameter <p7> + ^result <r5> + ^name number +)
    (<p7> ^num 1 + ^1 <i7> +)
    (<i7> ^param-id 2 + ^type single +)
    (<r5> ^set <s6> +)
    (<s6> ^instance <i8> +)
    (<i8> ^1 3 +)
}

sp {chunk*chunk-predicate-impasse*apply*complete*OpNoChange*t4750-1
    :chunk
    (state <s1> ^gtype <g1> ^<g1> <g2>)
    (<g2> ^condition <c1>)
    (<c1> ^name clear ^type concept ^attribute predicate)
    -->
    (<s1> ^predicate <p1> + ^gtype predicate +)
    (<p1> ^link <c1> + ^potential-args <p2> + ^parameter-set <p3> +
           ^formated predicate + ^primary-rtype single + ^nlp-set <n1> +
           ^aname clear + ^handle clear +)
    (<p3> ^argnum 1 +)
    (<n1> ^conditions <c2> + ^aname clear +)
    (<c2> ^rtype single + ^args <a1> + ^negative true + ^parameter <p6> +
           ^result <r3> + ^attribute prepositions + ^name below1 +
           ^type state-pair +)
    (<a1> ^num 2 + ^2 <i1> + ^1 <i2> +)
    (<i1> ^rtype single + ^args <a2> + ^negative false + ^parameter <p4> +
           ^result <r1> + ^attribute primitive + ^name object +
           ^type attribute +)
    (<p4> ^num 0 +)
    (<r1> ^set <s2> +)
    (<i2> ^rtype single + ^args <a3> + ^negative false + ^parameter <p5> +
           ^result <r2> + ^attribute input-arg + ^name object +)
    (<p5> ^num 1 + ^1 <i3> +)
    (<i3> ^param-id 1 + ^type single +)
    (<r2> ^set <s3> +)
    (<p6> ^num 1 + ^1 <i4> +)
    (<i4> ^param-id 1 + ^type single +)
    (<r3> ^set <s4> +)
}

sp {chunk*chunk-predicate-impasse*apply*complete*action*OpNoChange*t3839-1
    :chunk
    (state <s1> ^gtype action ^retrieve-handle action-default29)
    -->
    (<s1> ^action <a1> +)
    (<a1> ^potential-args <p1> + ^parameter-set <p2> + ^formated predicate +
           ^primary-rtype single + ^nlp-set <n1> + ^verb-structure <v1> +
           ^aname action-default29 + ^handle action-default29 +)
    (<p2> ^argnum 5 +)
    (<n1> ^conditions <c1> + ^conditions <c2> + ^conditions <c3> +
           ^conditions <c4> + ^aname action-default29 +)
    (<c2> ^rtype set + ^args <a2> + ^negative false + ^parameter <p5> +
           ^result <r3> + ^attribute prepositions + ^name on1 +
           ^type state-pair +)
    (<a2> ^num 2 + ^2 <i1> + ^1 <i2> +)
    (<i2> ^rtype single + ^args <a3> + ^negative false + ^parameter <p4> +
           ^result <r2> + ^attribute category + ^name block +
           ^type attribute +)
    (<a3> ^num 1 + ^1 <i3> +)
    (<i3> ^rtype single + ^args <a4> + ^negative false + ^parameter <p3> +
           ^result <r1> + ^attribute primitive + ^name object +
           ^type attribute +)
    (<p3> ^num 0 +)
    (<r1> ^set <s2> +)
    (<p4> ^num 0 +)
    (<r2> ^set <s3> +)
    (<p5> ^num 2 + ^2 <i4> + ^1 <i5> +)
    (<i4> ^param-id 2 + ^type single +)
    (<i5> ^param-id 4 + ^type set +)
    (<r3> ^set <s4> +)
    (<c3> ^return-type number + ^function soar-count + ^rtype single +
           ^args <a5> + ^negative false + ^parameter <p6> + ^result <r4> +
           ^name count + ^type function +)
    (<a5> ^num 1 + ^2 <c2> +)
    (<p6> ^num 2 + ^2 <i6> + ^1 <i7> +)
    (<i6> ^param-id 4 + ^type set +)
    (<i7> ^param-id 5 + ^type single +)
    (<r4> ^set <s5> +)
    (<c1> ^function board-between + ^rtype set + ^args <a10> +
           ^negative false + ^parameter <p15> + ^result <r13> +
           ^name between + ^type function +)
    (<i1> ^rtype single + ^args <a6> + ^negative false + ^parameter <p10> +
           ^result <r8> + ^attribute predicate + ^name covered +
           ^type concept +)
    (<a6> ^num 1 + ^1 <i8> +)
    (<i8> ^rtype single + ^args <a7> + ^negative false + ^parameter <p9> +
           ^result <r7> + ^attribute predicate + ^name available +
           ^type concept +)
    (<a7> ^num 1 + ^1 <i9> +)
    (<i9> ^rtype single + ^args <a8> + ^negative false + ^parameter <p8> +
           ^result <r6> + ^attribute category + ^name location +
           ^type attribute +)
    (<a8> ^num 1 + ^1 <i10> +)
    (<i10> ^rtype single + ^args <a9> + ^negative false + ^parameter <p7> +
           ^result <r5> + ^attribute primitive + ^name object +
           ^type attribute +)
    (<p7> ^num 0 +)
    (<r5> ^set <s6> +)
    (<p8> ^num 0 +)
    (<r6> ^set <s7> +)
    (<p9> ^num 0 +)
    (<r7> ^set <s8> +)
    (<p10> ^num 0 +)
    (<r8> ^set <s9> +)
    (<a10> ^num 3 + ^3 <i1> + ^2 <i11> + ^1 <i13> +)
    (<i11> ^rtype single + ^args <a11> + ^negative false + ^parameter <p12> +
           ^result <r10> + ^attribute category + ^name location +
           ^type attribute +)
    (<a11> ^num 1 + ^1 <i12> +)
    (<i12> ^rtype single + ^args <a12> + ^negative false + ^parameter <p11> +
           ^result <r9> + ^attribute primitive + ^name object +
           ^type attribute +)
    (<p11> ^num 0 +)
    (<r9> ^set <s10> +)
    (<p12> ^num 0 +)
    (<r10> ^set <s11> +)
    (<i13> ^rtype set + ^args <a13> + ^negative false + ^parameter <p14> +
           ^result <r12> + ^attribute category + ^name location +
           ^type attribute +)
    (<a13> ^num 1 + ^1 <i14> +)
    (<i14> ^rtype single + ^args <a14> + ^negative false + ^parameter <p13> +
           ^result <r11> + ^attribute primitive + ^name object +
           ^type attribute +)
    (<p13> ^num 0 +)
    (<r11> ^set <s12> +)
    (<p14> ^num 0 +)
    (<r12> ^set <s13> +)
    (<p15> ^num 3 + ^3 <i15> + ^2 <i16> + ^1 <i17> +)
    (<i15> ^param-id 2 + ^type single +)
    (<i16> ^param-id 1 + ^type single +)
    (<i17> ^param-id 3 + ^type set +)
    (<r13> ^set <s14> +)
    (<c4> ^return-type number + ^function soar-count + ^rtype single +
           ^args <a15> + ^negative false + ^parameter <p16> + ^result <r14> +
           ^name count + ^type function +)
    (<a15> ^num 1 + ^2 <c1> +)
    (<p16> ^num 2 + ^2 <i18> + ^1 <i19> +)
    (<i18> ^param-id 3 + ^type set +)
    (<i19> ^param-id 5 + ^type single +)
    (<r14> ^set <s15> +)
    (<v1> ^1 <i20> +)
    (<i20> ^verb-prep on1 + ^verb-name move1 + ^2 1 + ^1 4 +)
}

sp {chunkx4*soar-count*apply*complete*OpNoChange*t3825-1
    :chunk
    (state <s1> ^list <l1>
          ^{ <a1> << action goal predicate failure heuristic >> } <a2>)
    (<l1> ^game <g1>)
    (<a2> ^condition <c1>)
    (<c1> ^function soar-count ^type function ^args <a3> ^parameter <p1>
          ^negative <n1> ^result <r1> ^name <n2>)
    (<a3> ^num 1 ^2 <i1>)
    (<p1> ^num 2)
    (<i1> ^rtype set ^result <r2>)
    (<r1> ^set <s2>)
    (<r2> ^set <s3>)
    (<s3> ^instance <i2>)
    (<i2> ^1 <i3>)
   -{ (<i3> -^<a4> <a5>)
      (<s1> ^<a6> <a7>)}
    -->
    (<s2> ^instance <i4> +)
    (<i4> ^1 (size <i3>) + ^2 <i3> +)
}

sp {chunkx4*board-between*elaborate*instances*samexy*set*OpNoChange*t3819-2
    :chunk
    (state <s1> ^list <l1>
          ^{ <a1> << action goal predicate failure heuristic >> } <a2>)
    (<l1> ^game <g1>)
    (<a2> ^condition <c1>)
    (<c1> ^function board-between ^rtype set ^name between ^type function
          ^args <a3> ^negative <n1> ^parameter <p1> ^result <r3>)
    (<a3> ^num 3 ^1 <i1> ^3 <i2> ^2 <i3>)
    (<i1> ^rtype set ^result <r4>)
    (<i3> ^result <r1> ^result <r5>)
    (<r1> ^set <s2>)
    (<s2> ^instance <i4>)
    (<i4> ^1 <i5>)
    (<i2> ^result <r2> ^result <r6>)
    (<r2> ^set <s3>)
    (<s3> ^instance <i6>)
    (<i6> ^1 { <i7> <> <i5> })
    (<r3> ^set <s4>)
    (<s4> ^instance <i8>)
    (<i8> ^3 <i9> ^2 <i10> ^1 <i11>)
    (<i9> ^predicates <p2>)
    (<i10> ^predicates <p3>)
    (<r4> ^set <s5>)
    (<s5> ^instance <i12>)
    (<i12> ^1 <i13>)
    (<r5> ^set <s6>)
    (<s6> ^instance <i14>)
    (<i14> ^1 <i10>)
    (<r6> ^set <s7>)
    (<s7> ^instance <i15>)
    (<i15> ^1 <i9>)
    (<p3> ^{ <a4> << x y >> } <a5> ^{ <a8> << x y >> <> <a4> } <a9>)
    (<p2> ^<a4> <a5> ^<a8> <a10>)
    (<i13> ^<a6> <a7>)
    (<a7> ^predicates <p4>)
    (<p4> ^<a4> <a5>)
   -{ (<p4> ^<a8> { <a11> > <a10> >= <a9> } ^<a8> <a11>)}
   -{ (<p4> ^<a8> { <a12> < <a10> <= <a9> } ^<a8> <a12>)}
    -->
    (<i11> ^object <a7> +)
}

sp {chunkx4*board-between*elaborate*object*instance*OpNoChange*t3819-1
    :chunk
    (state <s1> ^list <l1>
          ^{ <a1> << action goal predicate failure heuristic >> } <a2>)
    (<l1> ^game <g1>)
    (<a2> ^condition <c1>)
    (<c1> ^function board-between ^rtype set ^type function ^args <a3>
          ^negative <n1> ^parameter <p1> ^result <r1> ^name <n2>)
    (<a3> ^num 3 ^3 <i1> ^2 <i2> ^1 <i3>)
    (<r1> ^set <s2>)
    (<i2> ^result <r2>)
    (<r2> ^set <s3>)
    (<s3> ^instance <i4>)
    (<i4> ^1 <i5>)
    (<i1> ^result <r3>)
    (<r3> ^set <s4>)
    (<s4> ^instance <i6>)
    (<i6> ^1 { <i7> <> <i5> })
    -->
    (<s2> ^instance <i8> +)
    (<i8> ^1 <i9> + ^3 <i7> + ^2 <i5> +)
}

sp {chunkx4*with-attribute*apply*complete*instance*objects*OpNoChange*t3813-2
    :chunk
    (state <s1> ^list <l1>
          ^{ <a1> << action goal predicate failure heuristic >> } <a2>)
    (<l1> ^game <g1>)
    (<a2> ^condition <c1>)
    (<c1> ^rtype set ^type attribute ^args <a3> ^negative <n1> ^parameter <p1>
          ^result <r2> ^attribute <i5> ^name <i6>)
    (<a3> ^1 <i1>)
    (<i1> -^rtype set ^result <r1>)
    (<r1> ^set <s2>)
    (<s2> ^instance <i2>)
    (<i2> ^1 <i3>)
    (<i3> ^predicates <p2>)
    (<r2> ^set <s3>)
    (<s3> ^instance <i4>)
    (<i4> ^3 <i5> ^2 <i6> ^1 <i7>)
    (<p2> ^<i5> <i6>)
    -->
    (<i7> ^object <i3> +)
}

sp {chunkx4*with-attribute*apply*complete*instance*OpNoChange*t3813-1
    :chunk
    (state <s1> ^list <l1>
          ^{ <a1> << action goal predicate failure heuristic >> } <a2>)
    (<l1> ^game <g1>)
    (<a2> ^condition <c1>)
    (<c1> ^rtype set ^type attribute ^args <a3> ^negative <n1> ^parameter <p1>
          ^result <r1> ^name <n2> ^attribute <a4>)
    (<a3> ^1 <i1>)
    (<i1> -^rtype set)
    (<r1> ^set <s2>)
    -->
    (<s2> ^instance <i2> +)
    (<i2> ^2 <n2> + ^3 <a4> + ^1 <i3> +)
}

sp {chunkx4*top-pair*with-type*1param*set*noarg-set1*apply*OpNoChange*t3807-2
    :chunk
    (state <s1> ^list <l1> ^world <w1>
          ^{ <a1> << action goal predicate failure heuristic >> } <a2>)
    (<l1> ^game <g1>)
    (<w1> ^predicates <p1>)
    (<a2> ^condition <c1>)
    (<c1> ^rtype set ^negative false ^type state-pair ^args <a3>
          ^parameter <p2> ^result <r2> ^name <n1> ^attribute <a4>)
    (<a3> ^num 2 ^2 <i1> ^1 <i2> ^2 <i3> ^1 <i4>)
    (<p2> ^num 2)
    (<i1> -^rtype set ^result <r4>)
    (<i2> -^rtype set ^result <r3>)
    (<i3> ^result <r1>)
    (<r1> ^set <s2>)
    (<s2> ^instance <i5>)
    (<i5> ^1 <i6>)
    (<r2> ^set <s3>)
    (<s3> ^instance <i7>)
    (<i7> ^2 <i8> ^1 <i9>)
    (<r3> ^set <s4>)
    (<s4> ^instance <i10>)
    (<i10> ^1 <i11>)
    (<r4> ^set <s5>)
    (<s5> ^instance <i12>)
    (<i12> ^1 <i8>)
    (<p1> ^predicate <p3>)
    (<p3> ^handle <n1> ^instance <i13>)
    (<i13> ^2 <i8> ^1 <i11>)
    -->
    (<i9> ^object <i11> +)
}

sp {chunkx4*top-pair*apply*complete*OpNoChange*t3807-1
    :chunk
    (state <s1> ^list <l1>
          ^{ <a1> << action goal predicate failure heuristic >> } <a2>)
    (<l1> ^game <g1>)
    (<a2> ^condition <c1>)
    (<c1> ^rtype set ^negative false ^type state-pair ^args <a3>
          ^parameter <p1> ^result <r1> ^name <n1> ^attribute <a4>)
    (<a3> ^num 2 ^2 <i1> ^1 <i2>)
    (<p1> ^num 2)
    (<i1> -^rtype set ^result <r2>)
    (<i2> -^rtype set)
    (<r1> ^set <s2>)
    (<r2> ^set <s3>)
    (<s3> ^instance <i3>)
    (<i3> ^1 <i4>)
    -->
    (<s2> ^instance <i5> +)
    (<i5> ^2 <i4> + ^1 <i6> +)
}

sp {chunk*chunk-predicate-impasse*apply*complete*OpNoChange*t2231-1
    :chunk
    (state <s1> ^gtype <g1> ^<g1> <g2>)
    (<g2> ^condition <c1>)
    (<c1> ^name covered ^type concept ^attribute predicate)
    -->
    (<s1> ^predicate <p1> + ^gtype predicate +)
    (<p1> ^link <c1> + ^potential-args <p2> + ^parameter-set <p3> +
           ^formated predicate + ^primary-rtype single + ^nlp-set <n1> +
           ^aname covered + ^handle covered +)
    (<p3> ^argnum 1 +)
    (<n1> ^conditions <c2> + ^aname covered +)
    (<c2> ^rtype single + ^args <a1> + ^negative false + ^parameter <p6> +
           ^result <r3> + ^attribute prepositions + ^name below1 +
           ^type state-pair +)
    (<a1> ^num 2 + ^2 <i1> + ^1 <i2> +)
    (<i1> ^rtype single + ^args <a2> + ^negative false + ^parameter <p4> +
           ^result <r1> + ^attribute primitive + ^name object +
           ^type attribute +)
    (<p4> ^num 0 +)
    (<r1> ^set <s2> +)
    (<i2> ^rtype single + ^args <a3> + ^negative false + ^parameter <p5> +
           ^result <r2> + ^attribute input-arg + ^name object +)
    (<p5> ^num 1 + ^1 <i3> +)
    (<i3> ^param-id 1 + ^type single +)
    (<r2> ^set <s3> +)
    (<p6> ^num 1 + ^1 <i4> +)
    (<i4> ^param-id 1 + ^type single +)
    (<r3> ^set <s4> +)
}

sp {chunkx4*top-pair*apply*complete*OpNoChange*t2216-1
    :chunk
    (state <s1> ^list <l1> ^world <w1>
          ^{ <a1> << action goal predicate failure heuristic >> } <a2>)
    (<l1> ^game <g1>)
    (<w1> ^predicates <p1>)
    (<a2> ^condition <c1>)
    (<c1> ^rtype single ^negative false ^type state-pair ^args <a3>
          ^parameter <p2> ^result <r1> ^name <n2> ^attribute <a4>)
    (<a3> ^num 2 ^2 <i1> ^1 <i2>)
    (<i1> -^rtype set ^result <r3>)
    (<i2> -^rtype set ^result <r2>)
    (<p2> ^num { <n1> < 2 })
    (<r1> ^set <s2>)
    (<r2> ^set <s3>)
    (<s3> ^instance <i3>)
    (<i3> ^1 <i4>)
    (<r3> ^set <s4>)
    (<s4> ^instance <i5>)
    (<i5> ^1 <i6>)
    (<p1> ^predicate <p3>)
    (<p3> ^handle <n2> ^instance <i7>)
    (<i7> ^2 <i6> ^1 <i4>)
    -->
    (<s2> ^instance <i8> +)
    (<i8> ^1 <i4> +)
}

sp {chunk*chunk-predicate-impasse*apply*complete*OpNoChange*t1618-1
    :chunk
    (state <s1> ^gtype <g1> ^<g1> <g2>)
    (<g2> ^condition <c1>)
    (<c1> ^name available ^type concept ^attribute predicate)
    -->
    (<s1> ^predicate <p1> + ^gtype predicate +)
    (<p1> ^link <c1> + ^potential-args <p2> + ^parameter-set <p3> +
           ^formated predicate + ^primary-rtype single + ^nlp-set <n1> +
           ^aname available + ^handle available +)
    (<p3> ^argnum 1 +)
    (<n1> ^conditions <c2> + ^aname available +)
    (<c2> ^rtype single + ^args <a1> + ^negative true + ^parameter <p8> +
           ^result <r5> + ^attribute prepositions + ^name below1 +
           ^type state-pair +)
    (<a1> ^num 2 + ^2 <i1> + ^1 <i4> +)
    (<i1> ^rtype single + ^args <a2> + ^negative false + ^parameter <p6> +
           ^result <r3> + ^attribute predicate + ^name lazy + ^type concept +)
    (<a2> ^num 1 + ^1 <i2> +)
    (<i2> ^rtype single + ^args <a3> + ^negative false + ^parameter <p5> +
           ^result <r2> + ^attribute category + ^name block +
           ^type attribute +)
    (<a3> ^num 1 + ^1 <i3> +)
    (<i3> ^rtype single + ^args <a4> + ^negative false + ^parameter <p4> +
           ^result <r1> + ^attribute primitive + ^name object +
           ^type attribute +)
    (<p4> ^num 0 +)
    (<r1> ^set <s2> +)
    (<p5> ^num 0 +)
    (<r2> ^set <s3> +)
    (<p6> ^num 0 +)
    (<r3> ^set <s4> +)
    (<i4> ^rtype single + ^args <a5> + ^negative false + ^parameter <p7> +
           ^result <r4> + ^attribute input-arg + ^name object +)
    (<p7> ^num 1 + ^1 <i5> +)
    (<i5> ^param-id 1 + ^type single +)
    (<r4> ^set <s5> +)
    (<p8> ^num 1 + ^1 <i6> +)
    (<i6> ^param-id 1 + ^type single +)
    (<r5> ^set <s6> +)
}

sp {chunkx4*top-pair*apply*complete*OpNoChange*t1603-1
    :chunk
    (state <s1> ^list <l1> ^world <w1>
          ^{ <a1> << action goal predicate failure heuristic >> } <a2>)
    (<l1> ^game <g1>)
    (<w1> ^predicates <p1>)
    (<a2> ^condition <c1>)
    (<c1> ^rtype single ^negative true ^type state-pair ^args <a3>
          ^parameter <p2> ^result <r1> ^name <n2> ^attribute <a4>)
    (<a3> ^num 2 ^1 <i1> ^2 <i2>)
    (<i1> -^rtype set ^result <r2>)
    (<p2> ^num { <n1> < 2 })
    (<r1> ^set <s2>)
    (<r2> ^set <s3>)
    (<s3> ^instance <i3>)
    (<i3> ^1 <i4>)
    (<p1> ^predicate <p3>)
   -{ (<p3> ^instance <i5>)
      (<i5> ^1 <i4> ^2 <i6>)
      (<i2> ^result <r3>)
      (<r3> ^set <s4>)
      (<s4> ^instance <i7>)
      (<i7> ^1 <i6>)}
    (<p3> ^handle <n2>)
    -->
    (<s2> ^instance <i8> +)
    (<i8> ^1 <i4> +)
}

sp {chunkx4*with-attribute*apply*complete*instance*OpNoChange*t1597-1
    :chunk
    (state <s1> ^list <l1> ^world <w1>
          ^{ <a1> << action goal predicate failure heuristic >> } <a2>)
    (<l1> ^game <g1>)
    (<w1> ^objects <o1>)
    (<a2> ^condition <c1>)
    (<c1> ^rtype single ^name object ^type attribute ^attribute primitive
          ^args <a3> ^negative <n1> ^parameter <p1> ^result <r1>)
    (<a3> -^1 <i1>)
    (<r1> ^set <s2>)
    (<o1> ^object <o2>)
    (<o2> -^handle self)
    -->
    (<s2> ^instance <i2> +)
    (<i2> ^1 <o2> +)
}

sp {chunk*chunk-predicate-impasse*apply*complete*OpNoChange*t1217-1
    :chunk
    (state <s1> ^gtype <g1> ^<g1> <g2>)
    (<g2> ^condition <c1>)
    (<c1> ^name lazy ^type concept ^attribute predicate)
    -->
    (<s1> ^predicate <p1> + ^gtype predicate +)
    (<p1> ^link <c1> + ^potential-args <p2> + ^parameter-set <p3> +
           ^formated predicate + ^primary-rtype single + ^nlp-set <n1> +
           ^aname lazy + ^handle lazy +)
    (<p3> ^argnum 1 +)
    (<n1> ^conditions <c2> + ^aname lazy +)
    (<c2> ^rtype single + ^args <a1> + ^negative false + ^parameter <p5> +
           ^result <r2> + ^attribute color + ^name red1 + ^type attribute +)
    (<a1> ^num 1 + ^1 <i1> +)
    (<i1> ^rtype single + ^args <a2> + ^negative false + ^parameter <p4> +
           ^result <r1> + ^attribute input-arg + ^name object +)
    (<p4> ^num 1 + ^1 <i2> +)
    (<i2> ^param-id 1 + ^type single +)
    (<r1> ^set <s2> +)
    (<p5> ^num 1 + ^1 <i3> +)
    (<i3> ^param-id 1 + ^type single +)
    (<r2> ^set <s3> +)
}

sp {chunkx4*with-attribute*apply*complete*instance*OpNoChange*t1202-1
    :chunk
    (state <s1> ^list <l1>
          ^{ <a1> << action goal predicate failure heuristic >> } <a2>)
    (<l1> ^game <g1>)
    (<a2> ^condition <c1>)
    (<c1> ^rtype single ^type attribute ^args <a3> ^negative <n1>
          ^parameter <p1> ^result <r1> ^name <n3> ^attribute <a4>)
    (<p1> ^num { <n2> < 2 })
    (<a3> ^1 <i1>)
    (<r1> ^set <s2>)
    (<i1> ^result <r2>)
    (<r2> ^set <s3>)
    (<s3> ^instance <i2>)
    (<i2> ^1 <i3>)
    (<i3> ^predicates <p2>)
    (<p2> ^<a4> <n3>)
    -->
    (<s2> ^instance <i4> +)
    (<i4> ^1 <i3> +)
}



