sp {chunk-multi*chunk-puzzle-impasse*apply*complete*snc*t72937-2
    :chunk
    (state <s1> ^retrieve-game blocks-world395 -^opponent <o*1>)
    -->
    (<s1> ^retrieve-handle action-default398 +)
}

sp {chunk-multi*chunk-puzzle-impasse*apply*complete*snc*t72937-1
    :chunk
    (state <s1> ^retrieve-game blocks-world395 -^opponent <o*1>)
    -->
    (<s1> ^retrieve-handle goal-default402 +)
}

sp {chunk-multi*chunk-predicate-impasse*apply*complete*action*snc*t72928-1
    :chunk
    (state <s1> ^gtype action ^retrieve-handle action-default398)
    -->
    (<s1> ^action <p1> +)
    (<p1> ^potential-args <p2> + ^parameter-set <p3> + ^formated predicate +
           ^primary-rtype single + ^nlp-set <p9> + ^verb-structure <v2> +
           ^aname action-default398 + ^handle action-default398 +)
    (<p3> ^argnum 2 +)
    (<p9> ^conditions <c1> + ^conditions <c3> + ^aname action-default398 +)
    (<c1> ^type concept + ^name clear + ^attribute predicate + ^result <r1> +
           ^parameter <p6> + ^negative false + ^args <a2> + ^rtype single +)
    (<r1> ^set <p4> +)
    (<p6> ^1 <p5> + ^num 1 +)
    (<p5> ^type single + ^param-id 2 +)
    (<a2> ^1 <c2> + ^num 1 +)
    (<c2> ^type attribute + ^name object + ^attribute primitive +
           ^result <r2> + ^parameter <p8> + ^negative false + ^args <a1> +
           ^rtype single +)
    (<r2> ^set <p7> +)
    (<p8> ^num 0 +)
    (<c3> ^type concept + ^name clear + ^attribute predicate + ^result <r3> +
           ^parameter <p12> + ^negative false + ^args <a5> + ^rtype single +)
    (<r3> ^set <p10> +)
    (<p12> ^1 <p11> + ^num 1 +)
    (<p11> ^type single + ^param-id 1 +)
    (<a5> ^1 <c4> + ^num 1 +)
    (<c4> ^type attribute + ^name block + ^attribute category + ^result <r4> +
           ^parameter <p14> + ^negative false + ^args <a4> + ^rtype single +)
    (<r4> ^set <p13> +)
    (<p14> ^num 0 +)
    (<a4> ^1 <c5> + ^num 1 +)
    (<c5> ^type attribute + ^name object + ^attribute primitive +
           ^result <r5> + ^parameter <p15> + ^negative false + ^args <a3> +
           ^rtype single +)
    (<r5> ^set <r6> +)
    (<p15> ^num 0 +)
    (<v2> ^1 <v1> +)
    (<v1> ^1 1 + ^2 2 + ^verb-name move1 + ^verb-prep on1 +)
}

sp {chunk-multi*chunk-predicate-impasse*apply*complete*goal*snc*t72920-1
    :chunk
    (state <s1> ^gtype goal ^retrieve-handle goal-default402)
    -->
    (<s1> ^goal <p1> +)
    (<p1> ^potential-args <p2> + ^parameter-set <p3> + ^formated predicate +
           ^primary-rtype single + ^nlp-set <p12> + ^aname goal-default402 +
           ^handle goal-default402 +)
    (<p3> ^argnum 1 +)
    (<p12> ^conditions <n1> + ^conditions <n2> + ^aname goal-default402 +)
    (<n1> ^type state-pair + ^name below1 + ^attribute prepositions +
           ^result <r1> + ^parameter <p6> + ^negative false + ^args <a1> +
           ^rtype single +)
    (<r1> ^set <p4> +)
    (<p6> ^1 <p5> + ^num 1 +)
    (<p5> ^type single + ^param-id 1 +)
    (<a1> ^1 <c1> + ^2 <c2> + ^num 2 +)
    (<c2> ^type attribute + ^name orange1 + ^attribute color + ^result <r2> +
           ^parameter <p8> + ^negative false + ^args <a4> + ^rtype single +)
    (<r2> ^set <p7> +)
    (<p8> ^num 0 +)
    (<a4> ^1 <c3> + ^num 1 +)
    (<c3> ^type attribute + ^name block + ^attribute category + ^result <r3> +
           ^parameter <p10> + ^negative false + ^args <a3> + ^rtype single +)
    (<r3> ^set <p9> +)
    (<p10> ^num 0 +)
    (<a3> ^1 <c4> + ^num 1 +)
    (<c4> ^type attribute + ^name object + ^attribute primitive +
           ^result <r4> + ^parameter <p11> + ^negative false + ^args <a2> +
           ^rtype single +)
    (<r4> ^set <r5> +)
    (<p11> ^num 0 +)
    (<c1> ^type attribute + ^name red1 + ^attribute color + ^result <r7> +
           ^parameter <p17> + ^negative false + ^args <a7> + ^rtype single +)
    (<r7> ^set <p16> +)
    (<p17> ^num 0 +)
    (<a7> ^1 <c5> + ^num 1 +)
    (<c5> ^type attribute + ^name block + ^attribute category + ^result <r8> +
           ^parameter <p19> + ^negative false + ^args <a6> + ^rtype single +)
    (<r8> ^set <p18> +)
    (<p19> ^num 0 +)
    (<a6> ^1 <c6> + ^num 1 +)
    (<c6> ^type attribute + ^name object + ^attribute primitive +
           ^result <r9> + ^parameter <p20> + ^negative false + ^args <a5> +
           ^rtype single +)
    (<r9> ^set <r10> +)
    (<p20> ^num 0 +)
    (<n2> ^type state-pair + ^name on1 + ^attribute prepositions +
           ^result <r6> + ^parameter <p15> + ^negative false + ^args <a8> +
           ^rtype single +)
    (<r6> ^set <p13> +)
    (<p15> ^1 <p14> + ^num 1 +)
    (<p14> ^type single + ^param-id 1 +)
    (<a8> ^1 <c1> + ^2 <c7> + ^num 2 +)
    (<c7> ^type attribute + ^name green1 + ^attribute color + ^result <r11> +
           ^parameter <p22> + ^negative false + ^args <a11> + ^rtype single +)
    (<r11> ^set <p21> +)
    (<p22> ^num 0 +)
    (<a11> ^1 <c8> + ^num 1 +)
    (<c8> ^type attribute + ^name block + ^attribute category +
           ^result <r12> + ^parameter <p24> + ^negative false + ^args <a10> +
           ^rtype single +)
    (<r12> ^set <p23> +)
    (<p24> ^num 0 +)
    (<a10> ^1 <c9> + ^num 1 +)
    (<c9> ^type attribute + ^name object + ^attribute primitive +
           ^result <r13> + ^parameter <p25> + ^negative false + ^args <a9> +
           ^rtype single +)
    (<r13> ^set <r14> +)
    (<p25> ^num 0 +)
}

sp {chunk-multi*chunk-puzzle-impasse*apply*complete*snc*t71298-5
    :chunk
    (state <s1> ^retrieve-game frogs-and-toads367 -^opponent <o*1>)
    -->
    (<s1> ^retrieve-handle action-default372 +)
}

sp {chunk-multi*chunk-puzzle-impasse*apply*complete*snc*t71298-4
    :chunk
    (state <s1> ^retrieve-game frogs-and-toads367 -^opponent <o*1>)
    -->
    (<s1> ^retrieve-handle action-default377 +)
}

sp {chunk-multi*chunk-puzzle-impasse*apply*complete*snc*t71298-3
    :chunk
    (state <s1> ^retrieve-game frogs-and-toads367 -^opponent <o*1>)
    -->
    (<s1> ^retrieve-handle action-default383 +)
}

sp {chunk-multi*chunk-puzzle-impasse*apply*complete*snc*t71298-2
    :chunk
    (state <s1> ^retrieve-game frogs-and-toads367 -^opponent <o*1>)
    -->
    (<s1> ^retrieve-handle action-default389 +)
}

sp {chunk-multi*chunk-puzzle-impasse*apply*complete*snc*t71298-1
    :chunk
    (state <s1> ^retrieve-game frogs-and-toads367 -^opponent <o*1>)
    -->
    (<s1> ^retrieve-handle goal-default394 +)
}

sp {chunk-multi*chunk-predicate-impasse*apply*complete*action*snc*t71289-1
    :chunk
    (state <s1> ^gtype action ^retrieve-handle action-default377)
    -->
    (<s1> ^action <p1> +)
    (<p1> ^potential-args <p2> + ^parameter-set <p3> + ^formated predicate +
           ^primary-rtype single + ^nlp-set <p13> + ^verb-structure <v2> +
           ^aname action-default377 + ^handle action-default377 +)
    (<p3> ^argnum 3 +)
    (<p13> ^conditions <n1> + ^conditions <n2> + ^aname action-default377 +)
    (<n1> ^type state-pair + ^name left-of1 + ^attribute prepositions +
           ^result <r1> + ^parameter <p6> + ^negative false + ^args <a4> +
           ^rtype single +)
    (<r1> ^set <p4> +)
    (<p6> ^1 <p5> + ^2 <p7> + ^num 2 +)
    (<p5> ^type single + ^param-id 3 +)
    (<p7> ^type single + ^param-id 1 +)
    (<a4> ^1 <c1> + ^2 <c4> + ^num 2 +)
    (<c1> ^type concept + ^name clear + ^attribute predicate + ^result <r2> +
           ^parameter <p9> + ^negative false + ^args <a3> + ^rtype single +)
    (<r2> ^set <p8> +)
    (<p9> ^num 0 +)
    (<a3> ^1 <c2> + ^num 1 +)
    (<c2> ^type attribute + ^name location + ^attribute category +
           ^result <r3> + ^parameter <p11> + ^negative false + ^args <a2> +
           ^rtype single +)
    (<r3> ^set <p10> +)
    (<p11> ^num 0 +)
    (<a2> ^1 <c3> + ^num 1 +)
    (<c3> ^type attribute + ^name object + ^attribute primitive +
           ^result <r4> + ^parameter <p12> + ^negative false + ^args <a1> +
           ^rtype single +)
    (<r4> ^set <r5> +)
    (<p12> ^num 0 +)
    (<c4> ^type attribute + ^name location + ^attribute category +
           ^result <r11> + ^parameter <p24> + ^negative false + ^args <a10> +
           ^rtype single +)
    (<r11> ^set <p23> +)
    (<p24> ^num 0 +)
    (<a10> ^1 <c8> + ^num 1 +)
    (<c8> ^type attribute + ^name object + ^attribute primitive +
           ^result <r12> + ^parameter <p25> + ^negative false + ^args <a9> +
           ^rtype single +)
    (<r12> ^set <r13> +)
    (<p25> ^num 0 +)
    (<n2> ^type state-pair + ^name on1 + ^attribute prepositions +
           ^result <r6> + ^parameter <p16> + ^negative false + ^args <a8> +
           ^rtype single +)
    (<r6> ^set <p14> +)
    (<p16> ^1 <p15> + ^2 <p17> + ^num 2 +)
    (<p15> ^type single + ^param-id 2 +)
    (<p17> ^type single + ^param-id 1 +)
    (<a8> ^1 <c5> + ^2 <c4> + ^num 2 +)
    (<c5> ^type attribute + ^name red1 + ^attribute color + ^result <r7> +
           ^parameter <p19> + ^negative false + ^args <a7> + ^rtype single +)
    (<r7> ^set <p18> +)
    (<p19> ^num 0 +)
    (<a7> ^1 <c6> + ^num 1 +)
    (<c6> ^type attribute + ^name block + ^attribute category + ^result <r8> +
           ^parameter <p21> + ^negative false + ^args <a6> + ^rtype single +)
    (<r8> ^set <p20> +)
    (<p21> ^num 0 +)
    (<a6> ^1 <c7> + ^num 1 +)
    (<c7> ^type attribute + ^name object + ^attribute primitive +
           ^result <r9> + ^parameter <p22> + ^negative false + ^args <a5> +
           ^rtype single +)
    (<r9> ^set <r10> +)
    (<p22> ^num 0 +)
    (<v2> ^1 <v1> +)
    (<v1> ^1 2 + ^2 3 + ^verb-name move1 + ^verb-prep on1 +)
}

sp {chunk-multi*chunk-predicate-impasse*apply*complete*goal*snc*t71281-1
    :chunk
    (state <s1> ^gtype goal ^retrieve-handle goal-default394)
    -->
    (<s1> ^goal <p1> +)
    (<p1> ^potential-args <p2> + ^parameter-set <p3> + ^formated predicate +
           ^primary-rtype set + ^nlp-set <p18> + ^aname goal-default394 +
           ^handle goal-default394 +)
    (<p3> ^argnum 2 +)
    (<p18> ^conditions <n1> + ^conditions <n2> + ^aname goal-default394 +)
    (<n1> ^type state-pair + ^name on1 + ^attribute prepositions +
           ^result <r1> + ^parameter <p6> + ^negative false + ^args <a4> +
           ^rtype set +)
    (<r1> ^set <p4> +)
    (<p6> ^1 <p5> + ^num 1 +)
    (<p5> ^type set + ^param-id 2 +)
    (<a4> ^1 <c1> + ^2 <c4> + ^num 2 +)
    (<c1> ^type attribute + ^name blue1 + ^attribute color + ^result <r2> +
           ^parameter <p9> + ^negative false + ^args <a3> + ^rtype set +)
    (<r2> ^set <p7> +)
    (<p9> ^1 <p8> + ^num 1 +)
    (<p8> ^type set + ^param-id 2 +)
    (<a3> ^1 <c2> + ^num 1 +)
    (<c2> ^type attribute + ^name block + ^attribute category + ^result <r3> +
           ^parameter <p11> + ^negative false + ^args <a2> + ^rtype single +)
    (<r3> ^set <p10> +)
    (<p11> ^num 0 +)
    (<a2> ^1 <c3> + ^num 1 +)
    (<c3> ^type attribute + ^name object + ^attribute primitive +
           ^result <r4> + ^parameter <p12> + ^negative false + ^args <a1> +
           ^rtype single +)
    (<r4> ^set <r5> +)
    (<p12> ^num 0 +)
    (<c4> ^type attribute + ^name blue1 + ^attribute color + ^result <r6> +
           ^parameter <p14> + ^negative false + ^args <a7> + ^rtype set +)
    (<r6> ^set <p13> +)
    (<p14> ^num 0 +)
    (<a7> ^1 <c5> + ^num 1 +)
    (<c5> ^type attribute + ^name location + ^attribute category +
           ^result <r7> + ^parameter <p16> + ^negative false + ^args <a6> +
           ^rtype single +)
    (<r7> ^set <p15> +)
    (<p16> ^num 0 +)
    (<a6> ^1 <c6> + ^num 1 +)
    (<c6> ^type attribute + ^name object + ^attribute primitive +
           ^result <r8> + ^parameter <p17> + ^negative false + ^args <a5> +
           ^rtype single +)
    (<r8> ^set <r9> +)
    (<p17> ^num 0 +)
    (<n2> ^type state-pair + ^name on1 + ^attribute prepositions +
           ^result <r10> + ^parameter <p21> + ^negative false + ^args <a11> +
           ^rtype set +)
    (<r10> ^set <p19> +)
    (<p21> ^1 <p20> + ^num 1 +)
    (<p20> ^type set + ^param-id 1 +)
    (<a11> ^1 <c7> + ^2 <c10> + ^num 2 +)
    (<c7> ^type attribute + ^name red1 + ^attribute color + ^result <r11> +
           ^parameter <p24> + ^negative false + ^args <a10> + ^rtype set +)
    (<r11> ^set <p22> +)
    (<p24> ^1 <p23> + ^num 1 +)
    (<p23> ^type set + ^param-id 1 +)
    (<a10> ^1 <c8> + ^num 1 +)
    (<c8> ^type attribute + ^name block + ^attribute category +
           ^result <r12> + ^parameter <p26> + ^negative false + ^args <a9> +
           ^rtype single +)
    (<r12> ^set <p25> +)
    (<p26> ^num 0 +)
    (<a9> ^1 <c9> + ^num 1 +)
    (<c9> ^type attribute + ^name object + ^attribute primitive +
           ^result <r13> + ^parameter <p27> + ^negative false + ^args <a8> +
           ^rtype single +)
    (<r13> ^set <r14> +)
    (<p27> ^num 0 +)
    (<c10> ^type attribute + ^name red1 + ^attribute color + ^result <r15> +
           ^parameter <p29> + ^negative false + ^args <a14> + ^rtype set +)
    (<r15> ^set <p28> +)
    (<p29> ^num 0 +)
    (<a14> ^1 <c11> + ^num 1 +)
    (<c11> ^type attribute + ^name location + ^attribute category +
           ^result <r16> + ^parameter <p31> + ^negative false + ^args <a13> +
           ^rtype single +)
    (<r16> ^set <p30> +)
    (<p31> ^num 0 +)
    (<a13> ^1 <c12> + ^num 1 +)
    (<c12> ^type attribute + ^name object + ^attribute primitive +
           ^result <r17> + ^parameter <p32> + ^negative false + ^args <a12> +
           ^rtype single +)
    (<r17> ^set <r18> +)
    (<p32> ^num 0 +)
}

sp {chunk-multi*chunk-predicate-impasse*apply*complete*action*snc*t71273-1
    :chunk
    (state <s1> ^gtype action ^retrieve-handle action-default389)
    -->
    (<s1> ^action <p1> +)
    (<p1> ^potential-args <p2> + ^parameter-set <p3> + ^formated predicate +
           ^primary-rtype single + ^nlp-set <p13> + ^verb-structure <v2> +
           ^aname action-default389 + ^handle action-default389 +)
    (<p3> ^argnum 5 +)
    (<p13> ^conditions <n1> + ^conditions <n2> + ^conditions <n3> +
           ^conditions <n4> + ^aname action-default389 +)
    (<n1> ^type state-pair + ^name below1 + ^attribute prepositions +
           ^result <r1> + ^parameter <p6> + ^negative false + ^args <a1> +
           ^rtype single +)
    (<r1> ^set <p4> +)
    (<p6> ^1 <p5> + ^2 <p7> + ^num 2 +)
    (<p5> ^type single + ^param-id 4 +)
    (<p7> ^type single + ^param-id 3 +)
    (<a1> ^1 <c1> + ^2 <c2> + ^num 2 +)
    (<c2> ^type attribute + ^name red1 + ^attribute color + ^result <r2> +
           ^parameter <p9> + ^negative false + ^args <a4> + ^rtype single +)
    (<r2> ^set <p8> +)
    (<p9> ^num 0 +)
    (<a4> ^1 <c3> + ^num 1 +)
    (<c3> ^type attribute + ^name block + ^attribute category + ^result <r3> +
           ^parameter <p11> + ^negative false + ^args <a3> + ^rtype single +)
    (<r3> ^set <p10> +)
    (<p11> ^num 0 +)
    (<a3> ^1 <c4> + ^num 1 +)
    (<c4> ^type attribute + ^name object + ^attribute primitive +
           ^result <r4> + ^parameter <p12> + ^negative false + ^args <a2> +
           ^rtype single +)
    (<r4> ^set <r5> +)
    (<p12> ^num 0 +)
    (<n2> ^type state-pair + ^name below1 + ^attribute prepositions +
           ^result <r6> + ^parameter <p16> + ^negative false + ^args <a5> +
           ^rtype single +)
    (<r6> ^set <p14> +)
    (<p16> ^1 <p15> + ^2 <p17> + ^num 2 +)
    (<p15> ^type single + ^param-id 2 +)
    (<p17> ^type single + ^param-id 1 +)
    (<a5> ^1 <c5> + ^2 <c6> + ^num 2 +)
    (<c6> ^type attribute + ^name blue1 + ^attribute color + ^result <r7> +
           ^parameter <p19> + ^negative false + ^args <a8> + ^rtype single +)
    (<r7> ^set <p18> +)
    (<p19> ^num 0 +)
    (<a8> ^1 <c7> + ^num 1 +)
    (<c7> ^type attribute + ^name block + ^attribute category + ^result <r8> +
           ^parameter <p21> + ^negative false + ^args <a7> + ^rtype single +)
    (<r8> ^set <p20> +)
    (<p21> ^num 0 +)
    (<a7> ^1 <c8> + ^num 1 +)
    (<c8> ^type attribute + ^name object + ^attribute primitive +
           ^result <r9> + ^parameter <p22> + ^negative false + ^args <a6> +
           ^rtype single +)
    (<r9> ^set <r10> +)
    (<p22> ^num 0 +)
    (<c5> ^type attribute + ^name location + ^attribute category +
           ^result <r12> + ^parameter <p28> + ^negative false + ^args <a10> +
           ^rtype single +)
    (<r12> ^set <p27> +)
    (<p28> ^num 0 +)
    (<a10> ^1 <c9> + ^num 1 +)
    (<c9> ^type attribute + ^name object + ^attribute primitive +
           ^result <r13> + ^parameter <p29> + ^negative false + ^args <a9> +
           ^rtype single +)
    (<r13> ^set <r14> +)
    (<p29> ^num 0 +)
    (<n3> ^type state-pair + ^name left-of1 + ^attribute prepositions +
           ^result <r11> + ^parameter <p25> + ^negative false + ^args <a11> +
           ^rtype single +)
    (<r11> ^set <p23> +)
    (<p25> ^1 <p24> + ^2 <p26> + ^num 2 +)
    (<p24> ^type single + ^param-id 2 +)
    (<p26> ^type single + ^param-id 4 +)
    (<a11> ^1 <c5> + ^2 <c1> + ^num 2 +)
    (<c1> ^type attribute + ^name location + ^attribute category +
           ^result <r16> + ^parameter <p35> + ^negative false + ^args <a13> +
           ^rtype single +)
    (<r16> ^set <p34> +)
    (<p35> ^num 0 +)
    (<a13> ^1 <c10> + ^num 1 +)
    (<c10> ^type attribute + ^name object + ^attribute primitive +
           ^result <r17> + ^parameter <p36> + ^negative false + ^args <a12> +
           ^rtype single +)
    (<r17> ^set <r18> +)
    (<p36> ^num 0 +)
    (<n4> ^type state-pair + ^name left-of1 + ^attribute prepositions +
           ^result <r15> + ^parameter <p32> + ^negative false + ^args <a14> +
           ^rtype single +)
    (<r15> ^set <p30> +)
    (<p32> ^1 <p31> + ^2 <p33> + ^num 2 +)
    (<p31> ^type single + ^param-id 4 +)
    (<p33> ^type single + ^param-id 5 +)
    (<a14> ^1 <c1> + ^2 <c11> + ^num 2 +)
    (<c11> ^type concept + ^name clear + ^attribute predicate +
           ^result <r19> + ^parameter <p38> + ^negative false + ^args <a17> +
           ^rtype single +)
    (<r19> ^set <p37> +)
    (<p38> ^num 0 +)
    (<a17> ^1 <c12> + ^num 1 +)
    (<c12> ^type attribute + ^name location + ^attribute category +
           ^result <r20> + ^parameter <p40> + ^negative false + ^args <a16> +
           ^rtype single +)
    (<r20> ^set <p39> +)
    (<p40> ^num 0 +)
    (<a16> ^1 <c13> + ^num 1 +)
    (<c13> ^type attribute + ^name object + ^attribute primitive +
           ^result <r21> + ^parameter <p41> + ^negative false + ^args <a15> +
           ^rtype single +)
    (<r21> ^set <r22> +)
    (<p41> ^num 0 +)
    (<v2> ^1 <v1> +)
    (<v1> ^1 1 + ^2 5 + ^verb-name move1 + ^verb-prep on1 +)
}

sp {chunk-multi*chunk-predicate-impasse*apply*complete*action*snc*t71265-1
    :chunk
    (state <s1> ^gtype action ^retrieve-handle action-default383)
    -->
    (<s1> ^action <p1> +)
    (<p1> ^potential-args <p2> + ^parameter-set <p3> + ^formated predicate +
           ^primary-rtype single + ^nlp-set <p13> + ^verb-structure <v2> +
           ^aname action-default383 + ^handle action-default383 +)
    (<p3> ^argnum 5 +)
    (<p13> ^conditions <n1> + ^conditions <n2> + ^conditions <n3> +
           ^conditions <n4> + ^aname action-default383 +)
    (<n1> ^type state-pair + ^name below1 + ^attribute prepositions +
           ^result <r1> + ^parameter <p6> + ^negative false + ^args <a1> +
           ^rtype single +)
    (<r1> ^set <p4> +)
    (<p6> ^1 <p5> + ^2 <p7> + ^num 2 +)
    (<p5> ^type single + ^param-id 2 +)
    (<p7> ^type single + ^param-id 1 +)
    (<a1> ^1 <c1> + ^2 <c2> + ^num 2 +)
    (<c2> ^type attribute + ^name red1 + ^attribute color + ^result <r2> +
           ^parameter <p9> + ^negative false + ^args <a4> + ^rtype single +)
    (<r2> ^set <p8> +)
    (<p9> ^num 0 +)
    (<a4> ^1 <c3> + ^num 1 +)
    (<c3> ^type attribute + ^name block + ^attribute category + ^result <r3> +
           ^parameter <p11> + ^negative false + ^args <a3> + ^rtype single +)
    (<r3> ^set <p10> +)
    (<p11> ^num 0 +)
    (<a3> ^1 <c4> + ^num 1 +)
    (<c4> ^type attribute + ^name object + ^attribute primitive +
           ^result <r4> + ^parameter <p12> + ^negative false + ^args <a2> +
           ^rtype single +)
    (<r4> ^set <r5> +)
    (<p12> ^num 0 +)
    (<n2> ^type state-pair + ^name below1 + ^attribute prepositions +
           ^result <r6> + ^parameter <p16> + ^negative false + ^args <a5> +
           ^rtype single +)
    (<r6> ^set <p14> +)
    (<p16> ^1 <p15> + ^2 <p17> + ^num 2 +)
    (<p15> ^type single + ^param-id 4 +)
    (<p17> ^type single + ^param-id 3 +)
    (<a5> ^1 <c5> + ^2 <c6> + ^num 2 +)
    (<c6> ^type attribute + ^name blue1 + ^attribute color + ^result <r7> +
           ^parameter <p19> + ^negative false + ^args <a8> + ^rtype single +)
    (<r7> ^set <p18> +)
    (<p19> ^num 0 +)
    (<a8> ^1 <c7> + ^num 1 +)
    (<c7> ^type attribute + ^name block + ^attribute category + ^result <r8> +
           ^parameter <p21> + ^negative false + ^args <a7> + ^rtype single +)
    (<r8> ^set <p20> +)
    (<p21> ^num 0 +)
    (<a7> ^1 <c8> + ^num 1 +)
    (<c8> ^type attribute + ^name object + ^attribute primitive +
           ^result <r9> + ^parameter <p22> + ^negative false + ^args <a6> +
           ^rtype single +)
    (<r9> ^set <r10> +)
    (<p22> ^num 0 +)
    (<c1> ^type attribute + ^name location + ^attribute category +
           ^result <r12> + ^parameter <p28> + ^negative false + ^args <a10> +
           ^rtype single +)
    (<r12> ^set <p27> +)
    (<p28> ^num 0 +)
    (<a10> ^1 <c9> + ^num 1 +)
    (<c9> ^type attribute + ^name object + ^attribute primitive +
           ^result <r13> + ^parameter <p29> + ^negative false + ^args <a9> +
           ^rtype single +)
    (<r13> ^set <r14> +)
    (<p29> ^num 0 +)
    (<n3> ^type state-pair + ^name right-of1 + ^attribute prepositions +
           ^result <r11> + ^parameter <p25> + ^negative false + ^args <a11> +
           ^rtype single +)
    (<r11> ^set <p23> +)
    (<p25> ^1 <p24> + ^2 <p26> + ^num 2 +)
    (<p24> ^type single + ^param-id 2 +)
    (<p26> ^type single + ^param-id 4 +)
    (<a11> ^1 <c1> + ^2 <c5> + ^num 2 +)
    (<c5> ^type attribute + ^name location + ^attribute category +
           ^result <r16> + ^parameter <p35> + ^negative false + ^args <a13> +
           ^rtype single +)
    (<r16> ^set <p34> +)
    (<p35> ^num 0 +)
    (<a13> ^1 <c10> + ^num 1 +)
    (<c10> ^type attribute + ^name object + ^attribute primitive +
           ^result <r17> + ^parameter <p36> + ^negative false + ^args <a12> +
           ^rtype single +)
    (<r17> ^set <r18> +)
    (<p36> ^num 0 +)
    (<n4> ^type state-pair + ^name right-of1 + ^attribute prepositions +
           ^result <r15> + ^parameter <p32> + ^negative false + ^args <a14> +
           ^rtype single +)
    (<r15> ^set <p30> +)
    (<p32> ^1 <p31> + ^2 <p33> + ^num 2 +)
    (<p31> ^type single + ^param-id 4 +)
    (<p33> ^type single + ^param-id 5 +)
    (<a14> ^1 <c5> + ^2 <c11> + ^num 2 +)
    (<c11> ^type concept + ^name clear + ^attribute predicate +
           ^result <r19> + ^parameter <p38> + ^negative false + ^args <a17> +
           ^rtype single +)
    (<r19> ^set <p37> +)
    (<p38> ^num 0 +)
    (<a17> ^1 <c12> + ^num 1 +)
    (<c12> ^type attribute + ^name location + ^attribute category +
           ^result <r20> + ^parameter <p40> + ^negative false + ^args <a16> +
           ^rtype single +)
    (<r20> ^set <p39> +)
    (<p40> ^num 0 +)
    (<a16> ^1 <c13> + ^num 1 +)
    (<c13> ^type attribute + ^name object + ^attribute primitive +
           ^result <r21> + ^parameter <p41> + ^negative false + ^args <a15> +
           ^rtype single +)
    (<r21> ^set <r22> +)
    (<p41> ^num 0 +)
    (<v2> ^1 <v1> +)
    (<v1> ^1 1 + ^2 5 + ^verb-name move1 + ^verb-prep on1 +)
}

sp {chunk-multi*chunk-predicate-impasse*apply*complete*action*snc*t71257-1
    :chunk
    (state <s1> ^gtype action ^retrieve-handle action-default372)
    -->
    (<s1> ^action <p1> +)
    (<p1> ^potential-args <p2> + ^parameter-set <p3> + ^formated predicate +
           ^primary-rtype single + ^nlp-set <p13> + ^verb-structure <v2> +
           ^aname action-default372 + ^handle action-default372 +)
    (<p3> ^argnum 3 +)
    (<p13> ^conditions <n1> + ^conditions <n2> + ^aname action-default372 +)
    (<n1> ^type state-pair + ^name on1 + ^attribute prepositions +
           ^result <r1> + ^parameter <p6> + ^negative false + ^args <a4> +
           ^rtype single +)
    (<r1> ^set <p4> +)
    (<p6> ^1 <p5> + ^2 <p7> + ^num 2 +)
    (<p5> ^type single + ^param-id 2 +)
    (<p7> ^type single + ^param-id 1 +)
    (<a4> ^1 <c1> + ^2 <c4> + ^num 2 +)
    (<c1> ^type attribute + ^name blue1 + ^attribute color + ^result <r2> +
           ^parameter <p9> + ^negative false + ^args <a3> + ^rtype single +)
    (<r2> ^set <p8> +)
    (<p9> ^num 0 +)
    (<a3> ^1 <c2> + ^num 1 +)
    (<c2> ^type attribute + ^name block + ^attribute category + ^result <r3> +
           ^parameter <p11> + ^negative false + ^args <a2> + ^rtype single +)
    (<r3> ^set <p10> +)
    (<p11> ^num 0 +)
    (<a2> ^1 <c3> + ^num 1 +)
    (<c3> ^type attribute + ^name object + ^attribute primitive +
           ^result <r4> + ^parameter <p12> + ^negative false + ^args <a1> +
           ^rtype single +)
    (<r4> ^set <r5> +)
    (<p12> ^num 0 +)
    (<c4> ^type attribute + ^name location + ^attribute category +
           ^result <r11> + ^parameter <p24> + ^negative false + ^args <a10> +
           ^rtype single +)
    (<r11> ^set <p23> +)
    (<p24> ^num 0 +)
    (<a10> ^1 <c8> + ^num 1 +)
    (<c8> ^type attribute + ^name object + ^attribute primitive +
           ^result <r12> + ^parameter <p25> + ^negative false + ^args <a9> +
           ^rtype single +)
    (<r12> ^set <r13> +)
    (<p25> ^num 0 +)
    (<n2> ^type state-pair + ^name right-of1 + ^attribute prepositions +
           ^result <r6> + ^parameter <p16> + ^negative false + ^args <a8> +
           ^rtype single +)
    (<r6> ^set <p14> +)
    (<p16> ^1 <p15> + ^2 <p17> + ^num 2 +)
    (<p15> ^type single + ^param-id 3 +)
    (<p17> ^type single + ^param-id 1 +)
    (<a8> ^1 <c5> + ^2 <c4> + ^num 2 +)
    (<c5> ^type concept + ^name clear + ^attribute predicate + ^result <r7> +
           ^parameter <p19> + ^negative false + ^args <a7> + ^rtype single +)
    (<r7> ^set <p18> +)
    (<p19> ^num 0 +)
    (<a7> ^1 <c6> + ^num 1 +)
    (<c6> ^type attribute + ^name location + ^attribute category +
           ^result <r8> + ^parameter <p21> + ^negative false + ^args <a6> +
           ^rtype single +)
    (<r8> ^set <p20> +)
    (<p21> ^num 0 +)
    (<a6> ^1 <c7> + ^num 1 +)
    (<c7> ^type attribute + ^name object + ^attribute primitive +
           ^result <r9> + ^parameter <p22> + ^negative false + ^args <a5> +
           ^rtype single +)
    (<r9> ^set <r10> +)
    (<p22> ^num 0 +)
    (<v2> ^1 <v1> +)
    (<v1> ^1 2 + ^2 3 + ^verb-name move1 + ^verb-prep on1 +)
}

sp {chunk-multi*chunk-puzzle-impasse*apply*complete*snc*t66922-3
    :chunk
    (state <s1> ^retrieve-game othello347 -^opponent <o*1>)
    -->
    (<s1> ^retrieve-handle capture-blocks348 +)
}

sp {chunk-multi*chunk-puzzle-impasse*apply*complete*snc*t66922-2
    :chunk
    (state <s1> ^retrieve-game othello347 -^opponent <o*1>)
    -->
    (<s1> ^retrieve-handle goal-default362 +)
}

sp {chunk-multi*chunk-puzzle-impasse*apply*complete*snc*t66922-1
    :chunk
    (state <s1> ^retrieve-game othello347 -^opponent <o*1>)
    -->
    (<s1> ^retrieve-handle failure-default366 +)
}

sp {chunk-multi*chunk-predicate-impasse*apply*complete*failure*snc*t66913-1
    :chunk
    (state <s1> ^gtype failure ^retrieve-handle failure-default366)
    -->
    (<s1> ^failure <p1> +)
    (<p1> ^potential-args <p2> + ^parameter-set <p3> + ^formated predicate +
           ^primary-rtype set + ^nlp-set <p11> + ^aname failure-default366 +
           ^handle failure-default366 +)
    (<p3> ^argnum 5 +)
    (<p11> ^conditions <n1> + ^conditions <n2> + ^conditions <n3> +
           ^conditions <n4> + ^aname failure-default366 +)
    (<n1> ^type concept + ^name covered + ^attribute predicate +
           ^result <r1> + ^parameter <p6> + ^negative false + ^args <a3> +
           ^rtype set +)
    (<r1> ^set <p4> +)
    (<p6> ^1 <p5> + ^num 1 +)
    (<p5> ^type set + ^param-id 1 +)
    (<a3> ^1 <c1> + ^num 1 +)
    (<c1> ^type attribute + ^name location + ^attribute category +
           ^result <r2> + ^parameter <p9> + ^negative false + ^args <a2> +
           ^rtype set +)
    (<r2> ^set <p7> +)
    (<p9> ^1 <p8> + ^num 1 +)
    (<p8> ^type set + ^param-id 1 +)
    (<a2> ^1 <c2> + ^num 1 +)
    (<c2> ^type attribute + ^name object + ^attribute primitive +
           ^result <r3> + ^parameter <p10> + ^negative false + ^args <a1> +
           ^rtype single +)
    (<r3> ^set <r4> +)
    (<p10> ^num 0 +)
    (<n2> ^type function + ^name count + ^result <r6> + ^parameter <p18> +
           ^negative false + ^args <a7> + ^rtype single +
           ^return-type number + ^function soar-count +)
    (<r6> ^set <p16> +)
    (<p18> ^1 <p17> + ^2 <p19> + ^num 2 +)
    (<p17> ^type single + ^param-id 4 +)
    (<p19> ^type set + ^param-id 2 +)
    (<a7> ^2 <c3> + ^num 1 +)
    (<c3> ^type concept + ^name occupied + ^attribute predicate +
           ^result <r7> + ^parameter <p21> + ^negative false + ^args <a6> +
           ^rtype set +)
    (<r7> ^set <p20> +)
    (<p21> ^num 0 +)
    (<a6> ^1 <c4> + ^num 1 +)
    (<c4> ^type attribute + ^name location + ^attribute category +
           ^result <r8> + ^parameter <p23> + ^negative false + ^args <a5> +
           ^rtype single +)
    (<r8> ^set <p22> +)
    (<p23> ^num 0 +)
    (<a5> ^1 <c5> + ^num 1 +)
    (<c5> ^type attribute + ^name object + ^attribute primitive +
           ^result <r9> + ^parameter <p24> + ^negative false + ^args <a4> +
           ^rtype single +)
    (<r9> ^set <r10> +)
    (<p24> ^num 0 +)
    (<n3> ^type function + ^name count + ^result <r11> + ^parameter <p27> +
           ^negative false + ^args <a12> + ^rtype single +
           ^return-type number + ^function soar-count +)
    (<r11> ^set <p25> +)
    (<p27> ^1 <p26> + ^2 <p28> + ^num 2 +)
    (<p26> ^type single + ^param-id 5 +)
    (<p28> ^type set + ^param-id 3 +)
    (<a12> ^2 <c6> + ^num 1 +)
    (<c6> ^type concept + ^name captured + ^attribute predicate +
           ^result <r12> + ^parameter <p30> + ^negative false + ^args <a11> +
           ^rtype set +)
    (<r12> ^set <p29> +)
    (<p30> ^num 0 +)
    (<a11> ^1 <c7> + ^num 1 +)
    (<c7> ^type attribute + ^name location + ^attribute category +
           ^result <r13> + ^parameter <p32> + ^negative false + ^args <a10> +
           ^rtype single +)
    (<r13> ^set <p31> +)
    (<p32> ^num 0 +)
    (<a10> ^1 <c8> + ^num 1 +)
    (<c8> ^type attribute + ^name object + ^attribute primitive +
           ^result <r14> + ^parameter <p33> + ^negative false + ^args <a9> +
           ^rtype single +)
    (<r14> ^set <r15> +)
    (<p33> ^num 0 +)
    (<n4> ^type function + ^name greater + ^result <r5> + ^parameter <p14> +
           ^negative false + ^args <a8> + ^rtype single +
           ^return-type number + ^function soar-greater +)
    (<r5> ^set <p12> +)
    (<p14> ^1 <p13> + ^2 <p15> + ^num 2 +)
    (<p13> ^type single + ^param-id 4 +)
    (<p15> ^type single + ^param-id 5 +)
    (<a8> ^1 <n2> + ^2 <n3> + ^num 2 +)
}

sp {chunk-multi*chunk-predicate-impasse*apply*complete*goal*snc*t66905-1
    :chunk
    (state <s1> ^gtype goal ^retrieve-handle goal-default362)
    -->
    (<s1> ^goal <p1> +)
    (<p1> ^potential-args <p2> + ^parameter-set <p3> + ^formated predicate +
           ^primary-rtype set + ^nlp-set <p11> + ^aname goal-default362 +
           ^handle goal-default362 +)
    (<p3> ^argnum 5 +)
    (<p11> ^conditions <n1> + ^conditions <n2> + ^conditions <n3> +
           ^conditions <n4> + ^aname goal-default362 +)
    (<n1> ^type concept + ^name covered + ^attribute predicate +
           ^result <r1> + ^parameter <p6> + ^negative false + ^args <a3> +
           ^rtype set +)
    (<r1> ^set <p4> +)
    (<p6> ^1 <p5> + ^num 1 +)
    (<p5> ^type set + ^param-id 1 +)
    (<a3> ^1 <c1> + ^num 1 +)
    (<c1> ^type attribute + ^name location + ^attribute category +
           ^result <r2> + ^parameter <p9> + ^negative false + ^args <a2> +
           ^rtype set +)
    (<r2> ^set <p7> +)
    (<p9> ^1 <p8> + ^num 1 +)
    (<p8> ^type set + ^param-id 1 +)
    (<a2> ^1 <c2> + ^num 1 +)
    (<c2> ^type attribute + ^name object + ^attribute primitive +
           ^result <r3> + ^parameter <p10> + ^negative false + ^args <a1> +
           ^rtype single +)
    (<r3> ^set <r4> +)
    (<p10> ^num 0 +)
    (<n2> ^type function + ^name count + ^result <r6> + ^parameter <p18> +
           ^negative false + ^args <a7> + ^rtype single +
           ^return-type number + ^function soar-count +)
    (<r6> ^set <p16> +)
    (<p18> ^1 <p17> + ^2 <p19> + ^num 2 +)
    (<p17> ^type single + ^param-id 4 +)
    (<p19> ^type set + ^param-id 2 +)
    (<a7> ^2 <c3> + ^num 1 +)
    (<c3> ^type concept + ^name captured + ^attribute predicate +
           ^result <r7> + ^parameter <p21> + ^negative false + ^args <a6> +
           ^rtype set +)
    (<r7> ^set <p20> +)
    (<p21> ^num 0 +)
    (<a6> ^1 <c4> + ^num 1 +)
    (<c4> ^type attribute + ^name location + ^attribute category +
           ^result <r8> + ^parameter <p23> + ^negative false + ^args <a5> +
           ^rtype single +)
    (<r8> ^set <p22> +)
    (<p23> ^num 0 +)
    (<a5> ^1 <c5> + ^num 1 +)
    (<c5> ^type attribute + ^name object + ^attribute primitive +
           ^result <r9> + ^parameter <p24> + ^negative false + ^args <a4> +
           ^rtype single +)
    (<r9> ^set <r10> +)
    (<p24> ^num 0 +)
    (<n3> ^type function + ^name count + ^result <r11> + ^parameter <p27> +
           ^negative false + ^args <a12> + ^rtype single +
           ^return-type number + ^function soar-count +)
    (<r11> ^set <p25> +)
    (<p27> ^1 <p26> + ^2 <p28> + ^num 2 +)
    (<p26> ^type single + ^param-id 5 +)
    (<p28> ^type set + ^param-id 3 +)
    (<a12> ^2 <c6> + ^num 1 +)
    (<c6> ^type concept + ^name occupied + ^attribute predicate +
           ^result <r12> + ^parameter <p30> + ^negative false + ^args <a11> +
           ^rtype set +)
    (<r12> ^set <p29> +)
    (<p30> ^num 0 +)
    (<a11> ^1 <c7> + ^num 1 +)
    (<c7> ^type attribute + ^name location + ^attribute category +
           ^result <r13> + ^parameter <p32> + ^negative false + ^args <a10> +
           ^rtype single +)
    (<r13> ^set <p31> +)
    (<p32> ^num 0 +)
    (<a10> ^1 <c8> + ^num 1 +)
    (<c8> ^type attribute + ^name object + ^attribute primitive +
           ^result <r14> + ^parameter <p33> + ^negative false + ^args <a9> +
           ^rtype single +)
    (<r14> ^set <r15> +)
    (<p33> ^num 0 +)
    (<n4> ^type function + ^name greater + ^result <r5> + ^parameter <p14> +
           ^negative false + ^args <a8> + ^rtype single +
           ^return-type number + ^function soar-greater +)
    (<r5> ^set <p12> +)
    (<p14> ^1 <p13> + ^2 <p15> + ^num 2 +)
    (<p13> ^type single + ^param-id 4 +)
    (<p15> ^type single + ^param-id 5 +)
    (<a8> ^1 <n2> + ^2 <n3> + ^num 2 +)
}

sp {chunk-multi*chunk-predicate-impasse*apply*complete*action*snc*t66897-1
    :chunk
    (state <s1> ^gtype action ^retrieve-handle capture-blocks348)
    -->
    (<s1> ^action <p1> +)
    (<p1> ^potential-args <p2> + ^parameter-set <p3> + ^formated predicate +
           ^primary-rtype single + ^nlp-set <p4> + ^verb-structure <v2> +
           ^aname capture-blocks348 + ^handle capture-blocks348 +)
    (<p3> ^argnum 4 +)
    (<p4> ^conditions <n1> + ^conditions <n2> + ^conditions <c9> +
           ^aname capture-blocks348 +)
    (<n1> ^type function + ^name between + ^result <r2> + ^parameter <p10> +
           ^negative false + ^args <a3> + ^rtype set +
           ^function board-between +)
    (<r2> ^set <p8> +)
    (<p10> ^1 <p9> + ^2 <p11> + ^3 <p12> + ^num 3 +)
    (<p9> ^type set + ^param-id 3 +)
    (<p11> ^type single + ^param-id 1 +)
    (<p12> ^type single + ^param-id 2 +)
    (<a3> ^1 <c1> + ^2 <c3> + ^3 <c6> + ^num 3 +)
    (<c1> ^type attribute + ^name location + ^attribute category +
           ^result <r3> + ^parameter <p14> + ^negative false + ^args <a2> +
           ^rtype set +)
    (<r3> ^set <p13> +)
    (<p14> ^num 0 +)
    (<a2> ^1 <c2> + ^num 1 +)
    (<c2> ^type attribute + ^name object + ^attribute primitive +
           ^result <r4> + ^parameter <p15> + ^negative false + ^args <a1> +
           ^rtype single +)
    (<r4> ^set <r5> +)
    (<p15> ^num 0 +)
    (<c3> ^type concept + ^name clear + ^attribute predicate + ^result <r6> +
           ^parameter <p17> + ^negative false + ^args <a6> + ^rtype single +)
    (<r6> ^set <p16> +)
    (<p17> ^num 0 +)
    (<a6> ^1 <c4> + ^num 1 +)
    (<c4> ^type attribute + ^name location + ^attribute category +
           ^result <r7> + ^parameter <p19> + ^negative false + ^args <a5> +
           ^rtype single +)
    (<r7> ^set <p18> +)
    (<p19> ^num 0 +)
    (<a5> ^1 <c5> + ^num 1 +)
    (<c5> ^type attribute + ^name object + ^attribute primitive +
           ^result <r8> + ^parameter <p20> + ^negative false + ^args <a4> +
           ^rtype single +)
    (<r8> ^set <r9> +)
    (<p20> ^num 0 +)
    (<c6> ^type concept + ^name captured + ^attribute predicate +
           ^result <r10> + ^parameter <p22> + ^negative false + ^args <a9> +
           ^rtype single +)
    (<r10> ^set <p21> +)
    (<p22> ^num 0 +)
    (<a9> ^1 <c7> + ^num 1 +)
    (<c7> ^type attribute + ^name location + ^attribute category +
           ^result <r11> + ^parameter <p24> + ^negative false + ^args <a8> +
           ^rtype single +)
    (<r11> ^set <p23> +)
    (<p24> ^num 0 +)
    (<a8> ^1 <c8> + ^num 1 +)
    (<c8> ^type attribute + ^name object + ^attribute primitive +
           ^result <r12> + ^parameter <p25> + ^negative false + ^args <a7> +
           ^rtype single +)
    (<r12> ^set <r13> +)
    (<p25> ^num 0 +)
    (<n2> ^type concept + ^name occupied + ^attribute predicate +
           ^result <r1> + ^parameter <p7> + ^negative false + ^args <a10> +
           ^rtype set +)
    (<r1> ^set <p5> +)
    (<p7> ^1 <p6> + ^num 1 +)
    (<p6> ^type set + ^param-id 3 +)
    (<a10> ^1 <n1> + ^num 1 +)
    (<c9> ^type concept + ^name free + ^attribute predicate + ^result <r14> +
           ^parameter <p28> + ^negative false + ^args <a14> + ^rtype single +)
    (<r14> ^set <p26> +)
    (<p28> ^1 <p27> + ^num 1 +)
    (<p27> ^type single + ^param-id 4 +)
    (<a14> ^1 <c10> + ^num 1 +)
    (<c10> ^type attribute + ^name red1 + ^attribute color + ^result <r15> +
           ^parameter <p30> + ^negative false + ^args <a13> + ^rtype single +)
    (<r15> ^set <p29> +)
    (<p30> ^num 0 +)
    (<a13> ^1 <c11> + ^num 1 +)
    (<c11> ^type attribute + ^name block + ^attribute category +
           ^result <r16> + ^parameter <p32> + ^negative false + ^args <a12> +
           ^rtype single +)
    (<r16> ^set <p31> +)
    (<p32> ^num 0 +)
    (<a12> ^1 <c12> + ^num 1 +)
    (<c12> ^type attribute + ^name object + ^attribute primitive +
           ^result <r17> + ^parameter <p33> + ^negative false + ^args <a11> +
           ^rtype single +)
    (<r17> ^set <r18> +)
    (<p33> ^num 0 +)
    (<v2> ^1 <v1> +)
    (<v1> ^1 4 + ^2 1 + ^verb-name move1 + ^verb-prep on1 +)
}

sp {chunk*justification-42508*onc*t64724-2
    :chunk
    (state <s1> ^list <l1> ^gtype <c2> ^gtype <c1> ^<c2> <a1> ^<c1> <a1>)
    (<a1> ^condition <n1>)
    (<n1> ^function board-between ^rtype set ^name between ^type function
          ^args <a2> ^negative <c3> ^parameter <p1> ^result <r1>)
    (<a2> ^num 3 ^1 <c6> ^2 <c4> ^3 <c5>)
    (<c6> ^rtype set ^result <r4>)
    (<l1> ^game <g1>)
    (<r4> ^set <p5>)
    (<p5> ^instance <i3>)
    (<i3> ^1 <s3>)
    (<c5> ^result <r3>)
    (<r3> ^set <p4>)
    (<p4> ^instance <i2>)
    (<i2> ^1 <n3>)
    (<n3> ^predicates <p8>)
    (<c4> ^result <r2>)
    (<r2> ^set <p3>)
    (<p3> ^instance <i1>)
    (<i1> ^1 { <> <n3> <n2> })
    (<n2> ^predicates <p7>)
    (<r1> ^set <p2>)
    (<p2> ^instance <s2>)
    (<s2> ^2 <n2> ^3 <n3> ^1 <s4>)
    (<p7> ^{ << x y >> <c8> } <c9> ^{ <> <c8> << x y >> <c10> } <c12>)
    (<p8> ^<c8> <c9> ^<c10> <c11>)
    (<s3> ^<c7> <n4>)
    (<n4> ^predicates <p6>)
   -{ (<p6> ^<c10> { >= <c11> >= <c12> <y> } ^<c10> <y>)}
   -{ (<p6> ^<c10> { <= <c11> <= <c12> <y> } ^<c10> <y>)}
    (<p6> ^<c8> <c9>)
    -->
    (<s4> ^object <n4> +)
}

sp {chunk*justification-42415*t64724-1
    :chunk
    (state <s1> ^list <l1> ^gtype <c2> ^gtype <c1> ^<c2> <a1> ^<c1> <a1>)
    (<a1> ^condition <n1>)
    (<n1> ^function board-between ^rtype set ^type function ^args <a2>
          ^negative <c3> ^parameter <p1> ^result <r1> ^name <c4>)
    (<a2> ^num 3 ^2 <c5> ^3 <c6> ^1 <c7>)
    (<l1> ^game <g1>)
    (<c6> ^result <r3>)
    (<r3> ^set <p4>)
    (<p4> ^instance <i2>)
    (<i2> ^1 <n3>)
    (<c5> ^result <r2>)
    (<r2> ^set <p3>)
    (<p3> ^instance <i1>)
    (<i1> ^1 { <> <n3> <n2> })
    (<r1> ^set <p2>)
    -->
    (<p2> ^instance <s2> +)
    (<s2> ^1 <s3> + ^3 <n3> + ^2 <n2> +)
}

sp {chunk-multi*chunk-puzzle-impasse*apply*complete*snc*t62826-4
    :chunk
    (state <s1> ^retrieve-game missionaries-and-cannibals342 -^opponent <o*1>)
    -->
    (<s1> ^retrieve-handle all-crossed208 +)
}

sp {chunk-multi*chunk-puzzle-impasse*apply*complete*snc*t62826-3
    :chunk
    (state <s1> ^retrieve-game missionaries-and-cannibals342 -^opponent <o*1>)
    -->
    (<s1> ^retrieve-handle cross-river243 +)
}

sp {chunk-multi*chunk-puzzle-impasse*apply*complete*snc*t62826-2
    :chunk
    (state <s1> ^retrieve-game missionaries-and-cannibals342 -^opponent <o*1>)
    -->
    (<s1> ^retrieve-handle cross-two249 +)
}

sp {chunk-multi*chunk-puzzle-impasse*apply*complete*snc*t62826-1
    :chunk
    (state <s1> ^retrieve-game missionaries-and-cannibals342 -^opponent <o*1>)
    -->
    (<s1> ^retrieve-handle failure-default346 +)
}

sp {chunk-multi*chunk-predicate-impasse*apply*complete*failure*snc*t62811-1
    :chunk
    (state <s1> ^gtype failure ^retrieve-handle failure-default346)
    -->
    (<s1> ^failure <p1> +)
    (<p1> ^potential-args <p2> + ^parameter-set <p3> + ^formated predicate +
           ^primary-rtype single + ^nlp-set <p4> + ^aname failure-default346 +
           ^handle failure-default346 +)
    (<p3> ^argnum 5 +)
    (<p4> ^conditions <n1> + ^conditions <n2> + ^conditions <n3> +
           ^conditions <n4> + ^conditions <n5> + ^aname failure-default346 +)
    (<n3> ^type function + ^name count + ^result <r2> + ^parameter <p11> +
           ^negative false + ^args <a4> + ^rtype single +
           ^return-type number + ^function soar-count +)
    (<r2> ^set <p9> +)
    (<p11> ^1 <p10> + ^2 <p12> + ^num 2 +)
    (<p10> ^type single + ^param-id 4 +)
    (<p12> ^type set + ^param-id 2 +)
    (<n1> ^type state-pair + ^name on1 + ^attribute prepositions +
           ^result <r3> + ^parameter <p15> + ^negative false + ^args <a3> +
           ^rtype set +)
    (<r3> ^set <p13> +)
    (<p15> ^1 <p14> + ^2 <p16> + ^num 2 +)
    (<p14> ^type set + ^param-id 2 +)
    (<p16> ^type single + ^param-id 1 +)
    (<a3> ^1 <c1> + ^2 <c3> + ^num 2 +)
    (<c1> ^type attribute + ^name cannibal1 + ^attribute shape +
           ^result <r4> + ^parameter <p18> + ^negative false + ^args <a2> +
           ^rtype single +)
    (<r4> ^set <p17> +)
    (<p18> ^num 0 +)
    (<a2> ^1 <c2> + ^num 1 +)
    (<c2> ^type attribute + ^name object + ^attribute primitive +
           ^result <r5> + ^parameter <p20> + ^negative false + ^args <a1> +
           ^rtype single +)
    (<r5> ^set <p19> +)
    (<p20> ^num 0 +)
    (<a4> ^2 <n1> + ^num 1 +)
    (<n4> ^type function + ^name count + ^result <r6> + ^parameter <p23> +
           ^negative false + ^args <a11> + ^rtype single +
           ^return-type number + ^function soar-count +)
    (<r6> ^set <p21> +)
    (<p23> ^1 <p22> + ^2 <p24> + ^num 2 +)
    (<p22> ^type single + ^param-id 5 +)
    (<p24> ^type set + ^param-id 3 +)
    (<n2> ^type state-pair + ^name on1 + ^attribute prepositions +
           ^result <r7> + ^parameter <p27> + ^negative false + ^args <a8> +
           ^rtype set +)
    (<r7> ^set <p25> +)
    (<p27> ^1 <p26> + ^2 <p28> + ^num 2 +)
    (<p26> ^type set + ^param-id 3 +)
    (<p28> ^type single + ^param-id 1 +)
    (<c3> ^type attribute + ^name bank1 + ^attribute shape + ^result <r10> +
           ^parameter <p34> + ^negative false + ^args <a10> + ^rtype single +)
    (<r10> ^set <p33> +)
    (<p34> ^num 0 +)
    (<a10> ^1 <c6> + ^num 1 +)
    (<c6> ^type attribute + ^name object + ^attribute primitive +
           ^result <r11> + ^parameter <p36> + ^negative false + ^args <a9> +
           ^rtype single +)
    (<r11> ^set <p35> +)
    (<p36> ^num 0 +)
    (<a8> ^1 <c4> + ^2 <c3> + ^num 2 +)
    (<c4> ^type attribute + ^name missionary1 + ^attribute shape +
           ^result <r8> + ^parameter <p30> + ^negative false + ^args <a7> +
           ^rtype single +)
    (<r8> ^set <p29> +)
    (<p30> ^num 0 +)
    (<a7> ^1 <c5> + ^num 1 +)
    (<c5> ^type attribute + ^name object + ^attribute primitive +
           ^result <r9> + ^parameter <p32> + ^negative false + ^args <a6> +
           ^rtype single +)
    (<r9> ^set <p31> +)
    (<p32> ^num 0 +)
    (<a11> ^2 <n2> + ^num 1 +)
    (<n5> ^type function + ^name greater + ^result <r1> + ^parameter <p7> +
           ^negative false + ^args <a5> + ^rtype single +
           ^return-type number + ^function soar-greater +)
    (<r1> ^set <p5> +)
    (<p7> ^1 <p6> + ^2 <p8> + ^num 2 +)
    (<p6> ^type single + ^param-id 4 +)
    (<p8> ^type single + ^param-id 5 +)
    (<a5> ^1 <n3> + ^2 <n4> + ^num 2 +)
}

sp {chunk*justification-40904*onc*t62392-1
    :chunk
    (state <s1> ^list <l1> ^gtype <c2> ^gtype <c1> ^<c2> <a1> ^<c1> <a1>)
    (<a1> ^condition <n1>)
    (<n1> ^function soar-greater ^type function ^args <a2> ^parameter <p1>
          ^negative <c3> ^result <r3> ^name <c4>)
    (<a2> ^num 2 ^2 <n2> ^1 <n3>)
    (<p1> ^num 2)
    (<l1> ^game <g1>)
    (<r3> ^set <p6>)
    (<n3> ^result <r2>)
    (<r2> ^set <p4>)
    (<p4> ^instance <p5>)
    (<p5> ^1 <c6>)
    (<n2> ^result <r1>)
    (<r1> ^set <p2>)
    (<p2> ^instance <p3>)
    (<p3> ^1 { < <c6> <c5> })
    -->
    (<p6> ^instance <i1> +)
    (<i1> ^1 <c6> + ^2 <c5> +)
}

sp {chunk-multi*chunk-puzzle-impasse*apply*complete*snc*t60709-4
    :chunk
    (state <s1> ^retrieve-game three-mens-morris334 -^opponent <o*1>)
    -->
    (<s1> ^retrieve-handle place-block127 +)
}

sp {chunk-multi*chunk-puzzle-impasse*apply*complete*snc*t60709-3
    :chunk
    (state <s1> ^retrieve-game three-mens-morris334 -^opponent <o*1>)
    -->
    (<s1> ^retrieve-handle three-in-a-row130 +)
}

sp {chunk-multi*chunk-puzzle-impasse*apply*complete*snc*t60709-2
    :chunk
    (state <s1> ^retrieve-game three-mens-morris334 -^opponent <o*1>)
    -->
    (<s1> ^retrieve-handle enemy-3-in-a-row132 +)
}

sp {chunk-multi*chunk-puzzle-impasse*apply*complete*snc*t60709-1
    :chunk
    (state <s1> ^retrieve-game three-mens-morris334 -^opponent <o*1>)
    -->
    (<s1> ^retrieve-handle slide-adjacent335 +)
}

sp {chunk-multi*chunk-predicate-impasse*apply*complete*action*snc*t60694-1
    :chunk
    (state <s1> ^gtype action ^retrieve-handle slide-adjacent335)
    -->
    (<s1> ^action <p1> +)
    (<p1> ^potential-args <p2> + ^parameter-set <p3> + ^formated predicate +
           ^primary-rtype set + ^nlp-set <p13> + ^verb-structure <v2> +
           ^aname slide-adjacent335 + ^handle slide-adjacent335 +)
    (<p3> ^argnum 4 +)
    (<p13> ^conditions <n1> + ^conditions <n2> + ^conditions <n3> +
           ^aname slide-adjacent335 +)
    (<n1> ^type concept + ^name adjacent + ^attribute predicate +
           ^result <r1> + ^parameter <p6> + ^negative false + ^args <a1> +
           ^rtype single +)
    (<r1> ^set <p4> +)
    (<p6> ^1 <p5> + ^2 <p7> + ^num 2 +)
    (<p5> ^type single + ^param-id 4 +)
    (<p7> ^type single + ^param-id 3 +)
    (<a1> ^1 <c1> + ^2 <c2> + ^num 2 +)
    (<c2> ^type concept + ^name clear + ^attribute predicate + ^result <r2> +
           ^parameter <p9> + ^negative false + ^args <a4> + ^rtype single +)
    (<r2> ^set <p8> +)
    (<p9> ^num 0 +)
    (<a4> ^1 <c3> + ^num 1 +)
    (<c3> ^type attribute + ^name location + ^attribute category +
           ^result <r3> + ^parameter <p11> + ^negative false + ^args <a3> +
           ^rtype single +)
    (<r3> ^set <p10> +)
    (<p11> ^num 0 +)
    (<a3> ^1 <c4> + ^num 1 +)
    (<c4> ^type attribute + ^name object + ^attribute primitive +
           ^result <r4> + ^parameter <p12> + ^negative false + ^args <a2> +
           ^rtype single +)
    (<r4> ^set <r5> +)
    (<p12> ^num 0 +)
    (<n2> ^type state-pair + ^name on1 + ^attribute prepositions +
           ^result <r6> + ^parameter <p16> + ^negative false + ^args <a8> +
           ^rtype set +)
    (<r6> ^set <p14> +)
    (<p16> ^1 <p15> + ^num 1 +)
    (<p15> ^type set + ^param-id 1 +)
    (<a8> ^1 <c5> + ^2 <c8> + ^num 2 +)
    (<c5> ^type attribute + ^name red1 + ^attribute color + ^result <r7> +
           ^parameter <p19> + ^negative false + ^args <a7> + ^rtype set +)
    (<r7> ^set <p17> +)
    (<p19> ^1 <p18> + ^num 1 +)
    (<p18> ^type set + ^param-id 1 +)
    (<a7> ^1 <c6> + ^num 1 +)
    (<c6> ^type attribute + ^name block + ^attribute category + ^result <r8> +
           ^parameter <p21> + ^negative false + ^args <a6> + ^rtype single +)
    (<r8> ^set <p20> +)
    (<p21> ^num 0 +)
    (<a6> ^1 <c7> + ^num 1 +)
    (<c7> ^type attribute + ^name object + ^attribute primitive +
           ^result <r9> + ^parameter <p22> + ^negative false + ^args <a5> +
           ^rtype single +)
    (<r9> ^set <r10> +)
    (<p22> ^num 0 +)
    (<c8> ^type attribute + ^name location + ^attribute category +
           ^result <r11> + ^parameter <p24> + ^negative false + ^args <a10> +
           ^rtype set +)
    (<r11> ^set <p23> +)
    (<p24> ^num 0 +)
    (<a10> ^1 <c9> + ^num 1 +)
    (<c9> ^type attribute + ^name object + ^attribute primitive +
           ^result <r12> + ^parameter <p25> + ^negative false + ^args <a9> +
           ^rtype single +)
    (<r12> ^set <r13> +)
    (<p25> ^num 0 +)
    (<c1> ^type attribute + ^name location + ^attribute category +
           ^result <r19> + ^parameter <p36> + ^negative false + ^args <a16> +
           ^rtype single +)
    (<r19> ^set <p35> +)
    (<p36> ^num 0 +)
    (<a16> ^1 <c13> + ^num 1 +)
    (<c13> ^type attribute + ^name object + ^attribute primitive +
           ^result <r20> + ^parameter <p37> + ^negative false + ^args <a15> +
           ^rtype single +)
    (<r20> ^set <r21> +)
    (<p37> ^num 0 +)
    (<n3> ^type state-pair + ^name on1 + ^attribute prepositions +
           ^result <r14> + ^parameter <p28> + ^negative false + ^args <a14> +
           ^rtype single +)
    (<r14> ^set <p26> +)
    (<p28> ^1 <p27> + ^2 <p29> + ^num 2 +)
    (<p27> ^type single + ^param-id 2 +)
    (<p29> ^type single + ^param-id 4 +)
    (<a14> ^1 <c10> + ^2 <c1> + ^num 2 +)
    (<c10> ^type attribute + ^name red1 + ^attribute color + ^result <r15> +
           ^parameter <p31> + ^negative false + ^args <a13> + ^rtype single +)
    (<r15> ^set <p30> +)
    (<p31> ^num 0 +)
    (<a13> ^1 <c11> + ^num 1 +)
    (<c11> ^type attribute + ^name block + ^attribute category +
           ^result <r16> + ^parameter <p33> + ^negative false + ^args <a12> +
           ^rtype single +)
    (<r16> ^set <p32> +)
    (<p33> ^num 0 +)
    (<a12> ^1 <c12> + ^num 1 +)
    (<c12> ^type attribute + ^name object + ^attribute primitive +
           ^result <r17> + ^parameter <p34> + ^negative false + ^args <a11> +
           ^rtype single +)
    (<r17> ^set <r18> +)
    (<p34> ^num 0 +)
    (<v2> ^1 <v1> +)
    (<v1> ^1 2 + ^2 3 + ^verb-name move1 + ^verb-prep on1 +)
}

sp {chunk-multi*chunk-puzzle-impasse*apply*complete*snc*t58197-2
    :chunk
    (state <s1> ^retrieve-game five-puzzle322 -^opponent <o*1>)
    -->
    (<s1> ^retrieve-handle slide-block102 +)
}

sp {chunk-multi*chunk-puzzle-impasse*apply*complete*snc*t58197-1
    :chunk
    (state <s1> ^retrieve-game five-puzzle322 -^opponent <o*1>)
    -->
    (<s1> ^retrieve-handle goal-default324 +)
}

sp {chunk-multi*chunk-predicate-impasse*apply*complete*goal*snc*t58185-1
    :chunk
    (state <s1> ^gtype goal ^retrieve-handle goal-default324)
    -->
    (<s1> ^goal <p1> +)
    (<p1> ^potential-args <p2> + ^parameter-set <p3> + ^formated predicate +
           ^primary-rtype set + ^nlp-set <p14> + ^aname goal-default324 +
           ^handle goal-default324 +)
    (<p3> ^argnum 2 +)
    (<p14> ^conditions <n1> + ^conditions <n2> + ^aname goal-default324 +)
    (<n1> ^type function + ^name count + ^result <r1> + ^parameter <p6> +
           ^negative false + ^args <a4> + ^rtype single +
           ^return-type number + ^function soar-count +)
    (<r1> ^set <p4> +)
    (<p6> ^1 <p5> + ^2 <p7> + ^num 2 +)
    (<p5> ^type single + ^param-id 2 +)
    (<p7> ^type set + ^param-id 1 +)
    (<a4> ^2 <c1> + ^num 1 +)
    (<c1> ^type concept + ^name matched274 + ^attribute predicate +
           ^result <r2> + ^parameter <p10> + ^negative false + ^args <a3> +
           ^rtype set +)
    (<r2> ^set <p8> +)
    (<p10> ^1 <p9> + ^num 1 +)
    (<p9> ^type set + ^param-id 1 +)
    (<a3> ^1 <c2> + ^num 1 +)
    (<c2> ^type attribute + ^name location + ^attribute category +
           ^result <r3> + ^parameter <p12> + ^negative false + ^args <a2> +
           ^rtype single +)
    (<r3> ^set <p11> +)
    (<p12> ^num 0 +)
    (<a2> ^1 <c3> + ^num 1 +)
    (<c3> ^type attribute + ^name object + ^attribute primitive +
           ^result <r4> + ^parameter <p13> + ^negative false + ^args <a1> +
           ^rtype single +)
    (<r4> ^set <r5> +)
    (<p13> ^num 0 +)
    (<n2> ^name number + ^result <r6> + ^parameter <p16> + ^negative false +
           ^args <a5> + ^rtype single + ^return-type number +)
    (<r6> ^set <s2> +)
    (<s2> ^instance <i1> +)
    (<i1> ^1 5 +)
    (<p16> ^1 <p15> + ^num 1 +)
    (<p15> ^type single + ^param-id 2 +)
}

sp {chunk-multi*chunk-puzzle-impasse*apply*complete*snc*t56895-4
    :chunk
    (state <s1> ^retrieve-game picaria309 -^opponent <o*1>)
    -->
    (<s1> ^retrieve-handle place-block127 +)
}

sp {chunk-multi*chunk-puzzle-impasse*apply*complete*snc*t56895-3
    :chunk
    (state <s1> ^retrieve-game picaria309 -^opponent <o*1>)
    -->
    (<s1> ^retrieve-handle three-in-a-row130 +)
}

sp {chunk-multi*chunk-puzzle-impasse*apply*complete*snc*t56895-2
    :chunk
    (state <s1> ^retrieve-game picaria309 -^opponent <o*1>)
    -->
    (<s1> ^retrieve-handle enemy-3-in-a-row132 +)
}

sp {chunk-multi*chunk-puzzle-impasse*apply*complete*snc*t56895-1
    :chunk
    (state <s1> ^retrieve-game picaria309 -^opponent <o*1>)
    -->
    (<s1> ^retrieve-handle slide-next-to310 +)
}

sp {chunk-multi*chunk-predicate-impasse*apply*complete*action*snc*t56883-1
    :chunk
    (state <s1> ^gtype action ^retrieve-handle slide-next-to310)
    -->
    (<s1> ^action <p1> +)
    (<p1> ^potential-args <p2> + ^parameter-set <p3> + ^formated predicate +
           ^primary-rtype set + ^nlp-set <p13> + ^verb-structure <v2> +
           ^aname slide-next-to310 + ^handle slide-next-to310 +)
    (<p3> ^argnum 4 +)
    (<p13> ^conditions <n1> + ^conditions <n2> + ^conditions <n3> +
           ^aname slide-next-to310 +)
    (<n1> ^type state-pair + ^name near1 + ^attribute prepositions +
           ^result <r1> + ^parameter <p6> + ^negative false + ^args <a1> +
           ^rtype single +)
    (<r1> ^set <p4> +)
    (<p6> ^1 <p5> + ^2 <p7> + ^num 2 +)
    (<p5> ^type single + ^param-id 4 +)
    (<p7> ^type single + ^param-id 3 +)
    (<a1> ^1 <c1> + ^2 <c2> + ^num 2 +)
    (<c2> ^type concept + ^name clear + ^attribute predicate + ^result <r2> +
           ^parameter <p9> + ^negative false + ^args <a4> + ^rtype single +)
    (<r2> ^set <p8> +)
    (<p9> ^num 0 +)
    (<a4> ^1 <c3> + ^num 1 +)
    (<c3> ^type attribute + ^name location + ^attribute category +
           ^result <r3> + ^parameter <p11> + ^negative false + ^args <a3> +
           ^rtype single +)
    (<r3> ^set <p10> +)
    (<p11> ^num 0 +)
    (<a3> ^1 <c4> + ^num 1 +)
    (<c4> ^type attribute + ^name object + ^attribute primitive +
           ^result <r4> + ^parameter <p12> + ^negative false + ^args <a2> +
           ^rtype single +)
    (<r4> ^set <r5> +)
    (<p12> ^num 0 +)
    (<n2> ^type state-pair + ^name on1 + ^attribute prepositions +
           ^result <r6> + ^parameter <p16> + ^negative false + ^args <a8> +
           ^rtype set +)
    (<r6> ^set <p14> +)
    (<p16> ^1 <p15> + ^num 1 +)
    (<p15> ^type set + ^param-id 1 +)
    (<a8> ^1 <c5> + ^2 <c8> + ^num 2 +)
    (<c5> ^type attribute + ^name red1 + ^attribute color + ^result <r7> +
           ^parameter <p19> + ^negative false + ^args <a7> + ^rtype set +)
    (<r7> ^set <p17> +)
    (<p19> ^1 <p18> + ^num 1 +)
    (<p18> ^type set + ^param-id 1 +)
    (<a7> ^1 <c6> + ^num 1 +)
    (<c6> ^type attribute + ^name block + ^attribute category + ^result <r8> +
           ^parameter <p21> + ^negative false + ^args <a6> + ^rtype single +)
    (<r8> ^set <p20> +)
    (<p21> ^num 0 +)
    (<a6> ^1 <c7> + ^num 1 +)
    (<c7> ^type attribute + ^name object + ^attribute primitive +
           ^result <r9> + ^parameter <p22> + ^negative false + ^args <a5> +
           ^rtype single +)
    (<r9> ^set <r10> +)
    (<p22> ^num 0 +)
    (<c8> ^type attribute + ^name location + ^attribute category +
           ^result <r11> + ^parameter <p24> + ^negative false + ^args <a10> +
           ^rtype set +)
    (<r11> ^set <p23> +)
    (<p24> ^num 0 +)
    (<a10> ^1 <c9> + ^num 1 +)
    (<c9> ^type attribute + ^name object + ^attribute primitive +
           ^result <r12> + ^parameter <p25> + ^negative false + ^args <a9> +
           ^rtype single +)
    (<r12> ^set <r13> +)
    (<p25> ^num 0 +)
    (<c1> ^type attribute + ^name location + ^attribute category +
           ^result <r19> + ^parameter <p36> + ^negative false + ^args <a16> +
           ^rtype single +)
    (<r19> ^set <p35> +)
    (<p36> ^num 0 +)
    (<a16> ^1 <c13> + ^num 1 +)
    (<c13> ^type attribute + ^name object + ^attribute primitive +
           ^result <r20> + ^parameter <p37> + ^negative false + ^args <a15> +
           ^rtype single +)
    (<r20> ^set <r21> +)
    (<p37> ^num 0 +)
    (<n3> ^type state-pair + ^name on1 + ^attribute prepositions +
           ^result <r14> + ^parameter <p28> + ^negative false + ^args <a14> +
           ^rtype single +)
    (<r14> ^set <p26> +)
    (<p28> ^1 <p27> + ^2 <p29> + ^num 2 +)
    (<p27> ^type single + ^param-id 2 +)
    (<p29> ^type single + ^param-id 4 +)
    (<a14> ^1 <c10> + ^2 <c1> + ^num 2 +)
    (<c10> ^type attribute + ^name red1 + ^attribute color + ^result <r15> +
           ^parameter <p31> + ^negative false + ^args <a13> + ^rtype single +)
    (<r15> ^set <p30> +)
    (<p31> ^num 0 +)
    (<a13> ^1 <c11> + ^num 1 +)
    (<c11> ^type attribute + ^name block + ^attribute category +
           ^result <r16> + ^parameter <p33> + ^negative false + ^args <a12> +
           ^rtype single +)
    (<r16> ^set <p32> +)
    (<p33> ^num 0 +)
    (<a12> ^1 <c12> + ^num 1 +)
    (<c12> ^type attribute + ^name object + ^attribute primitive +
           ^result <r17> + ^parameter <p34> + ^negative false + ^args <a11> +
           ^rtype single +)
    (<r17> ^set <r18> +)
    (<p34> ^num 0 +)
    (<v2> ^1 <v1> +)
    (<v1> ^1 2 + ^2 3 + ^verb-name move1 + ^verb-prep on1 +)
}

sp {chunk-multi*chunk-puzzle-impasse*apply*complete*snc*t53581-2
    :chunk
    (state <s1> ^retrieve-game peg-solitaire293 -^opponent <o*1>)
    -->
    (<s1> ^retrieve-handle action-default306 +)
}

sp {chunk-multi*chunk-puzzle-impasse*apply*complete*snc*t53581-1
    :chunk
    (state <s1> ^retrieve-game peg-solitaire293 -^opponent <o*1>)
    -->
    (<s1> ^retrieve-handle goal-default308 +)
}

sp {chunk-multi*chunk-predicate-impasse*apply*complete*action*snc*t53572-1
    :chunk
    (state <s1> ^gtype action ^retrieve-handle action-default306)
    -->
    (<s1> ^action <p1> +)
    (<p1> ^potential-args <p2> + ^parameter-set <p3> + ^formated predicate +
           ^primary-rtype single + ^nlp-set <p11> + ^verb-structure <v2> +
           ^aname action-default306 + ^handle action-default306 +)
    (<p3> ^argnum 6 +)
    (<p11> ^conditions <n1> + ^conditions <n2> + ^conditions <n3> +
           ^conditions <c13> + ^aname action-default306 +)
    (<n1> ^type state-pair + ^name on1 + ^attribute prepositions +
           ^result <r1> + ^parameter <p6> + ^negative false + ^args <a3> +
           ^rtype single +)
    (<r1> ^set <p4> +)
    (<p6> ^1 <p5> + ^2 <p7> + ^num 2 +)
    (<p5> ^type single + ^param-id 6 +)
    (<p7> ^type single + ^param-id 4 +)
    (<a3> ^1 <c1> + ^2 <c3> + ^num 2 +)
    (<c1> ^type attribute + ^name block + ^attribute category + ^result <r2> +
           ^parameter <p9> + ^negative false + ^args <a2> + ^rtype single +)
    (<r2> ^set <p8> +)
    (<p9> ^num 0 +)
    (<a2> ^1 <c2> + ^num 1 +)
    (<c2> ^type attribute + ^name object + ^attribute primitive +
           ^result <r3> + ^parameter <p10> + ^negative false + ^args <a1> +
           ^rtype single +)
    (<r3> ^set <r4> +)
    (<p10> ^num 0 +)
    (<n2> ^type state-pair + ^name below1 + ^attribute prepositions +
           ^result <r6> + ^parameter <p19> + ^negative false + ^args <a6> +
           ^rtype single +)
    (<r6> ^set <p17> +)
    (<p19> ^1 <p18> + ^2 <p20> + ^num 2 +)
    (<p18> ^type single + ^param-id 2 +)
    (<p20> ^type single + ^param-id 1 +)
    (<a6> ^1 <c4> + ^2 <c6> + ^num 2 +)
    (<c4> ^type attribute + ^name location + ^attribute category +
           ^result <r7> + ^parameter <p22> + ^negative false + ^args <a5> +
           ^rtype single +)
    (<r7> ^set <p21> +)
    (<p22> ^num 0 +)
    (<a5> ^1 <c5> + ^num 1 +)
    (<c5> ^type attribute + ^name object + ^attribute primitive +
           ^result <r8> + ^parameter <p23> + ^negative false + ^args <a4> +
           ^rtype single +)
    (<r8> ^set <r9> +)
    (<p23> ^num 0 +)
    (<c6> ^type attribute + ^name block + ^attribute category +
           ^result <r10> + ^parameter <p25> + ^negative false + ^args <a8> +
           ^rtype single +)
    (<r10> ^set <p24> +)
    (<p25> ^num 0 +)
    (<a8> ^1 <c7> + ^num 1 +)
    (<c7> ^type attribute + ^name object + ^attribute primitive +
           ^result <r11> + ^parameter <p26> + ^negative false + ^args <a7> +
           ^rtype single +)
    (<r11> ^set <r12> +)
    (<p26> ^num 0 +)
    (<c3> ^type concept + ^name covered + ^attribute predicate +
           ^result <r17> + ^parameter <p33> + ^negative false + ^args <a15> +
           ^rtype single +)
    (<r17> ^set <p32> +)
    (<p33> ^num 0 +)
    (<a15> ^1 <c11> + ^num 1 +)
    (<c11> ^type attribute + ^name location + ^attribute category +
           ^result <r18> + ^parameter <p35> + ^negative false + ^args <a14> +
           ^rtype single +)
    (<r18> ^set <p34> +)
    (<p35> ^num 0 +)
    (<a14> ^1 <c12> + ^num 1 +)
    (<c12> ^type attribute + ^name object + ^attribute primitive +
           ^result <r19> + ^parameter <p36> + ^negative false + ^args <a13> +
           ^rtype single +)
    (<r19> ^set <r20> +)
    (<p36> ^num 0 +)
    (<n3> ^type function + ^name between + ^result <r5> + ^parameter <p14> +
           ^negative false + ^args <a9> + ^rtype single +
           ^function board-between +)
    (<r5> ^set <p12> +)
    (<p14> ^1 <p13> + ^2 <p15> + ^3 <p16> + ^num 3 +)
    (<p13> ^type single + ^param-id 2 +)
    (<p15> ^type single + ^param-id 3 +)
    (<p16> ^type single + ^param-id 4 +)
    (<a9> ^1 <n2> + ^2 <c8> + ^3 <c3> + ^num 3 +)
    (<c8> ^type concept + ^name clear + ^attribute predicate + ^result <r13> +
           ^parameter <p28> + ^negative false + ^args <a12> + ^rtype single +)
    (<r13> ^set <p27> +)
    (<p28> ^num 0 +)
    (<a12> ^1 <c9> + ^num 1 +)
    (<c9> ^type attribute + ^name location + ^attribute category +
           ^result <r14> + ^parameter <p30> + ^negative false + ^args <a11> +
           ^rtype single +)
    (<r14> ^set <p29> +)
    (<p30> ^num 0 +)
    (<a11> ^1 <c10> + ^num 1 +)
    (<c10> ^type attribute + ^name object + ^attribute primitive +
           ^result <r15> + ^parameter <p31> + ^negative false + ^args <a10> +
           ^rtype single +)
    (<r15> ^set <r16> +)
    (<p31> ^num 0 +)
    (<c13> ^type attribute + ^name garbage + ^attribute name + ^result <r21> +
           ^parameter <p39> + ^negative false + ^args <a17> + ^rtype single +)
    (<r21> ^set <p37> +)
    (<p39> ^1 <p38> + ^num 1 +)
    (<p38> ^type single + ^param-id 5 +)
    (<a17> ^1 <c14> + ^num 1 +)
    (<c14> ^type attribute + ^name object + ^attribute primitive +
           ^result <r22> + ^parameter <p41> + ^negative false + ^args <a16> +
           ^rtype single +)
    (<r22> ^set <p40> +)
    (<p41> ^num 0 +)
    (<v2> ^1 <v1> + ^2 <v3> +)
    (<v1> ^1 6 + ^2 3 + ^verb-name move1 + ^verb-prep on1 +)
    (<v3> ^1 1 + ^2 5 + ^verb-name move1 + ^verb-prep on1 +)
}

sp {chunk-multi*chunk-predicate-impasse*apply*complete*goal*snc*t53564-1
    :chunk
    (state <s1> ^gtype goal ^retrieve-handle goal-default308)
    -->
    (<s1> ^goal <p1> +)
    (<p1> ^potential-args <p2> + ^parameter-set <p3> + ^formated predicate +
           ^primary-rtype set + ^nlp-set <p13> + ^aname goal-default308 +
           ^handle goal-default308 +)
    (<p3> ^argnum 2 +)
    (<p13> ^conditions <n1> + ^conditions <n2> + ^aname goal-default308 +)
    (<n1> ^type function + ^name count + ^result <r1> + ^parameter <p6> +
           ^negative false + ^args <a4> + ^rtype single +
           ^return-type number + ^function soar-count +)
    (<r1> ^set <p4> +)
    (<p6> ^1 <p5> + ^2 <p7> + ^num 2 +)
    (<p5> ^type single + ^param-id 2 +)
    (<p7> ^type set + ^param-id 1 +)
    (<a4> ^2 <c1> + ^num 1 +)
    (<c1> ^type concept + ^name covered + ^attribute predicate +
           ^result <r2> + ^parameter <p9> + ^negative false + ^args <a3> +
           ^rtype set +)
    (<r2> ^set <p8> +)
    (<p9> ^num 0 +)
    (<a3> ^1 <c2> + ^num 1 +)
    (<c2> ^type attribute + ^name location + ^attribute category +
           ^result <r3> + ^parameter <p11> + ^negative false + ^args <a2> +
           ^rtype single +)
    (<r3> ^set <p10> +)
    (<p11> ^num 0 +)
    (<a2> ^1 <c3> + ^num 1 +)
    (<c3> ^type attribute + ^name object + ^attribute primitive +
           ^result <r4> + ^parameter <p12> + ^negative false + ^args <a1> +
           ^rtype single +)
    (<r4> ^set <r5> +)
    (<p12> ^num 0 +)
    (<n2> ^name number + ^result <r6> + ^parameter <p15> + ^negative false +
           ^args <a5> + ^rtype single + ^return-type number +)
    (<r6> ^set <s2> +)
    (<s2> ^instance <i1> +)
    (<i1> ^1 1 +)
    (<p15> ^1 <p14> + ^num 1 +)
    (<p14> ^type single + ^param-id 2 +)
}

sp {chunk-multi*chunk-puzzle-impasse*apply*complete*snc*t50646-4
    :chunk
    (state <s1> ^retrieve-game nine-holes287 -^opponent <o*1>)
    -->
    (<s1> ^retrieve-handle place-block127 +)
}

sp {chunk-multi*chunk-puzzle-impasse*apply*complete*snc*t50646-3
    :chunk
    (state <s1> ^retrieve-game nine-holes287 -^opponent <o*1>)
    -->
    (<s1> ^retrieve-handle three-in-a-row130 +)
}

sp {chunk-multi*chunk-puzzle-impasse*apply*complete*snc*t50646-2
    :chunk
    (state <s1> ^retrieve-game nine-holes287 -^opponent <o*1>)
    -->
    (<s1> ^retrieve-handle enemy-3-in-a-row132 +)
}

sp {chunk-multi*chunk-puzzle-impasse*apply*complete*snc*t50646-1
    :chunk
    (state <s1> ^retrieve-game nine-holes287 -^opponent <o*1>)
    -->
    (<s1> ^retrieve-handle fly288 +)
}

sp {chunk-multi*chunk-predicate-impasse*apply*complete*action*snc*t50631-1
    :chunk
    (state <s1> ^gtype action ^retrieve-handle fly288)
    -->
    (<s1> ^action <p1> +)
    (<p1> ^potential-args <p2> + ^parameter-set <p3> + ^formated predicate +
           ^primary-rtype set + ^nlp-set <p16> + ^verb-structure <v2> +
           ^aname fly288 + ^handle fly288 +)
    (<p3> ^argnum 3 +)
    (<p16> ^conditions <n1> + ^conditions <c6> + ^conditions <c9> +
           ^aname fly288 +)
    (<n1> ^type state-pair + ^name on1 + ^attribute prepositions +
           ^result <r1> + ^parameter <p6> + ^negative false + ^args <a4> +
           ^rtype set +)
    (<r1> ^set <p4> +)
    (<p6> ^1 <p5> + ^num 1 +)
    (<p5> ^type set + ^param-id 1 +)
    (<a4> ^1 <c1> + ^2 <c4> + ^num 2 +)
    (<c1> ^type attribute + ^name red1 + ^attribute color + ^result <r2> +
           ^parameter <p9> + ^negative false + ^args <a3> + ^rtype set +)
    (<r2> ^set <p7> +)
    (<p9> ^1 <p8> + ^num 1 +)
    (<p8> ^type set + ^param-id 1 +)
    (<a3> ^1 <c2> + ^num 1 +)
    (<c2> ^type attribute + ^name block + ^attribute category + ^result <r3> +
           ^parameter <p11> + ^negative false + ^args <a2> + ^rtype single +)
    (<r3> ^set <p10> +)
    (<p11> ^num 0 +)
    (<a2> ^1 <c3> + ^num 1 +)
    (<c3> ^type attribute + ^name object + ^attribute primitive +
           ^result <r4> + ^parameter <p12> + ^negative false + ^args <a1> +
           ^rtype single +)
    (<r4> ^set <r5> +)
    (<p12> ^num 0 +)
    (<c4> ^type attribute + ^name location + ^attribute category +
           ^result <r6> + ^parameter <p14> + ^negative false + ^args <a6> +
           ^rtype set +)
    (<r6> ^set <p13> +)
    (<p14> ^num 0 +)
    (<a6> ^1 <c5> + ^num 1 +)
    (<c5> ^type attribute + ^name object + ^attribute primitive +
           ^result <r7> + ^parameter <p15> + ^negative false + ^args <a5> +
           ^rtype single +)
    (<r7> ^set <r8> +)
    (<p15> ^num 0 +)
    (<c6> ^type attribute + ^name red1 + ^attribute color + ^result <r9> +
           ^parameter <p19> + ^negative false + ^args <a9> + ^rtype single +)
    (<r9> ^set <p17> +)
    (<p19> ^1 <p18> + ^num 1 +)
    (<p18> ^type single + ^param-id 2 +)
    (<a9> ^1 <c7> + ^num 1 +)
    (<c7> ^type attribute + ^name block + ^attribute category +
           ^result <r10> + ^parameter <p21> + ^negative false + ^args <a8> +
           ^rtype single +)
    (<r10> ^set <p20> +)
    (<p21> ^num 0 +)
    (<a8> ^1 <c8> + ^num 1 +)
    (<c8> ^type attribute + ^name object + ^attribute primitive +
           ^result <r11> + ^parameter <p22> + ^negative false + ^args <a7> +
           ^rtype single +)
    (<r11> ^set <r12> +)
    (<p22> ^num 0 +)
    (<c9> ^type concept + ^name clear + ^attribute predicate + ^result <r13> +
           ^parameter <p25> + ^negative false + ^args <a12> + ^rtype single +)
    (<r13> ^set <p23> +)
    (<p25> ^1 <p24> + ^num 1 +)
    (<p24> ^type single + ^param-id 3 +)
    (<a12> ^1 <c10> + ^num 1 +)
    (<c10> ^type attribute + ^name location + ^attribute category +
           ^result <r14> + ^parameter <p27> + ^negative false + ^args <a11> +
           ^rtype single +)
    (<r14> ^set <p26> +)
    (<p27> ^num 0 +)
    (<a11> ^1 <c11> + ^num 1 +)
    (<c11> ^type attribute + ^name object + ^attribute primitive +
           ^result <r15> + ^parameter <p28> + ^negative false + ^args <a10> +
           ^rtype single +)
    (<r15> ^set <r16> +)
    (<p28> ^num 0 +)
    (<v2> ^1 <v1> +)
    (<v1> ^1 2 + ^2 3 + ^verb-name move1 + ^verb-prep on1 +)
}

sp {chunk*justification-33543*t49993-1
    :chunk
    (state <s1> ^list <l1> ^gtype <c3> ^gtype <c1> ^<c3> <a1> ^<c1> <a1>
          ^world <n1>)
    (<a1> ^condition <n3>)
    (<n3> ^rtype set ^negative false ^type state-pair ^args <a2>
          ^parameter <p2> ^name <c2> ^result <r2> ^attribute <c4>)
    (<a2> ^num 2 ^2 <c5> ^1 <c6>)
    (<p2> ^num 1)
    (<c5> ^rtype set)
    (<c6> ^rtype set ^result <r1>)
    (<l1> ^game <g1>)
    (<n1> ^predicates <p1>)
    (<p1> ^predicate <n2>)
    (<n2> ^handle <c2>)
    (<r2> ^set <p4>)
    (<r1> ^set <p3>)
    (<p3> ^instance <i1>)
    (<i1> ^1 <s2>)
   -{ (<s2> -^<x1> <x*1>)
      (<s1> ^<a*1> <v*1>)}
   -{ (<s2> ^<elem> <e>)
     -{ (<n2> ^instance <instance1>)
        (<instance1> ^1 <e> ^2 <objb>)
        (<c5> ^result <r*2>)
        (<r*2> ^set <s*4>)
        (<s*4> ^instance <i*2>)
        (<i*2> ^1 <v*2>)
        (<v*2> ^<elem2> <objb>)}}
    -->
    (<p4> ^instance <i2> +)
    (<i2> ^1 <s2> +)
}

sp {chunk-multi*chunk-puzzle-impasse*apply*complete*snc*t48423-2
    :chunk
    (state <s1> ^retrieve-game tower-of-hanoi-4280 -^opponent <o*1>)
    -->
    (<s1> ^retrieve-handle stack-block212 +)
}

sp {chunk-multi*chunk-puzzle-impasse*apply*complete*snc*t48423-1
    :chunk
    (state <s1> ^retrieve-game tower-of-hanoi-4280 -^opponent <o*1>)
    -->
    (<s1> ^retrieve-handle goal-default286 +)
}

sp {chunk-multi*chunk-predicate-impasse*apply*complete*goal*snc*t48414-1
    :chunk
    (state <s1> ^gtype goal ^retrieve-handle goal-default286)
    -->
    (<s1> ^goal <p1> +)
    (<p1> ^potential-args <p2> + ^parameter-set <p3> + ^formated predicate +
           ^primary-rtype single + ^nlp-set <p13> + ^aname goal-default286 +
           ^handle goal-default286 +)
    (<p3> ^argnum 4 +)
    (<p13> ^conditions <n1> + ^conditions <n2> + ^conditions <n3> +
           ^conditions <n4> + ^aname goal-default286 +)
    (<n1> ^type state-pair + ^name on1 + ^attribute prepositions +
           ^result <r1> + ^parameter <p6> + ^negative false + ^args <a4> +
           ^rtype single +)
    (<r1> ^set <p4> +)
    (<p6> ^1 <p5> + ^2 <p7> + ^num 2 +)
    (<p5> ^type single + ^param-id 1 +)
    (<p7> ^type single + ^param-id 2 +)
    (<a4> ^1 <c1> + ^2 <c4> + ^num 2 +)
    (<c1> ^type attribute + ^name tiny1 + ^attribute size + ^result <r2> +
           ^parameter <p9> + ^negative false + ^args <a3> + ^rtype single +)
    (<r2> ^set <p8> +)
    (<p9> ^num 0 +)
    (<a3> ^1 <c2> + ^num 1 +)
    (<c2> ^type attribute + ^name block + ^attribute category + ^result <r3> +
           ^parameter <p11> + ^negative false + ^args <a2> + ^rtype single +)
    (<r3> ^set <p10> +)
    (<p11> ^num 0 +)
    (<a2> ^1 <c3> + ^num 1 +)
    (<c3> ^type attribute + ^name object + ^attribute primitive +
           ^result <r4> + ^parameter <p12> + ^negative false + ^args <a1> +
           ^rtype single +)
    (<r4> ^set <r5> +)
    (<p12> ^num 0 +)
    (<c4> ^type attribute + ^name small1 + ^attribute size + ^result <r7> +
           ^parameter <p19> + ^negative false + ^args <a7> + ^rtype single +)
    (<r7> ^set <p18> +)
    (<p19> ^num 0 +)
    (<a7> ^1 <c5> + ^num 1 +)
    (<c5> ^type attribute + ^name block + ^attribute category + ^result <r8> +
           ^parameter <p21> + ^negative false + ^args <a6> + ^rtype single +)
    (<r8> ^set <p20> +)
    (<p21> ^num 0 +)
    (<a6> ^1 <c6> + ^num 1 +)
    (<c6> ^type attribute + ^name object + ^attribute primitive +
           ^result <r9> + ^parameter <p22> + ^negative false + ^args <a5> +
           ^rtype single +)
    (<r9> ^set <r10> +)
    (<p22> ^num 0 +)
    (<n2> ^type state-pair + ^name on1 + ^attribute prepositions +
           ^result <r6> + ^parameter <p16> + ^negative false + ^args <a8> +
           ^rtype single +)
    (<r6> ^set <p14> +)
    (<p16> ^1 <p15> + ^2 <p17> + ^num 2 +)
    (<p15> ^type single + ^param-id 2 +)
    (<p17> ^type single + ^param-id 3 +)
    (<a8> ^1 <c4> + ^2 <c7> + ^num 2 +)
    (<n3> ^type state-pair + ^name on1 + ^attribute prepositions +
           ^result <r11> + ^parameter <p25> + ^negative false + ^args <a9> +
           ^rtype single +)
    (<r11> ^set <p23> +)
    (<p25> ^1 <p24> + ^num 1 +)
    (<p24> ^type single + ^param-id 4 +)
    (<a9> ^1 <c8> + ^2 <c9> + ^num 2 +)
    (<c9> ^type attribute + ^name blue1 + ^attribute color + ^result <r12> +
           ^parameter <p27> + ^negative false + ^args <a12> + ^rtype single +)
    (<r12> ^set <p26> +)
    (<p27> ^num 0 +)
    (<a12> ^1 <c10> + ^num 1 +)
    (<c10> ^type attribute + ^name location + ^attribute category +
           ^result <r13> + ^parameter <p29> + ^negative false + ^args <a11> +
           ^rtype single +)
    (<r13> ^set <p28> +)
    (<p29> ^num 0 +)
    (<a11> ^1 <c11> + ^num 1 +)
    (<c11> ^type attribute + ^name object + ^attribute primitive +
           ^result <r14> + ^parameter <p30> + ^negative false + ^args <a10> +
           ^rtype single +)
    (<r14> ^set <r15> +)
    (<p30> ^num 0 +)
    (<c7> ^type attribute + ^name medium1 + ^attribute size + ^result <r17> +
           ^parameter <p36> + ^negative false + ^args <a15> + ^rtype single +)
    (<r17> ^set <p35> +)
    (<p36> ^num 0 +)
    (<a15> ^1 <c12> + ^num 1 +)
    (<c12> ^type attribute + ^name block + ^attribute category +
           ^result <r18> + ^parameter <p38> + ^negative false + ^args <a14> +
           ^rtype single +)
    (<r18> ^set <p37> +)
    (<p38> ^num 0 +)
    (<a14> ^1 <c13> + ^num 1 +)
    (<c13> ^type attribute + ^name object + ^attribute primitive +
           ^result <r19> + ^parameter <p39> + ^negative false + ^args <a13> +
           ^rtype single +)
    (<r19> ^set <r20> +)
    (<p39> ^num 0 +)
    (<c8> ^type attribute + ^name large1 + ^attribute size + ^result <r21> +
           ^parameter <p41> + ^negative false + ^args <a19> + ^rtype single +)
    (<r21> ^set <p40> +)
    (<p41> ^num 0 +)
    (<a19> ^1 <c14> + ^num 1 +)
    (<c14> ^type attribute + ^name block + ^attribute category +
           ^result <r22> + ^parameter <p43> + ^negative false + ^args <a18> +
           ^rtype single +)
    (<r22> ^set <p42> +)
    (<p43> ^num 0 +)
    (<a18> ^1 <c15> + ^num 1 +)
    (<c15> ^type attribute + ^name object + ^attribute primitive +
           ^result <r23> + ^parameter <p44> + ^negative false + ^args <a17> +
           ^rtype single +)
    (<r23> ^set <r24> +)
    (<p44> ^num 0 +)
    (<n4> ^type state-pair + ^name on1 + ^attribute prepositions +
           ^result <r16> + ^parameter <p33> + ^negative false + ^args <a16> +
           ^rtype single +)
    (<r16> ^set <p31> +)
    (<p33> ^1 <p32> + ^2 <p34> + ^num 2 +)
    (<p32> ^type single + ^param-id 3 +)
    (<p34> ^type single + ^param-id 4 +)
    (<a16> ^1 <c7> + ^2 <c8> + ^num 2 +)
}

sp {chunk-multi*chunk-puzzle-impasse*apply*complete*snc*t46449-2
    :chunk
    (state <s1> ^retrieve-game eight-puzzle269 -^opponent <o*1>)
    -->
    (<s1> ^retrieve-handle slide-block102 +)
}

sp {chunk-multi*chunk-puzzle-impasse*apply*complete*snc*t46449-1
    :chunk
    (state <s1> ^retrieve-game eight-puzzle269 -^opponent <o*1>)
    -->
    (<s1> ^retrieve-handle goal-default271 +)
}

sp {chunk-multi*chunk-predicate-impasse*apply*complete*goal*snc*t46437-1
    :chunk
    (state <s1> ^gtype goal ^retrieve-handle goal-default271)
    -->
    (<s1> ^goal <p1> +)
    (<p1> ^potential-args <p2> + ^parameter-set <p3> + ^formated predicate +
           ^primary-rtype set + ^nlp-set <p14> + ^aname goal-default271 +
           ^handle goal-default271 +)
    (<p3> ^argnum 2 +)
    (<p14> ^conditions <n1> + ^conditions <n2> + ^aname goal-default271 +)
    (<n1> ^type function + ^name count + ^result <r1> + ^parameter <p6> +
           ^negative false + ^args <a4> + ^rtype single +
           ^return-type number + ^function soar-count +)
    (<r1> ^set <p4> +)
    (<p6> ^1 <p5> + ^2 <p7> + ^num 2 +)
    (<p5> ^type single + ^param-id 2 +)
    (<p7> ^type set + ^param-id 1 +)
    (<a4> ^2 <c1> + ^num 1 +)
    (<c1> ^type concept + ^name matched274 + ^attribute predicate +
           ^result <r2> + ^parameter <p10> + ^negative false + ^args <a3> +
           ^rtype set +)
    (<r2> ^set <p8> +)
    (<p10> ^1 <p9> + ^num 1 +)
    (<p9> ^type set + ^param-id 1 +)
    (<a3> ^1 <c2> + ^num 1 +)
    (<c2> ^type attribute + ^name location + ^attribute category +
           ^result <r3> + ^parameter <p12> + ^negative false + ^args <a2> +
           ^rtype single +)
    (<r3> ^set <p11> +)
    (<p12> ^num 0 +)
    (<a2> ^1 <c3> + ^num 1 +)
    (<c3> ^type attribute + ^name object + ^attribute primitive +
           ^result <r4> + ^parameter <p13> + ^negative false + ^args <a1> +
           ^rtype single +)
    (<r4> ^set <r5> +)
    (<p13> ^num 0 +)
    (<n2> ^name number + ^result <r6> + ^parameter <p16> + ^negative false +
           ^args <a5> + ^rtype single + ^return-type number +)
    (<r6> ^set <s2> +)
    (<s2> ^instance <i1> +)
    (<i1> ^1 8 +)
    (<p16> ^1 <p15> + ^num 1 +)
    (<p15> ^type single + ^param-id 2 +)
}

sp {chunk-multi*chunk-predicate-impasse*apply*complete*snc*t46329-1
    :chunk
    (state <s1> ^gtype <c2> ^<c2> <g1>)
    (<g1> ^condition <c1>)
    (<c1> ^name matched274 ^type concept ^attribute predicate)
    -->
    (<s1> ^predicate <p1> + ^gtype predicate +)
    (<p1> ^link <c1> + ^potential-args <p2> + ^parameter-set <p3> +
           ^formated predicate + ^primary-rtype single + ^nlp-set <p8> +
           ^aname matched274 + ^handle matched274 +)
    (<p3> ^argnum 3 +)
    (<p8> ^conditions <n1> + ^conditions <n2> + ^conditions <n3> +
           ^aname matched274 +)
    (<n1> ^type attribute-of + ^name color + ^result <r1> + ^parameter <p6> +
           ^negative false + ^args <a1> + ^rtype single +
           ^return-type number +)
    (<r1> ^set <p4> +)
    (<p6> ^1 <p5> + ^2 <p7> + ^num 2 +)
    (<p5> ^type single + ^param-id 3 +)
    (<p7> ^type single + ^param-id 1 +)
    (<a1> ^2 <c3> + ^num 1 +)
    (<n2> ^type attribute-of + ^name color + ^result <r2> + ^parameter <p11> +
           ^negative false + ^args <a2> + ^rtype single +
           ^return-type number +)
    (<r2> ^set <p9> +)
    (<p11> ^1 <p10> + ^2 <p12> + ^num 2 +)
    (<p10> ^type single + ^param-id 3 +)
    (<p12> ^type single + ^param-id 2 +)
    (<a2> ^2 <c4> + ^num 1 +)
    (<c4> ^type attribute + ^name block + ^attribute category + ^result <r4> +
           ^parameter <p18> + ^negative false + ^args <a4> + ^rtype single +)
    (<r4> ^set <p17> +)
    (<p18> ^num 0 +)
    (<a4> ^1 <c5> + ^num 1 +)
    (<c5> ^type attribute + ^name object + ^attribute primitive +
           ^result <r5> + ^parameter <p19> + ^negative false + ^args <a3> +
           ^rtype single +)
    (<r5> ^set <r6> +)
    (<p19> ^num 0 +)
    (<c3> ^name object + ^attribute input-arg + ^result <r7> +
           ^parameter <p21> + ^negative false + ^args <a6> + ^rtype single +)
    (<r7> ^set <r8> +)
    (<p21> ^1 <p20> + ^num 1 +)
    (<p20> ^type single + ^param-id 1 +)
    (<n3> ^type state-pair + ^name on1 + ^attribute prepositions +
           ^result <r3> + ^parameter <p15> + ^negative false + ^args <a5> +
           ^rtype single +)
    (<r3> ^set <p13> +)
    (<p15> ^1 <p14> + ^2 <p16> + ^num 2 +)
    (<p14> ^type single + ^param-id 2 +)
    (<p16> ^type single + ^param-id 1 +)
    (<a5> ^1 <c4> + ^2 <c3> + ^num 2 +)
}

sp {chunk-multi*chunk-puzzle-impasse*apply*complete*snc*t44560-4
    :chunk
    (state <s1> ^retrieve-game jealous-husbands242 -^opponent <o*1>)
    -->
    (<s1> ^retrieve-handle all-crossed208 +)
}

sp {chunk-multi*chunk-puzzle-impasse*apply*complete*snc*t44560-3
    :chunk
    (state <s1> ^retrieve-game jealous-husbands242 -^opponent <o*1>)
    -->
    (<s1> ^retrieve-handle cross-river243 +)
}

sp {chunk-multi*chunk-puzzle-impasse*apply*complete*snc*t44560-2
    :chunk
    (state <s1> ^retrieve-game jealous-husbands242 -^opponent <o*1>)
    -->
    (<s1> ^retrieve-handle cross-two249 +)
}

sp {chunk-multi*chunk-puzzle-impasse*apply*complete*snc*t44560-1
    :chunk
    (state <s1> ^retrieve-game jealous-husbands242 -^opponent <o*1>)
    -->
    (<s1> ^retrieve-handle failure-default268 +)
}

sp {chunk-multi*chunk-predicate-impasse*apply*complete*action*snc*t44548-1
    :chunk
    (state <s1> ^gtype action ^retrieve-handle cross-two249)
    -->
    (<s1> ^action <p1> +)
    (<p1> ^potential-args <p2> + ^parameter-set <p3> + ^formated predicate +
           ^primary-rtype single + ^nlp-set <p11> + ^verb-structure <v2> +
           ^aname cross-two249 + ^handle cross-two249 +)
    (<p3> ^argnum 5 +)
    (<p11> ^conditions <n1> + ^conditions <n2> + ^conditions <c8> +
           ^conditions <c11> + ^aname cross-two249 +)
    (<n1> ^type state-pair + ^name on1 + ^attribute prepositions +
           ^result <r1> + ^parameter <p6> + ^negative false + ^args <a3> +
           ^rtype single +)
    (<r1> ^set <p4> +)
    (<p6> ^1 <p5> + ^2 <p7> + ^num 2 +)
    (<p5> ^type single + ^param-id 3 +)
    (<p7> ^type single + ^param-id 1 +)
    (<a3> ^1 <c1> + ^2 <c3> + ^num 2 +)
    (<c1> ^type attribute + ^name block + ^attribute category + ^result <r2> +
           ^parameter <p9> + ^negative false + ^args <a2> + ^rtype single +)
    (<r2> ^set <p8> +)
    (<p9> ^num 0 +)
    (<a2> ^1 <c2> + ^num 1 +)
    (<c2> ^type attribute + ^name object + ^attribute primitive +
           ^result <r3> + ^parameter <p10> + ^negative false + ^args <a1> +
           ^rtype single +)
    (<r3> ^set <r4> +)
    (<p10> ^num 0 +)
    (<c3> ^type concept + ^name current + ^attribute predicate +
           ^result <r9> + ^parameter <p20> + ^negative false + ^args <a9> +
           ^rtype single +)
    (<r9> ^set <p19> +)
    (<p20> ^num 0 +)
    (<a9> ^1 <c6> + ^num 1 +)
    (<c6> ^type attribute + ^name bank1 + ^attribute shape + ^result <r10> +
           ^parameter <p22> + ^negative false + ^args <a8> + ^rtype single +)
    (<r10> ^set <p21> +)
    (<p22> ^num 0 +)
    (<a8> ^1 <c7> + ^num 1 +)
    (<c7> ^type attribute + ^name object + ^attribute primitive +
           ^result <r11> + ^parameter <p24> + ^negative false + ^args <a7> +
           ^rtype single +)
    (<r11> ^set <p23> +)
    (<p24> ^num 0 +)
    (<n2> ^type state-pair + ^name on1 + ^attribute prepositions +
           ^result <r5> + ^parameter <p14> + ^negative false + ^args <a6> +
           ^rtype single +)
    (<r5> ^set <p12> +)
    (<p14> ^1 <p13> + ^2 <p15> + ^num 2 +)
    (<p13> ^type single + ^param-id 2 +)
    (<p15> ^type single + ^param-id 1 +)
    (<a6> ^1 <c4> + ^2 <c3> + ^num 2 +)
    (<c4> ^type attribute + ^name block + ^attribute category + ^result <r6> +
           ^parameter <p17> + ^negative false + ^args <a5> + ^rtype single +)
    (<r6> ^set <p16> +)
    (<p17> ^num 0 +)
    (<a5> ^1 <c5> + ^num 1 +)
    (<c5> ^type attribute + ^name object + ^attribute primitive +
           ^result <r7> + ^parameter <p18> + ^negative false + ^args <a4> +
           ^rtype single +)
    (<r7> ^set <r8> +)
    (<p18> ^num 0 +)
    (<c8> ^type concept + ^name opposite + ^attribute predicate +
           ^result <r12> + ^parameter <p27> + ^negative false + ^args <a12> +
           ^rtype single +)
    (<r12> ^set <p25> +)
    (<p27> ^1 <p26> + ^num 1 +)
    (<p26> ^type single + ^param-id 5 +)
    (<a12> ^1 <c9> + ^num 1 +)
    (<c9> ^type attribute + ^name bank1 + ^attribute shape + ^result <r13> +
           ^parameter <p29> + ^negative false + ^args <a11> + ^rtype single +)
    (<r13> ^set <p28> +)
    (<p29> ^num 0 +)
    (<a11> ^1 <c10> + ^num 1 +)
    (<c10> ^type attribute + ^name object + ^attribute primitive +
           ^result <r14> + ^parameter <p31> + ^negative false + ^args <a10> +
           ^rtype single +)
    (<r14> ^set <p30> +)
    (<p31> ^num 0 +)
    (<c11> ^type attribute + ^name boat1 + ^attribute shape + ^result <r15> +
           ^parameter <p34> + ^negative false + ^args <a14> + ^rtype single +)
    (<r15> ^set <p32> +)
    (<p34> ^1 <p33> + ^num 1 +)
    (<p33> ^type single + ^param-id 4 +)
    (<a14> ^1 <c12> + ^num 1 +)
    (<c12> ^type attribute + ^name object + ^attribute primitive +
           ^result <r16> + ^parameter <p36> + ^negative false + ^args <a13> +
           ^rtype single +)
    (<r16> ^set <p35> +)
    (<p36> ^num 0 +)
    (<v2> ^1 <v1> + ^2 <v3> + ^3 <v4> +)
    (<v1> ^1 3 + ^2 5 + ^verb-name move1 + ^verb-prep on1 +)
    (<v3> ^1 4 + ^2 5 + ^verb-name move1 + ^verb-prep on1 +)
    (<v4> ^1 2 + ^2 5 + ^verb-name move1 + ^verb-prep on1 +)
}

sp {chunk-multi*chunk-predicate-impasse*apply*complete*failure*snc*t44540-1
    :chunk
    (state <s1> ^gtype failure ^retrieve-handle failure-default268)
    -->
    (<s1> ^failure <p1> +)
    (<p1> ^potential-args <p2> + ^parameter-set <p3> + ^formated predicate +
           ^primary-rtype single + ^nlp-set <p8> + ^aname failure-default268 +
           ^handle failure-default268 +)
    (<p3> ^argnum 4 +)
    (<p8> ^conditions <n1> + ^conditions <n2> + ^conditions <n3> +
           ^conditions <n4> + ^aname failure-default268 +)
    (<n1> ^type state-pair + ^name on1 + ^attribute prepositions +
           ^result <r1> + ^parameter <p6> + ^negative false + ^args <a1> +
           ^rtype single +)
    (<r1> ^set <p4> +)
    (<p6> ^1 <p5> + ^2 <p7> + ^num 2 +)
    (<p5> ^type single + ^param-id 1 +)
    (<p7> ^type single + ^param-id 2 +)
    (<a1> ^1 <c1> + ^2 <c2> + ^num 2 +)
    (<n2> ^type state-pair + ^name on1 + ^attribute prepositions +
           ^result <r2> + ^parameter <p11> + ^negative false + ^args <a4> +
           ^rtype single +)
    (<r2> ^set <p9> +)
    (<p11> ^1 <p10> + ^2 <p12> + ^num 2 +)
    (<p10> ^type single + ^param-id 3 +)
    (<p12> ^type single + ^param-id 2 +)
    (<a4> ^1 <c3> + ^2 <c2> + ^num 2 +)
    (<c3> ^type attribute + ^name man1 + ^attribute shape + ^result <r3> +
           ^parameter <p14> + ^negative false + ^args <a3> + ^rtype single +)
    (<r3> ^set <p13> +)
    (<p14> ^num 0 +)
    (<a3> ^1 <c4> + ^num 1 +)
    (<c4> ^type attribute + ^name object + ^attribute primitive +
           ^result <r4> + ^parameter <p16> + ^negative false + ^args <a2> +
           ^rtype single +)
    (<r4> ^set <p15> +)
    (<p16> ^num 0 +)
    (<n3> ^type concept + ^name husband + ^attribute predicate +
           ^result <r6> + ^parameter <p23> + ^negative false + ^args <a7> +
           ^rtype single +)
    (<r6> ^set <p21> +)
    (<p23> ^1 <p22> + ^2 <p24> + ^num 2 +)
    (<p22> ^type single + ^param-id 4 +)
    (<p24> ^type single + ^param-id 1 +)
    (<c1> ^type attribute + ^name woman1 + ^attribute shape + ^result <r7> +
           ^parameter <p26> + ^negative false + ^args <a6> + ^rtype single +)
    (<r7> ^set <p25> +)
    (<p26> ^num 0 +)
    (<a6> ^1 <c5> + ^num 1 +)
    (<c5> ^type attribute + ^name object + ^attribute primitive +
           ^result <r8> + ^parameter <p28> + ^negative false + ^args <a5> +
           ^rtype single +)
    (<r8> ^set <p27> +)
    (<p28> ^num 0 +)
    (<a7> ^2 <c1> + ^num 1 +)
    (<c2> ^type attribute + ^name bank1 + ^attribute shape + ^result <r9> +
           ^parameter <p30> + ^negative false + ^args <a10> + ^rtype single +)
    (<r9> ^set <p29> +)
    (<p30> ^num 0 +)
    (<a10> ^1 <c6> + ^num 1 +)
    (<c6> ^type attribute + ^name object + ^attribute primitive +
           ^result <r10> + ^parameter <p32> + ^negative false + ^args <a9> +
           ^rtype single +)
    (<r10> ^set <p31> +)
    (<p32> ^num 0 +)
    (<n4> ^type state-pair + ^name on1 + ^attribute prepositions +
           ^result <r5> + ^parameter <p19> + ^negative true + ^args <a8> +
           ^rtype single +)
    (<r5> ^set <p17> +)
    (<p19> ^1 <p18> + ^2 <p20> + ^num 2 +)
    (<p18> ^type single + ^param-id 4 +)
    (<p20> ^type single + ^param-id 2 +)
    (<a8> ^1 <n3> + ^2 <c2> + ^num 2 +)
}

sp {chunk-multi*chunk-predicate-impasse*apply*complete*action*snc*t44532-1
    :chunk
    (state <s1> ^gtype action ^retrieve-handle cross-river243)
    -->
    (<s1> ^action <p1> +)
    (<p1> ^potential-args <p2> + ^parameter-set <p3> + ^formated predicate +
           ^primary-rtype single + ^nlp-set <p17> + ^verb-structure <v2> +
           ^aname cross-river243 + ^handle cross-river243 +)
    (<p3> ^argnum 4 +)
    (<p17> ^conditions <n1> + ^conditions <c6> + ^conditions <c9> +
           ^aname cross-river243 +)
    (<n1> ^type state-pair + ^name on1 + ^attribute prepositions +
           ^result <r1> + ^parameter <p6> + ^negative false + ^args <a3> +
           ^rtype single +)
    (<r1> ^set <p4> +)
    (<p6> ^1 <p5> + ^2 <p7> + ^num 2 +)
    (<p5> ^type single + ^param-id 4 +)
    (<p7> ^type single + ^param-id 3 +)
    (<a3> ^1 <c1> + ^2 <c3> + ^num 2 +)
    (<c1> ^type attribute + ^name block + ^attribute category + ^result <r2> +
           ^parameter <p9> + ^negative false + ^args <a2> + ^rtype single +)
    (<r2> ^set <p8> +)
    (<p9> ^num 0 +)
    (<a2> ^1 <c2> + ^num 1 +)
    (<c2> ^type attribute + ^name object + ^attribute primitive +
           ^result <r3> + ^parameter <p10> + ^negative false + ^args <a1> +
           ^rtype single +)
    (<r3> ^set <r4> +)
    (<p10> ^num 0 +)
    (<c3> ^type concept + ^name current + ^attribute predicate +
           ^result <r5> + ^parameter <p12> + ^negative false + ^args <a6> +
           ^rtype single +)
    (<r5> ^set <p11> +)
    (<p12> ^num 0 +)
    (<a6> ^1 <c4> + ^num 1 +)
    (<c4> ^type attribute + ^name bank1 + ^attribute shape + ^result <r6> +
           ^parameter <p14> + ^negative false + ^args <a5> + ^rtype single +)
    (<r6> ^set <p13> +)
    (<p14> ^num 0 +)
    (<a5> ^1 <c5> + ^num 1 +)
    (<c5> ^type attribute + ^name object + ^attribute primitive +
           ^result <r7> + ^parameter <p16> + ^negative false + ^args <a4> +
           ^rtype single +)
    (<r7> ^set <p15> +)
    (<p16> ^num 0 +)
    (<c6> ^type concept + ^name opposite + ^attribute predicate +
           ^result <r8> + ^parameter <p20> + ^negative false + ^args <a9> +
           ^rtype single +)
    (<r8> ^set <p18> +)
    (<p20> ^1 <p19> + ^num 1 +)
    (<p19> ^type single + ^param-id 2 +)
    (<a9> ^1 <c7> + ^num 1 +)
    (<c7> ^type attribute + ^name bank1 + ^attribute shape + ^result <r9> +
           ^parameter <p22> + ^negative false + ^args <a8> + ^rtype single +)
    (<r9> ^set <p21> +)
    (<p22> ^num 0 +)
    (<a8> ^1 <c8> + ^num 1 +)
    (<c8> ^type attribute + ^name object + ^attribute primitive +
           ^result <r10> + ^parameter <p24> + ^negative false + ^args <a7> +
           ^rtype single +)
    (<r10> ^set <p23> +)
    (<p24> ^num 0 +)
    (<c9> ^type attribute + ^name boat1 + ^attribute shape + ^result <r11> +
           ^parameter <p27> + ^negative false + ^args <a11> + ^rtype single +)
    (<r11> ^set <p25> +)
    (<p27> ^1 <p26> + ^num 1 +)
    (<p26> ^type single + ^param-id 1 +)
    (<a11> ^1 <c10> + ^num 1 +)
    (<c10> ^type attribute + ^name object + ^attribute primitive +
           ^result <r12> + ^parameter <p29> + ^negative false + ^args <a10> +
           ^rtype single +)
    (<r12> ^set <p28> +)
    (<p29> ^num 0 +)
    (<v2> ^1 <v1> + ^2 <v3> +)
    (<v1> ^1 1 + ^2 2 + ^verb-name move1 + ^verb-prep on1 +)
    (<v3> ^1 4 + ^2 2 + ^verb-name move1 + ^verb-prep on1 +)
}

sp {chunk-multi*chunk-predicate-impasse*apply*complete*snc*t44114-1
    :chunk
    (state <s1> ^gtype <c1> ^<c1> <g1>)
    (<g1> ^condition <n1>)
    (<n1> ^name husband ^type concept ^attribute predicate)
    -->
    (<s1> ^predicate <p1> + ^gtype predicate +)
    (<p1> ^link <n1> + ^potential-args <p2> + ^parameter-set <p3> +
           ^formated predicate + ^primary-rtype single + ^nlp-set <p12> +
           ^aname husband + ^handle husband +)
    (<p3> ^argnum 3 +)
    (<p12> ^conditions <n2> + ^conditions <n3> + ^aname husband +)
    (<n2> ^type attribute-of + ^name last-name + ^result <r1> +
           ^parameter <p6> + ^negative false + ^args <a3> + ^rtype single +
           ^return-type number +)
    (<r1> ^set <p4> +)
    (<p6> ^1 <p5> + ^2 <p7> + ^num 2 +)
    (<p5> ^type single + ^param-id 3 +)
    (<p7> ^type single + ^param-id 1 +)
    (<a3> ^2 <c2> + ^num 1 +)
    (<c2> ^type attribute + ^name man1 + ^attribute shape + ^result <r2> +
           ^parameter <p9> + ^negative false + ^args <a2> + ^rtype single +)
    (<r2> ^set <p8> +)
    (<p9> ^num 0 +)
    (<a2> ^1 <c3> + ^num 1 +)
    (<c3> ^type attribute + ^name object + ^attribute primitive +
           ^result <r3> + ^parameter <p11> + ^negative false + ^args <a1> +
           ^rtype single +)
    (<r3> ^set <p10> +)
    (<p11> ^num 0 +)
    (<n3> ^type attribute-of + ^name last-name + ^result <r4> +
           ^parameter <p15> + ^negative false + ^args <a5> + ^rtype single +
           ^return-type number +)
    (<r4> ^set <p13> +)
    (<p15> ^1 <p14> + ^2 <p16> + ^num 2 +)
    (<p14> ^type single + ^param-id 3 +)
    (<p16> ^type single + ^param-id 2 +)
    (<a5> ^2 <c4> + ^num 1 +)
    (<c4> ^name object + ^attribute input-arg + ^result <r5> +
           ^parameter <p18> + ^negative false + ^args <a4> + ^rtype single +)
    (<r5> ^set <r6> +)
    (<p18> ^1 <p17> + ^num 1 +)
    (<p17> ^type single + ^param-id 2 +)
}

sp {chunk-multi*chunk-puzzle-impasse*apply*complete*snc*t39399-2
    :chunk
    (state <s1> ^retrieve-game fifteen-puzzle-iso239 -^opponent <o*1>)
    -->
    (<s1> ^retrieve-handle slide-block102 +)
}

sp {chunk-multi*chunk-puzzle-impasse*apply*complete*snc*t39399-1
    :chunk
    (state <s1> ^retrieve-game fifteen-puzzle-iso239 -^opponent <o*1>)
    -->
    (<s1> ^retrieve-handle goal-default241 +)
}

sp {chunk-multi*chunk-predicate-impasse*apply*complete*goal*snc*t39390-1
    :chunk
    (state <s1> ^gtype goal ^retrieve-handle goal-default241)
    -->
    (<s1> ^goal <p1> +)
    (<p1> ^potential-args <p2> + ^parameter-set <p3> + ^formated predicate +
           ^primary-rtype set + ^nlp-set <p14> + ^aname goal-default241 +
           ^handle goal-default241 +)
    (<p3> ^argnum 2 +)
    (<p14> ^conditions <n1> + ^conditions <n2> + ^aname goal-default241 +)
    (<n1> ^type function + ^name count + ^result <r1> + ^parameter <p6> +
           ^negative false + ^args <a4> + ^rtype single +
           ^return-type number + ^function soar-count +)
    (<r1> ^set <p4> +)
    (<p6> ^1 <p5> + ^2 <p7> + ^num 2 +)
    (<p5> ^type single + ^param-id 2 +)
    (<p7> ^type set + ^param-id 1 +)
    (<a4> ^2 <c1> + ^num 1 +)
    (<c1> ^type concept + ^name matched + ^attribute predicate +
           ^result <r2> + ^parameter <p10> + ^negative false + ^args <a3> +
           ^rtype set +)
    (<r2> ^set <p8> +)
    (<p10> ^1 <p9> + ^num 1 +)
    (<p9> ^type set + ^param-id 1 +)
    (<a3> ^1 <c2> + ^num 1 +)
    (<c2> ^type attribute + ^name location + ^attribute category +
           ^result <r3> + ^parameter <p12> + ^negative false + ^args <a2> +
           ^rtype single +)
    (<r3> ^set <p11> +)
    (<p12> ^num 0 +)
    (<a2> ^1 <c3> + ^num 1 +)
    (<c3> ^type attribute + ^name object + ^attribute primitive +
           ^result <r4> + ^parameter <p13> + ^negative false + ^args <a1> +
           ^rtype single +)
    (<r4> ^set <r5> +)
    (<p13> ^num 0 +)
    (<n2> ^name number + ^result <r6> + ^parameter <p16> + ^negative false +
           ^args <a5> + ^rtype single + ^return-type number +)
    (<r6> ^set <s2> +)
    (<s2> ^instance <i1> +)
    (<i1> ^1 15 +)
    (<p16> ^1 <p15> + ^num 1 +)
    (<p15> ^type single + ^param-id 2 +)
}

sp {chunk-multi*chunk-puzzle-impasse*apply*complete*snc*t38110-4
    :chunk
    (state <s1> ^retrieve-game connect-3238 -^opponent <o*1>)
    -->
    (<s1> ^retrieve-handle bottom-drop48 +)
}

sp {chunk-multi*chunk-puzzle-impasse*apply*complete*snc*t38110-3
    :chunk
    (state <s1> ^retrieve-game connect-3238 -^opponent <o*1>)
    -->
    (<s1> ^retrieve-handle stack-drop62 +)
}

sp {chunk-multi*chunk-puzzle-impasse*apply*complete*snc*t38110-2
    :chunk
    (state <s1> ^retrieve-game connect-3238 -^opponent <o*1>)
    -->
    (<s1> ^retrieve-handle three-in-a-row130 +)
}

sp {chunk-multi*chunk-puzzle-impasse*apply*complete*snc*t38110-1
    :chunk
    (state <s1> ^retrieve-game connect-3238 -^opponent <o*1>)
    -->
    (<s1> ^retrieve-handle enemy-3-in-a-row132 +)
}

sp {chunk-multi*chunk-puzzle-impasse*apply*complete*snc*t36442-2
    :chunk
    (state <s1> ^retrieve-game tower-of-hanoi-3232 -^opponent <o*1>)
    -->
    (<s1> ^retrieve-handle stack-block212 +)
}

sp {chunk-multi*chunk-puzzle-impasse*apply*complete*snc*t36442-1
    :chunk
    (state <s1> ^retrieve-game tower-of-hanoi-3232 -^opponent <o*1>)
    -->
    (<s1> ^retrieve-handle goal-default237 +)
}

sp {chunk-multi*chunk-predicate-impasse*apply*complete*goal*snc*t36430-1
    :chunk
    (state <s1> ^gtype goal ^retrieve-handle goal-default237)
    -->
    (<s1> ^goal <p1> +)
    (<p1> ^potential-args <p2> + ^parameter-set <p3> + ^formated predicate +
           ^primary-rtype single + ^nlp-set <p8> + ^aname goal-default237 +
           ^handle goal-default237 +)
    (<p3> ^argnum 3 +)
    (<p8> ^conditions <n1> + ^conditions <n2> + ^conditions <n3> +
           ^aname goal-default237 +)
    (<n1> ^type state-pair + ^name on1 + ^attribute prepositions +
           ^result <r1> + ^parameter <p6> + ^negative false + ^args <a1> +
           ^rtype single +)
    (<r1> ^set <p4> +)
    (<p6> ^1 <p5> + ^2 <p7> + ^num 2 +)
    (<p5> ^type single + ^param-id 2 +)
    (<p7> ^type single + ^param-id 3 +)
    (<a1> ^1 <c1> + ^2 <c2> + ^num 2 +)
    (<c1> ^type attribute + ^name medium1 + ^attribute size + ^result <r7> +
           ^parameter <p19> + ^negative false + ^args <a8> + ^rtype single +)
    (<r7> ^set <p18> +)
    (<p19> ^num 0 +)
    (<a8> ^1 <c6> + ^num 1 +)
    (<c6> ^type attribute + ^name block + ^attribute category + ^result <r8> +
           ^parameter <p21> + ^negative false + ^args <a7> + ^rtype single +)
    (<r8> ^set <p20> +)
    (<p21> ^num 0 +)
    (<a7> ^1 <c7> + ^num 1 +)
    (<c7> ^type attribute + ^name object + ^attribute primitive +
           ^result <r9> + ^parameter <p22> + ^negative false + ^args <a6> +
           ^rtype single +)
    (<r9> ^set <r10> +)
    (<p22> ^num 0 +)
    (<n2> ^type state-pair + ^name on1 + ^attribute prepositions +
           ^result <r2> + ^parameter <p11> + ^negative false + ^args <a5> +
           ^rtype single +)
    (<r2> ^set <p9> +)
    (<p11> ^1 <p10> + ^2 <p12> + ^num 2 +)
    (<p10> ^type single + ^param-id 1 +)
    (<p12> ^type single + ^param-id 2 +)
    (<a5> ^1 <c3> + ^2 <c1> + ^num 2 +)
    (<c3> ^type attribute + ^name small1 + ^attribute size + ^result <r3> +
           ^parameter <p14> + ^negative false + ^args <a4> + ^rtype single +)
    (<r3> ^set <p13> +)
    (<p14> ^num 0 +)
    (<a4> ^1 <c4> + ^num 1 +)
    (<c4> ^type attribute + ^name block + ^attribute category + ^result <r4> +
           ^parameter <p16> + ^negative false + ^args <a3> + ^rtype single +)
    (<r4> ^set <p15> +)
    (<p16> ^num 0 +)
    (<a3> ^1 <c5> + ^num 1 +)
    (<c5> ^type attribute + ^name object + ^attribute primitive +
           ^result <r5> + ^parameter <p17> + ^negative false + ^args <a2> +
           ^rtype single +)
    (<r5> ^set <r6> +)
    (<p17> ^num 0 +)
    (<c2> ^type attribute + ^name large1 + ^attribute size + ^result <r12> +
           ^parameter <p27> + ^negative false + ^args <a11> + ^rtype single +)
    (<r12> ^set <p26> +)
    (<p27> ^num 0 +)
    (<a11> ^1 <c8> + ^num 1 +)
    (<c8> ^type attribute + ^name block + ^attribute category +
           ^result <r13> + ^parameter <p29> + ^negative false + ^args <a10> +
           ^rtype single +)
    (<r13> ^set <p28> +)
    (<p29> ^num 0 +)
    (<a10> ^1 <c9> + ^num 1 +)
    (<c9> ^type attribute + ^name object + ^attribute primitive +
           ^result <r14> + ^parameter <p30> + ^negative false + ^args <a9> +
           ^rtype single +)
    (<r14> ^set <r15> +)
    (<p30> ^num 0 +)
    (<n3> ^type state-pair + ^name on1 + ^attribute prepositions +
           ^result <r11> + ^parameter <p25> + ^negative false + ^args <a12> +
           ^rtype single +)
    (<r11> ^set <p23> +)
    (<p25> ^1 <p24> + ^num 1 +)
    (<p24> ^type single + ^param-id 3 +)
    (<a12> ^1 <c2> + ^2 <c10> + ^num 2 +)
    (<c10> ^type attribute + ^name blue1 + ^attribute color + ^result <r16> +
           ^parameter <p32> + ^negative false + ^args <a15> + ^rtype single +)
    (<r16> ^set <p31> +)
    (<p32> ^num 0 +)
    (<a15> ^1 <c11> + ^num 1 +)
    (<c11> ^type attribute + ^name location + ^attribute category +
           ^result <r17> + ^parameter <p34> + ^negative false + ^args <a14> +
           ^rtype single +)
    (<r17> ^set <p33> +)
    (<p34> ^num 0 +)
    (<a14> ^1 <c12> + ^num 1 +)
    (<c12> ^type attribute + ^name object + ^attribute primitive +
           ^result <r18> + ^parameter <p35> + ^negative false + ^args <a13> +
           ^rtype single +)
    (<r18> ^set <r19> +)
    (<p35> ^num 0 +)
}

sp {chunk-multi*chunk-puzzle-impasse*apply*complete*snc*t34673-3
    :chunk
    (state <s1> ^retrieve-game risk222 -^opponent <o*1>)
    -->
    (<s1> ^retrieve-handle action-default227 +)
}

sp {chunk-multi*chunk-puzzle-impasse*apply*complete*snc*t34673-2
    :chunk
    (state <s1> ^retrieve-game risk222 -^opponent <o*1>)
    -->
    (<s1> ^retrieve-handle goal-default229 +)
}

sp {chunk-multi*chunk-puzzle-impasse*apply*complete*snc*t34673-1
    :chunk
    (state <s1> ^retrieve-game risk222 -^opponent <o*1>)
    -->
    (<s1> ^retrieve-handle failure-default231 +)
}

sp {chunk-multi*chunk-predicate-impasse*apply*complete*failure*snc*t34664-1
    :chunk
    (state <s1> ^gtype failure ^retrieve-handle failure-default231)
    -->
    (<s1> ^failure <p1> +)
    (<p1> ^potential-args <p2> + ^parameter-set <p3> + ^formated predicate +
           ^primary-rtype set + ^nlp-set <p11> + ^aname failure-default231 +
           ^handle failure-default231 +)
    (<p3> ^argnum 1 +)
    (<p11> ^conditions <n1> + ^aname failure-default231 +)
    (<n1> ^type concept + ^name occupied + ^attribute predicate +
           ^result <r1> + ^parameter <p6> + ^negative false + ^args <a3> +
           ^rtype set +)
    (<r1> ^set <p4> +)
    (<p6> ^1 <p5> + ^num 1 +)
    (<p5> ^type set + ^param-id 1 +)
    (<a3> ^1 <c1> + ^num 1 +)
    (<c1> ^type attribute + ^name location + ^attribute category +
           ^result <r2> + ^parameter <p9> + ^negative false + ^args <a2> +
           ^rtype set +)
    (<r2> ^set <p7> +)
    (<p9> ^1 <p8> + ^num 1 +)
    (<p8> ^type set + ^param-id 1 +)
    (<a2> ^1 <c2> + ^num 1 +)
    (<c2> ^type attribute + ^name object + ^attribute primitive +
           ^result <r3> + ^parameter <p10> + ^negative false + ^args <a1> +
           ^rtype single +)
    (<r3> ^set <r4> +)
    (<p10> ^num 0 +)
}

sp {chunk-multi*chunk-predicate-impasse*apply*complete*goal*snc*t34656-1
    :chunk
    (state <s1> ^gtype goal ^retrieve-handle goal-default229)
    -->
    (<s1> ^goal <p1> +)
    (<p1> ^potential-args <p2> + ^parameter-set <p3> + ^formated predicate +
           ^primary-rtype set + ^nlp-set <p11> + ^aname goal-default229 +
           ^handle goal-default229 +)
    (<p3> ^argnum 1 +)
    (<p11> ^conditions <n1> + ^aname goal-default229 +)
    (<n1> ^type concept + ^name captured + ^attribute predicate +
           ^result <r1> + ^parameter <p6> + ^negative false + ^args <a3> +
           ^rtype set +)
    (<r1> ^set <p4> +)
    (<p6> ^1 <p5> + ^num 1 +)
    (<p5> ^type set + ^param-id 1 +)
    (<a3> ^1 <c1> + ^num 1 +)
    (<c1> ^type attribute + ^name location + ^attribute category +
           ^result <r2> + ^parameter <p9> + ^negative false + ^args <a2> +
           ^rtype set +)
    (<r2> ^set <p7> +)
    (<p9> ^1 <p8> + ^num 1 +)
    (<p8> ^type set + ^param-id 1 +)
    (<a2> ^1 <c2> + ^num 1 +)
    (<c2> ^type attribute + ^name object + ^attribute primitive +
           ^result <r3> + ^parameter <p10> + ^negative false + ^args <a1> +
           ^rtype single +)
    (<r3> ^set <r4> +)
    (<p10> ^num 0 +)
}

sp {chunk-multi*chunk-predicate-impasse*apply*complete*action*snc*t34648-1
    :chunk
    (state <s1> ^gtype action ^retrieve-handle action-default227)
    -->
    (<s1> ^action <p1> +)
    (<p1> ^potential-args <p2> + ^parameter-set <p3> + ^formated predicate +
           ^primary-rtype single + ^nlp-set <p4> + ^verb-structure <v2> +
           ^aname action-default227 + ^handle action-default227 +)
    (<p3> ^argnum 4 +)
    (<p4> ^conditions <n1> + ^conditions <n2> + ^conditions <n3> +
           ^conditions <n4> + ^aname action-default227 +)
    (<n2> ^type state-pair + ^name near1 + ^attribute prepositions +
           ^result <r1> + ^parameter <p7> + ^negative false + ^args <a4> +
           ^rtype single +)
    (<r1> ^set <p5> +)
    (<p7> ^1 <p6> + ^2 <p8> + ^num 2 +)
    (<p6> ^type single + ^param-id 3 +)
    (<p8> ^type single + ^param-id 1 +)
    (<a4> ^1 <c1> + ^2 <c4> + ^num 2 +)
    (<c1> ^type concept + ^name occupied + ^attribute predicate +
           ^result <r2> + ^parameter <p10> + ^negative false + ^args <a3> +
           ^rtype single +)
    (<r2> ^set <p9> +)
    (<p10> ^num 0 +)
    (<a3> ^1 <c2> + ^num 1 +)
    (<c2> ^type attribute + ^name location + ^attribute category +
           ^result <r3> + ^parameter <p12> + ^negative false + ^args <a2> +
           ^rtype single +)
    (<r3> ^set <p11> +)
    (<p12> ^num 0 +)
    (<a2> ^1 <c3> + ^num 1 +)
    (<c3> ^type attribute + ^name object + ^attribute primitive +
           ^result <r4> + ^parameter <p13> + ^negative false + ^args <a1> +
           ^rtype single +)
    (<r4> ^set <r5> +)
    (<p13> ^num 0 +)
    (<n3> ^type function + ^name count + ^result <r7> + ^parameter <p19> +
           ^negative false + ^args <a11> + ^rtype single +
           ^return-type number + ^function soar-count +)
    (<r7> ^set <p17> +)
    (<p19> ^1 <p18> + ^2 <p20> + ^num 2 +)
    (<p18> ^type single + ^param-id 4 +)
    (<p20> ^type set + ^param-id 2 +)
    (<n1> ^type state-pair + ^name on1 + ^attribute prepositions +
           ^result <r8> + ^parameter <p23> + ^negative false + ^args <a7> +
           ^rtype set +)
    (<r8> ^set <p21> +)
    (<p23> ^1 <p22> + ^2 <p24> + ^num 2 +)
    (<p22> ^type set + ^param-id 2 +)
    (<p24> ^type single + ^param-id 1 +)
    (<c4> ^type concept + ^name captured + ^attribute predicate +
           ^result <r12> + ^parameter <p29> + ^negative false + ^args <a10> +
           ^rtype single +)
    (<r12> ^set <p28> +)
    (<p29> ^num 0 +)
    (<a10> ^1 <c7> + ^num 1 +)
    (<c7> ^type attribute + ^name location + ^attribute category +
           ^result <r13> + ^parameter <p31> + ^negative false + ^args <a9> +
           ^rtype single +)
    (<r13> ^set <p30> +)
    (<p31> ^num 0 +)
    (<a9> ^1 <c8> + ^num 1 +)
    (<c8> ^type attribute + ^name object + ^attribute primitive +
           ^result <r14> + ^parameter <p32> + ^negative false + ^args <a8> +
           ^rtype single +)
    (<a7> ^1 <c5> + ^2 <c4> + ^num 2 +)
    (<c5> ^type attribute + ^name block + ^attribute category + ^result <r9> +
           ^parameter <p26> + ^negative false + ^args <a6> + ^rtype single +)
    (<r9> ^set <p25> +)
    (<p26> ^num 0 +)
    (<a6> ^1 <c6> + ^num 1 +)
    (<c6> ^type attribute + ^name object + ^attribute primitive +
           ^result <r10> + ^parameter <p27> + ^negative false + ^args <a5> +
           ^rtype single +)
    (<r10> ^set <r11> +)
    (<p27> ^num 0 +)
    (<a11> ^2 <n1> + ^num 1 +)
    (<n4> ^type function + ^name greater + ^result <r6> + ^parameter <p16> +
           ^negative false + ^args <a12> + ^rtype single +
           ^return-type number + ^function soar-greater +)
    (<r6> ^set <p14> +)
    (<p16> ^1 <p15> + ^num 1 +)
    (<p15> ^type single + ^param-id 4 +)
    (<a12> ^1 <n3> + ^2 <f1> + ^num 2 +)
    (<f1> ^name number + ^result <r15> + ^parameter <p33> + ^negative false +
           ^args <a12> + ^rtype single + ^return-type number +)
    (<r15> ^set <s2> +)
    (<s2> ^instance <i1> +)
    (<i1> ^1 1 +)
    (<p33> ^num 0 +)
    (<v2> ^1 <v1> +)
    (<v1> ^1 3 + ^verb-name attack + ^verb-prep attack +)
}

sp {chunk*justification-23761*onc*t33604-1
    :chunk
    (state <s1> ^list <l1> ^gtype <c2> ^gtype <c1> ^<c2> <a1> ^<c1> <a1>)
    (<a1> ^condition <n1>)
    (<n1> ^function soar-greater ^type function ^args <a2> ^parameter <p1>
          ^negative <c3> ^result <r3> ^name <c4>)
    (<a2> ^num 2 ^2 <f1> ^1 <n2>)
    (<p1> ^num 1)
    (<l1> ^game <g1>)
    (<r3> ^set <p4>)
    (<n2> ^result <r2>)
    (<r2> ^set <p2>)
    (<p2> ^instance <p3>)
    (<p3> ^1 <c6>)
    (<f1> ^result <r1>)
    (<r1> ^set <s2>)
    (<s2> ^instance <i1>)
    (<i1> ^1 { < <c6> <c5> })
    -->
    (<p4> ^instance <i2> +)
    (<i2> ^1 <c6> +)
}

sp {chunk*justification-23736*onc*t33599-2
    :chunk
    (state <s1> ^list <l1> ^gtype <c3> ^gtype <c1> ^<c3> <a1> ^<c1> <a1>
          ^world <n1>)
    (<a1> ^condition <n6>)
    (<n6> ^rtype set ^negative false ^type state-pair ^args <a2>
          ^parameter <p2> ^name <c2> ^result <r3> ^attribute <c4>)
    (<a2> ^num 2 ^2 <c5> ^1 <c6>)
    (<p2> ^num 2)
    (<c5> -^rtype set ^result <r1>)
    (<c6> -^rtype set ^result <r2>)
    (<l1> ^game <g1>)
    (<n1> ^predicates <p1>)
    (<p1> ^predicate <n2>)
    (<n2> ^handle <c2> ^instance <n3>)
    (<n3> ^2 <n4> ^1 <n5>)
    (<r3> ^set <p5>)
    (<p5> ^instance <i3>)
    (<i3> ^2 <n4> ^1 <s2>)
    (<r2> ^set <p4>)
    (<p4> ^instance <i2>)
    (<i2> ^1 <n5>)
    (<r1> ^set <p3>)
    (<p3> ^instance <i1>)
    (<i1> ^1 <n4>)
    -->
    (<s2> ^object <n5> +)
}

sp {chunk*justification-23724*t33599-1
    :chunk
    (state <s1> ^list <l1> ^gtype <c2> ^gtype <c1> ^<c2> <a1> ^<c1> <a1>)
    (<a1> ^condition <n1>)
    (<n1> ^rtype set ^negative false ^type state-pair ^args <a2>
          ^parameter <p1> ^result <r2> ^name <c3> ^attribute <c4>)
    (<a2> ^num 2 ^2 <c5> ^1 <c6>)
    (<p1> ^num 2)
    (<c5> -^rtype set ^result <r1>)
    (<c6> -^rtype set)
    (<l1> ^game <g1>)
    (<r2> ^set <p3>)
    (<r1> ^set <p2>)
    (<p2> ^instance <i1>)
    (<i1> ^1 <n2>)
    -->
    (<p3> ^instance <i2> +)
    (<i2> ^2 <n2> + ^1 <s2> +)
}

sp {chunk-multi*chunk-puzzle-impasse*apply*complete*snc*t32415-2
    :chunk
    (state <s1> ^retrieve-game tower-of-hanoi-5211 -^opponent <o*1>)
    -->
    (<s1> ^retrieve-handle stack-block212 +)
}

sp {chunk-multi*chunk-puzzle-impasse*apply*complete*snc*t32415-1
    :chunk
    (state <s1> ^retrieve-game tower-of-hanoi-5211 -^opponent <o*1>)
    -->
    (<s1> ^retrieve-handle goal-default221 +)
}

sp {chunk-multi*chunk-predicate-impasse*apply*complete*action*snc*t32406-1
    :chunk
    (state <s1> ^gtype action ^retrieve-handle stack-block212)
    -->
    (<s1> ^action <p1> +)
    (<p1> ^potential-args <p2> + ^parameter-set <p3> + ^formated predicate +
           ^primary-rtype single + ^nlp-set <p17> + ^verb-structure <v2> +
           ^aname stack-block212 + ^handle stack-block212 +)
    (<p3> ^argnum 2 +)
    (<p17> ^conditions <n1> + ^aname stack-block212 +)
    (<n1> ^type state-pair + ^name larger-than1 + ^attribute prepositions +
           ^result <r1> + ^parameter <p6> + ^negative false + ^args <a3> +
           ^rtype single +)
    (<r1> ^set <p4> +)
    (<p6> ^1 <p5> + ^2 <p7> + ^num 2 +)
    (<p5> ^type single + ^param-id 2 +)
    (<p7> ^type single + ^param-id 1 +)
    (<a3> ^1 <c1> + ^2 <c3> + ^num 2 +)
    (<c1> ^type concept + ^name clear + ^attribute predicate + ^result <r2> +
           ^parameter <p9> + ^negative false + ^args <a2> + ^rtype single +)
    (<r2> ^set <p8> +)
    (<p9> ^num 0 +)
    (<a2> ^1 <c2> + ^num 1 +)
    (<c2> ^type attribute + ^name object + ^attribute primitive +
           ^result <r3> + ^parameter <p11> + ^negative false + ^args <a1> +
           ^rtype single +)
    (<r3> ^set <p10> +)
    (<p11> ^num 0 +)
    (<c3> ^type concept + ^name clear + ^attribute predicate + ^result <r4> +
           ^parameter <p13> + ^negative false + ^args <a6> + ^rtype single +)
    (<r4> ^set <p12> +)
    (<p13> ^num 0 +)
    (<a6> ^1 <c4> + ^num 1 +)
    (<c4> ^type attribute + ^name block + ^attribute category + ^result <r5> +
           ^parameter <p15> + ^negative false + ^args <a5> + ^rtype single +)
    (<r5> ^set <p14> +)
    (<p15> ^num 0 +)
    (<a5> ^1 <c5> + ^num 1 +)
    (<c5> ^type attribute + ^name object + ^attribute primitive +
           ^result <r6> + ^parameter <p16> + ^negative false + ^args <a4> +
           ^rtype single +)
    (<r6> ^set <r7> +)
    (<p16> ^num 0 +)
    (<v2> ^1 <v1> +)
    (<v1> ^1 1 + ^2 2 + ^verb-name move1 + ^verb-prep on1 +)
}

sp {chunk-multi*chunk-predicate-impasse*apply*complete*goal*snc*t32398-1
    :chunk
    (state <s1> ^gtype goal ^retrieve-handle goal-default221)
    -->
    (<s1> ^goal <p1> +)
    (<p1> ^potential-args <p2> + ^parameter-set <p3> + ^formated predicate +
           ^primary-rtype single + ^nlp-set <p13> + ^aname goal-default221 +
           ^handle goal-default221 +)
    (<p3> ^argnum 5 +)
    (<p13> ^conditions <n1> + ^conditions <n2> + ^conditions <n3> +
           ^conditions <n4> + ^conditions <n5> + ^aname goal-default221 +)
    (<n1> ^type state-pair + ^name on1 + ^attribute prepositions +
           ^result <r1> + ^parameter <p6> + ^negative false + ^args <a4> +
           ^rtype single +)
    (<r1> ^set <p4> +)
    (<p6> ^1 <p5> + ^2 <p7> + ^num 2 +)
    (<p5> ^type single + ^param-id 1 +)
    (<p7> ^type single + ^param-id 2 +)
    (<a4> ^1 <c1> + ^2 <c4> + ^num 2 +)
    (<c1> ^type attribute + ^name tiny1 + ^attribute size + ^result <r2> +
           ^parameter <p9> + ^negative false + ^args <a3> + ^rtype single +)
    (<r2> ^set <p8> +)
    (<p9> ^num 0 +)
    (<a3> ^1 <c2> + ^num 1 +)
    (<c2> ^type attribute + ^name block + ^attribute category + ^result <r3> +
           ^parameter <p11> + ^negative false + ^args <a2> + ^rtype single +)
    (<r3> ^set <p10> +)
    (<p11> ^num 0 +)
    (<a2> ^1 <c3> + ^num 1 +)
    (<c3> ^type attribute + ^name object + ^attribute primitive +
           ^result <r4> + ^parameter <p12> + ^negative false + ^args <a1> +
           ^rtype single +)
    (<r4> ^set <r5> +)
    (<p12> ^num 0 +)
    (<n2> ^type state-pair + ^name on1 + ^attribute prepositions +
           ^result <r6> + ^parameter <p16> + ^negative false + ^args <a5> +
           ^rtype single +)
    (<r6> ^set <p14> +)
    (<p16> ^1 <p15> + ^2 <p17> + ^num 2 +)
    (<p15> ^type single + ^param-id 4 +)
    (<p17> ^type single + ^param-id 5 +)
    (<a5> ^1 <c5> + ^2 <c6> + ^num 2 +)
    (<c4> ^type attribute + ^name small1 + ^attribute size + ^result <r8> +
           ^parameter <p23> + ^negative false + ^args <a8> + ^rtype single +)
    (<r8> ^set <p22> +)
    (<p23> ^num 0 +)
    (<a8> ^1 <c7> + ^num 1 +)
    (<c7> ^type attribute + ^name block + ^attribute category + ^result <r9> +
           ^parameter <p25> + ^negative false + ^args <a7> + ^rtype single +)
    (<r9> ^set <p24> +)
    (<p25> ^num 0 +)
    (<a7> ^1 <c8> + ^num 1 +)
    (<c8> ^type attribute + ^name object + ^attribute primitive +
           ^result <r10> + ^parameter <p26> + ^negative false + ^args <a6> +
           ^rtype single +)
    (<r10> ^set <r11> +)
    (<p26> ^num 0 +)
    (<n3> ^type state-pair + ^name on1 + ^attribute prepositions +
           ^result <r7> + ^parameter <p20> + ^negative false + ^args <a9> +
           ^rtype single +)
    (<r7> ^set <p18> +)
    (<p20> ^1 <p19> + ^2 <p21> + ^num 2 +)
    (<p19> ^type single + ^param-id 2 +)
    (<p21> ^type single + ^param-id 3 +)
    (<a9> ^1 <c4> + ^2 <c9> + ^num 2 +)
    (<c6> ^type attribute + ^name giant1 + ^attribute size + ^result <r13> +
           ^parameter <p31> + ^negative false + ^args <a12> + ^rtype single +)
    (<r13> ^set <p30> +)
    (<p31> ^num 0 +)
    (<a12> ^1 <c10> + ^num 1 +)
    (<c10> ^type attribute + ^name block + ^attribute category +
           ^result <r14> + ^parameter <p33> + ^negative false + ^args <a11> +
           ^rtype single +)
    (<r14> ^set <p32> +)
    (<p33> ^num 0 +)
    (<a11> ^1 <c11> + ^num 1 +)
    (<c11> ^type attribute + ^name object + ^attribute primitive +
           ^result <r15> + ^parameter <p34> + ^negative false + ^args <a10> +
           ^rtype single +)
    (<r15> ^set <r16> +)
    (<p34> ^num 0 +)
    (<n4> ^type state-pair + ^name on1 + ^attribute prepositions +
           ^result <r12> + ^parameter <p29> + ^negative false + ^args <a13> +
           ^rtype single +)
    (<r12> ^set <p27> +)
    (<p29> ^1 <p28> + ^num 1 +)
    (<p28> ^type single + ^param-id 5 +)
    (<a13> ^1 <c6> + ^2 <c12> + ^num 2 +)
    (<c12> ^type attribute + ^name blue1 + ^attribute color + ^result <r17> +
           ^parameter <p36> + ^negative false + ^args <a16> + ^rtype single +)
    (<r17> ^set <p35> +)
    (<p36> ^num 0 +)
    (<a16> ^1 <c13> + ^num 1 +)
    (<c13> ^type attribute + ^name location + ^attribute category +
           ^result <r18> + ^parameter <p38> + ^negative false + ^args <a15> +
           ^rtype single +)
    (<r18> ^set <p37> +)
    (<p38> ^num 0 +)
    (<a15> ^1 <c14> + ^num 1 +)
    (<c14> ^type attribute + ^name object + ^attribute primitive +
           ^result <r19> + ^parameter <p39> + ^negative false + ^args <a14> +
           ^rtype single +)
    (<r19> ^set <r20> +)
    (<p39> ^num 0 +)
    (<c9> ^type attribute + ^name medium1 + ^attribute size + ^result <r22> +
           ^parameter <p45> + ^negative false + ^args <a19> + ^rtype single +)
    (<r22> ^set <p44> +)
    (<p45> ^num 0 +)
    (<a19> ^1 <c15> + ^num 1 +)
    (<c15> ^type attribute + ^name block + ^attribute category +
           ^result <r23> + ^parameter <p47> + ^negative false + ^args <a18> +
           ^rtype single +)
    (<r23> ^set <p46> +)
    (<p47> ^num 0 +)
    (<a18> ^1 <c16> + ^num 1 +)
    (<c16> ^type attribute + ^name object + ^attribute primitive +
           ^result <r24> + ^parameter <p48> + ^negative false + ^args <a17> +
           ^rtype single +)
    (<r24> ^set <r25> +)
    (<p48> ^num 0 +)
    (<c5> ^type attribute + ^name large1 + ^attribute size + ^result <r26> +
           ^parameter <p50> + ^negative false + ^args <a23> + ^rtype single +)
    (<r26> ^set <p49> +)
    (<p50> ^num 0 +)
    (<a23> ^1 <c17> + ^num 1 +)
    (<c17> ^type attribute + ^name block + ^attribute category +
           ^result <r27> + ^parameter <p52> + ^negative false + ^args <a22> +
           ^rtype single +)
    (<r27> ^set <p51> +)
    (<p52> ^num 0 +)
    (<a22> ^1 <c18> + ^num 1 +)
    (<c18> ^type attribute + ^name object + ^attribute primitive +
           ^result <r28> + ^parameter <p53> + ^negative false + ^args <a21> +
           ^rtype single +)
    (<r28> ^set <r29> +)
    (<p53> ^num 0 +)
    (<n5> ^type state-pair + ^name on1 + ^attribute prepositions +
           ^result <r21> + ^parameter <p42> + ^negative false + ^args <a20> +
           ^rtype single +)
    (<r21> ^set <p40> +)
    (<p42> ^1 <p41> + ^2 <p43> + ^num 2 +)
    (<p41> ^type single + ^param-id 3 +)
    (<p43> ^type single + ^param-id 4 +)
    (<a20> ^1 <c9> + ^2 <c5> + ^num 2 +)
}

sp {chunk-multi*chunk-puzzle-impasse*apply*complete*snc*t29851-6
    :chunk
    (state <s1> ^retrieve-game goose-fox-beans171 -^opponent <o*1>)
    -->
    (<s1> ^retrieve-handle action-default183 +)
}

sp {chunk-multi*chunk-puzzle-impasse*apply*complete*snc*t29851-5
    :chunk
    (state <s1> ^retrieve-game goose-fox-beans171 -^opponent <o*1>)
    -->
    (<s1> ^retrieve-handle action-default195 +)
}

sp {chunk-multi*chunk-puzzle-impasse*apply*complete*snc*t29851-4
    :chunk
    (state <s1> ^retrieve-game goose-fox-beans171 -^opponent <o*1>)
    -->
    (<s1> ^retrieve-handle action-default199 +)
}

sp {chunk-multi*chunk-puzzle-impasse*apply*complete*snc*t29851-3
    :chunk
    (state <s1> ^retrieve-game goose-fox-beans171 -^opponent <o*1>)
    -->
    (<s1> ^retrieve-handle failure-default203 +)
}

sp {chunk-multi*chunk-puzzle-impasse*apply*complete*snc*t29851-2
    :chunk
    (state <s1> ^retrieve-game goose-fox-beans171 -^opponent <o*1>)
    -->
    (<s1> ^retrieve-handle failure-default207 +)
}

sp {chunk-multi*chunk-puzzle-impasse*apply*complete*snc*t29851-1
    :chunk
    (state <s1> ^retrieve-game goose-fox-beans171 -^opponent <o*1>)
    -->
    (<s1> ^retrieve-handle all-crossed208 +)
}

sp {chunk-multi*chunk-predicate-impasse*apply*complete*action*snc*t29842-1
    :chunk
    (state <s1> ^gtype action ^retrieve-handle action-default199)
    -->
    (<s1> ^action <p1> +)
    (<p1> ^potential-args <p2> + ^parameter-set <p3> + ^formated predicate +
           ^primary-rtype single + ^nlp-set <p15> + ^verb-structure <v2> +
           ^aname action-default199 + ^handle action-default199 +)
    (<p3> ^argnum 3 +)
    (<p15> ^conditions <n1> + ^conditions <c5> + ^aname action-default199 +)
    (<n1> ^type state-pair + ^name on1 + ^attribute prepositions +
           ^result <r1> + ^parameter <p6> + ^negative false + ^args <a3> +
           ^rtype single +)
    (<r1> ^set <p4> +)
    (<p6> ^1 <p5> + ^2 <p7> + ^num 2 +)
    (<p5> ^type single + ^param-id 2 +)
    (<p7> ^type single + ^param-id 1 +)
    (<a3> ^1 <c1> + ^2 <c3> + ^num 2 +)
    (<c1> ^type attribute + ^name block + ^attribute category + ^result <r2> +
           ^parameter <p9> + ^negative false + ^args <a2> + ^rtype single +)
    (<r2> ^set <p8> +)
    (<p9> ^num 0 +)
    (<a2> ^1 <c2> + ^num 1 +)
    (<c2> ^type attribute + ^name object + ^attribute primitive +
           ^result <r3> + ^parameter <p10> + ^negative false + ^args <a1> +
           ^rtype single +)
    (<r3> ^set <r4> +)
    (<p10> ^num 0 +)
    (<c3> ^type attribute + ^name boat1 + ^attribute shape + ^result <r5> +
           ^parameter <p12> + ^negative false + ^args <a5> + ^rtype single +)
    (<r5> ^set <p11> +)
    (<p12> ^num 0 +)
    (<a5> ^1 <c4> + ^num 1 +)
    (<c4> ^type attribute + ^name object + ^attribute primitive +
           ^result <r6> + ^parameter <p14> + ^negative false + ^args <a4> +
           ^rtype single +)
    (<r6> ^set <p13> +)
    (<p14> ^num 0 +)
    (<c5> ^type concept + ^name current + ^attribute predicate +
           ^result <r7> + ^parameter <p18> + ^negative false + ^args <a8> +
           ^rtype single +)
    (<r7> ^set <p16> +)
    (<p18> ^1 <p17> + ^num 1 +)
    (<p17> ^type single + ^param-id 3 +)
    (<a8> ^1 <c6> + ^num 1 +)
    (<c6> ^type attribute + ^name bank1 + ^attribute shape + ^result <r8> +
           ^parameter <p20> + ^negative false + ^args <a7> + ^rtype single +)
    (<r8> ^set <p19> +)
    (<p20> ^num 0 +)
    (<a7> ^1 <c7> + ^num 1 +)
    (<c7> ^type attribute + ^name object + ^attribute primitive +
           ^result <r9> + ^parameter <p22> + ^negative false + ^args <a6> +
           ^rtype single +)
    (<r9> ^set <p21> +)
    (<p22> ^num 0 +)
    (<v2> ^1 <v1> +)
    (<v1> ^1 2 + ^2 3 + ^verb-name move1 + ^verb-prep on1 +)
}

sp {chunk-multi*chunk-predicate-impasse*apply*complete*goal*snc*t29834-1
    :chunk
    (state <s1> ^gtype goal ^retrieve-handle all-crossed208)
    -->
    (<s1> ^goal <p1> +)
    (<p1> ^potential-args <p2> + ^parameter-set <p3> + ^formated predicate +
           ^primary-rtype set + ^nlp-set <p17> + ^aname all-crossed208 +
           ^handle all-crossed208 +)
    (<p3> ^argnum 1 +)
    (<p17> ^conditions <n1> + ^aname all-crossed208 +)
    (<n1> ^type state-pair + ^name on1 + ^attribute prepositions +
           ^result <r1> + ^parameter <p6> + ^negative false + ^args <a3> +
           ^rtype set +)
    (<r1> ^set <p4> +)
    (<p6> ^1 <p5> + ^num 1 +)
    (<p5> ^type set + ^param-id 1 +)
    (<a3> ^1 <c1> + ^2 <c3> + ^num 2 +)
    (<c1> ^type attribute + ^name block + ^attribute category + ^result <r2> +
           ^parameter <p9> + ^negative false + ^args <a2> + ^rtype set +)
    (<r2> ^set <p7> +)
    (<p9> ^1 <p8> + ^num 1 +)
    (<p8> ^type set + ^param-id 1 +)
    (<a2> ^1 <c2> + ^num 1 +)
    (<c2> ^type attribute + ^name object + ^attribute primitive +
           ^result <r3> + ^parameter <p10> + ^negative false + ^args <a1> +
           ^rtype single +)
    (<r3> ^set <r4> +)
    (<p10> ^num 0 +)
    (<c3> ^type attribute + ^name destination1 + ^attribute name +
           ^result <r5> + ^parameter <p12> + ^negative false + ^args <a6> +
           ^rtype single +)
    (<r5> ^set <p11> +)
    (<p12> ^num 0 +)
    (<a6> ^1 <c4> + ^num 1 +)
    (<c4> ^type attribute + ^name bank1 + ^attribute shape + ^result <r6> +
           ^parameter <p14> + ^negative false + ^args <a5> + ^rtype single +)
    (<r6> ^set <p13> +)
    (<p14> ^num 0 +)
    (<a5> ^1 <c5> + ^num 1 +)
    (<c5> ^type attribute + ^name object + ^attribute primitive +
           ^result <r7> + ^parameter <p16> + ^negative false + ^args <a4> +
           ^rtype single +)
    (<r7> ^set <p15> +)
    (<p16> ^num 0 +)
}

sp {chunk-multi*chunk-predicate-impasse*apply*complete*action*snc*t29826-1
    :chunk
    (state <s1> ^gtype action ^retrieve-handle action-default183)
    -->
    (<s1> ^action <p1> +)
    (<p1> ^potential-args <p2> + ^parameter-set <p3> + ^formated predicate +
           ^primary-rtype single + ^nlp-set <p17> + ^verb-structure <v2> +
           ^aname action-default183 + ^handle action-default183 +)
    (<p3> ^argnum 3 +)
    (<p17> ^conditions <n1> + ^conditions <c6> + ^aname action-default183 +)
    (<n1> ^type state-pair + ^name on1 + ^attribute prepositions +
           ^result <r1> + ^parameter <p6> + ^negative false + ^args <a3> +
           ^rtype single +)
    (<r1> ^set <p4> +)
    (<p6> ^1 <p5> + ^2 <p7> + ^num 2 +)
    (<p5> ^type single + ^param-id 2 +)
    (<p7> ^type single + ^param-id 1 +)
    (<a3> ^1 <c1> + ^2 <c3> + ^num 2 +)
    (<c1> ^type attribute + ^name block + ^attribute category + ^result <r2> +
           ^parameter <p9> + ^negative false + ^args <a2> + ^rtype single +)
    (<r2> ^set <p8> +)
    (<p9> ^num 0 +)
    (<a2> ^1 <c2> + ^num 1 +)
    (<c2> ^type attribute + ^name object + ^attribute primitive +
           ^result <r3> + ^parameter <p10> + ^negative false + ^args <a1> +
           ^rtype single +)
    (<r3> ^set <r4> +)
    (<p10> ^num 0 +)
    (<c3> ^type concept + ^name current + ^attribute predicate +
           ^result <r5> + ^parameter <p12> + ^negative false + ^args <a6> +
           ^rtype single +)
    (<r5> ^set <p11> +)
    (<p12> ^num 0 +)
    (<a6> ^1 <c4> + ^num 1 +)
    (<c4> ^type attribute + ^name bank1 + ^attribute shape + ^result <r6> +
           ^parameter <p14> + ^negative false + ^args <a5> + ^rtype single +)
    (<r6> ^set <p13> +)
    (<p14> ^num 0 +)
    (<a5> ^1 <c5> + ^num 1 +)
    (<c5> ^type attribute + ^name object + ^attribute primitive +
           ^result <r7> + ^parameter <p16> + ^negative false + ^args <a4> +
           ^rtype single +)
    (<r7> ^set <p15> +)
    (<p16> ^num 0 +)
    (<c6> ^type concept + ^name clear + ^attribute predicate + ^result <r8> +
           ^parameter <p20> + ^negative false + ^args <a9> + ^rtype single +)
    (<r8> ^set <p18> +)
    (<p20> ^1 <p19> + ^num 1 +)
    (<p19> ^type single + ^param-id 3 +)
    (<a9> ^1 <c7> + ^num 1 +)
    (<c7> ^type attribute + ^name boat1 + ^attribute shape + ^result <r9> +
           ^parameter <p22> + ^negative false + ^args <a8> + ^rtype single +)
    (<r9> ^set <p21> +)
    (<p22> ^num 0 +)
    (<a8> ^1 <c8> + ^num 1 +)
    (<c8> ^type attribute + ^name object + ^attribute primitive +
           ^result <r10> + ^parameter <p24> + ^negative false + ^args <a7> +
           ^rtype single +)
    (<r10> ^set <p23> +)
    (<p24> ^num 0 +)
    (<v2> ^1 <v1> +)
    (<v1> ^1 2 + ^2 3 + ^verb-name move1 + ^verb-prep on1 +)
}

sp {chunk-multi*chunk-predicate-impasse*apply*complete*failure*snc*t29818-1
    :chunk
    (state <s1> ^gtype failure ^retrieve-handle failure-default203)
    -->
    (<s1> ^failure <p1> +)
    (<p1> ^potential-args <p2> + ^parameter-set <p3> + ^formated predicate +
           ^primary-rtype single + ^nlp-set <p13> +
           ^aname failure-default203 + ^handle failure-default203 +)
    (<p3> ^argnum 3 +)
    (<p13> ^conditions <n1> + ^conditions <n2> + ^aname failure-default203 +)
    (<n1> ^type state-pair + ^name on1 + ^attribute prepositions +
           ^result <r1> + ^parameter <p6> + ^negative false + ^args <a4> +
           ^rtype single +)
    (<r1> ^set <p4> +)
    (<p6> ^1 <p5> + ^2 <p7> + ^num 2 +)
    (<p5> ^type single + ^param-id 1 +)
    (<p7> ^type single + ^param-id 2 +)
    (<a4> ^1 <c1> + ^2 <c4> + ^num 2 +)
    (<c1> ^type attribute + ^name red1 + ^attribute color + ^result <r2> +
           ^parameter <p9> + ^negative false + ^args <a3> + ^rtype single +)
    (<r2> ^set <p8> +)
    (<p9> ^num 0 +)
    (<a3> ^1 <c2> + ^num 1 +)
    (<c2> ^type attribute + ^name block + ^attribute category + ^result <r3> +
           ^parameter <p11> + ^negative false + ^args <a2> + ^rtype single +)
    (<r3> ^set <p10> +)
    (<p11> ^num 0 +)
    (<a2> ^1 <c3> + ^num 1 +)
    (<c3> ^type attribute + ^name object + ^attribute primitive +
           ^result <r4> + ^parameter <p12> + ^negative false + ^args <a1> +
           ^rtype single +)
    (<r4> ^set <r5> +)
    (<p12> ^num 0 +)
    (<c4> ^type concept + ^name opposite + ^attribute predicate +
           ^result <r11> + ^parameter <p24> + ^negative false + ^args <a11> +
           ^rtype single +)
    (<r11> ^set <p23> +)
    (<p24> ^num 0 +)
    (<a11> ^1 <c8> + ^num 1 +)
    (<c8> ^type attribute + ^name bank1 + ^attribute shape + ^result <r12> +
           ^parameter <p26> + ^negative false + ^args <a10> + ^rtype single +)
    (<r12> ^set <p25> +)
    (<p26> ^num 0 +)
    (<a10> ^1 <c9> + ^num 1 +)
    (<c9> ^type attribute + ^name object + ^attribute primitive +
           ^result <r13> + ^parameter <p28> + ^negative false + ^args <a9> +
           ^rtype single +)
    (<r13> ^set <p27> +)
    (<p28> ^num 0 +)
    (<n2> ^type state-pair + ^name on1 + ^attribute prepositions +
           ^result <r6> + ^parameter <p16> + ^negative false + ^args <a8> +
           ^rtype single +)
    (<r6> ^set <p14> +)
    (<p16> ^1 <p15> + ^2 <p17> + ^num 2 +)
    (<p15> ^type single + ^param-id 3 +)
    (<p17> ^type single + ^param-id 2 +)
    (<a8> ^1 <c5> + ^2 <c4> + ^num 2 +)
    (<c5> ^type attribute + ^name yellow1 + ^attribute color + ^result <r7> +
           ^parameter <p19> + ^negative false + ^args <a7> + ^rtype single +)
    (<r7> ^set <p18> +)
    (<p19> ^num 0 +)
    (<a7> ^1 <c6> + ^num 1 +)
    (<c6> ^type attribute + ^name block + ^attribute category + ^result <r8> +
           ^parameter <p21> + ^negative false + ^args <a6> + ^rtype single +)
    (<r8> ^set <p20> +)
    (<p21> ^num 0 +)
    (<a6> ^1 <c7> + ^num 1 +)
    (<c7> ^type attribute + ^name object + ^attribute primitive +
           ^result <r9> + ^parameter <p22> + ^negative false + ^args <a5> +
           ^rtype single +)
    (<r9> ^set <r10> +)
    (<p22> ^num 0 +)
}

sp {chunk-multi*chunk-predicate-impasse*apply*complete*failure*snc*t29810-1
    :chunk
    (state <s1> ^gtype failure ^retrieve-handle failure-default207)
    -->
    (<s1> ^failure <p1> +)
    (<p1> ^potential-args <p2> + ^parameter-set <p3> + ^formated predicate +
           ^primary-rtype single + ^nlp-set <p13> +
           ^aname failure-default207 + ^handle failure-default207 +)
    (<p3> ^argnum 3 +)
    (<p13> ^conditions <n1> + ^conditions <n2> + ^aname failure-default207 +)
    (<n1> ^type state-pair + ^name on1 + ^attribute prepositions +
           ^result <r1> + ^parameter <p6> + ^negative false + ^args <a4> +
           ^rtype single +)
    (<r1> ^set <p4> +)
    (<p6> ^1 <p5> + ^2 <p7> + ^num 2 +)
    (<p5> ^type single + ^param-id 1 +)
    (<p7> ^type single + ^param-id 2 +)
    (<a4> ^1 <c1> + ^2 <c4> + ^num 2 +)
    (<c1> ^type attribute + ^name green1 + ^attribute color + ^result <r2> +
           ^parameter <p9> + ^negative false + ^args <a3> + ^rtype single +)
    (<r2> ^set <p8> +)
    (<p9> ^num 0 +)
    (<a3> ^1 <c2> + ^num 1 +)
    (<c2> ^type attribute + ^name block + ^attribute category + ^result <r3> +
           ^parameter <p11> + ^negative false + ^args <a2> + ^rtype single +)
    (<r3> ^set <p10> +)
    (<p11> ^num 0 +)
    (<a2> ^1 <c3> + ^num 1 +)
    (<c3> ^type attribute + ^name object + ^attribute primitive +
           ^result <r4> + ^parameter <p12> + ^negative false + ^args <a1> +
           ^rtype single +)
    (<r4> ^set <r5> +)
    (<p12> ^num 0 +)
    (<c4> ^type concept + ^name opposite + ^attribute predicate +
           ^result <r11> + ^parameter <p24> + ^negative false + ^args <a11> +
           ^rtype single +)
    (<r11> ^set <p23> +)
    (<p24> ^num 0 +)
    (<a11> ^1 <c8> + ^num 1 +)
    (<c8> ^type attribute + ^name bank1 + ^attribute shape + ^result <r12> +
           ^parameter <p26> + ^negative false + ^args <a10> + ^rtype single +)
    (<r12> ^set <p25> +)
    (<p26> ^num 0 +)
    (<a10> ^1 <c9> + ^num 1 +)
    (<c9> ^type attribute + ^name object + ^attribute primitive +
           ^result <r13> + ^parameter <p28> + ^negative false + ^args <a9> +
           ^rtype single +)
    (<r13> ^set <p27> +)
    (<p28> ^num 0 +)
    (<n2> ^type state-pair + ^name on1 + ^attribute prepositions +
           ^result <r6> + ^parameter <p16> + ^negative false + ^args <a8> +
           ^rtype single +)
    (<r6> ^set <p14> +)
    (<p16> ^1 <p15> + ^2 <p17> + ^num 2 +)
    (<p15> ^type single + ^param-id 3 +)
    (<p17> ^type single + ^param-id 2 +)
    (<a8> ^1 <c5> + ^2 <c4> + ^num 2 +)
    (<c5> ^type attribute + ^name yellow1 + ^attribute color + ^result <r7> +
           ^parameter <p19> + ^negative false + ^args <a7> + ^rtype single +)
    (<r7> ^set <p18> +)
    (<p19> ^num 0 +)
    (<a7> ^1 <c6> + ^num 1 +)
    (<c6> ^type attribute + ^name block + ^attribute category + ^result <r8> +
           ^parameter <p21> + ^negative false + ^args <a6> + ^rtype single +)
    (<r8> ^set <p20> +)
    (<p21> ^num 0 +)
    (<a6> ^1 <c7> + ^num 1 +)
    (<c7> ^type attribute + ^name object + ^attribute primitive +
           ^result <r9> + ^parameter <p22> + ^negative false + ^args <a5> +
           ^rtype single +)
    (<r9> ^set <r10> +)
    (<p22> ^num 0 +)
}

sp {chunk-multi*chunk-predicate-impasse*apply*complete*action*snc*t29802-1
    :chunk
    (state <s1> ^gtype action ^retrieve-handle action-default195)
    -->
    (<s1> ^action <p1> +)
    (<p1> ^potential-args <p2> + ^parameter-set <p3> + ^formated predicate +
           ^primary-rtype single + ^nlp-set <p11> + ^verb-structure <v2> +
           ^aname action-default195 + ^handle action-default195 +)
    (<p3> ^argnum 2 +)
    (<p11> ^conditions <c1> + ^conditions <c4> + ^aname action-default195 +)
    (<c1> ^type concept + ^name opposite + ^attribute predicate +
           ^result <r1> + ^parameter <p6> + ^negative false + ^args <a3> +
           ^rtype single +)
    (<r1> ^set <p4> +)
    (<p6> ^1 <p5> + ^num 1 +)
    (<p5> ^type single + ^param-id 2 +)
    (<a3> ^1 <c2> + ^num 1 +)
    (<c2> ^type attribute + ^name bank1 + ^attribute shape + ^result <r2> +
           ^parameter <p8> + ^negative false + ^args <a2> + ^rtype single +)
    (<r2> ^set <p7> +)
    (<p8> ^num 0 +)
    (<a2> ^1 <c3> + ^num 1 +)
    (<c3> ^type attribute + ^name object + ^attribute primitive +
           ^result <r3> + ^parameter <p10> + ^negative false + ^args <a1> +
           ^rtype single +)
    (<r3> ^set <p9> +)
    (<p10> ^num 0 +)
    (<c4> ^type attribute + ^name boat1 + ^attribute shape + ^result <r4> +
           ^parameter <p14> + ^negative false + ^args <a5> + ^rtype single +)
    (<r4> ^set <p12> +)
    (<p14> ^1 <p13> + ^num 1 +)
    (<p13> ^type single + ^param-id 1 +)
    (<a5> ^1 <c5> + ^num 1 +)
    (<c5> ^type attribute + ^name object + ^attribute primitive +
           ^result <r5> + ^parameter <p16> + ^negative false + ^args <a4> +
           ^rtype single +)
    (<r5> ^set <p15> +)
    (<p16> ^num 0 +)
    (<v2> ^1 <v1> +)
    (<v1> ^1 1 + ^2 2 + ^verb-name move1 + ^verb-prep on1 +)
}

sp {chunk-multi*chunk-predicate-impasse*apply*complete*snc*t27027-1
    :chunk
    (state <s1> ^gtype <c2> ^<c2> <g1>)
    (<g1> ^condition <c1>)
    (<c1> ^name opposite ^type concept ^attribute predicate)
    -->
    (<s1> ^predicate <p1> + ^gtype predicate +)
    (<p1> ^link <c1> + ^potential-args <p2> + ^parameter-set <p3> +
           ^formated predicate + ^primary-rtype single + ^nlp-set <p13> +
           ^aname opposite + ^handle opposite +)
    (<p3> ^argnum 1 +)
    (<p13> ^conditions <n1> + ^aname opposite +)
    (<n1> ^type state-pair + ^name below1 + ^attribute prepositions +
           ^result <r1> + ^parameter <p6> + ^negative true + ^args <a2> +
           ^rtype single +)
    (<r1> ^set <p4> +)
    (<p6> ^1 <p5> + ^num 1 +)
    (<p5> ^type single + ^param-id 1 +)
    (<a2> ^1 <c3> + ^2 <c4> + ^num 2 +)
    (<c3> ^name object + ^attribute input-arg + ^result <r2> +
           ^parameter <p8> + ^negative false + ^args <a1> + ^rtype single +)
    (<r2> ^set <r3> +)
    (<p8> ^1 <p7> + ^num 1 +)
    (<p7> ^type single + ^param-id 1 +)
    (<c4> ^type attribute + ^name boat1 + ^attribute shape + ^result <r4> +
           ^parameter <p10> + ^negative false + ^args <a4> + ^rtype single +)
    (<r4> ^set <p9> +)
    (<p10> ^num 0 +)
    (<a4> ^1 <c5> + ^num 1 +)
    (<c5> ^type attribute + ^name object + ^attribute primitive +
           ^result <r5> + ^parameter <p12> + ^negative false + ^args <a3> +
           ^rtype single +)
    (<r5> ^set <p11> +)
    (<p12> ^num 0 +)
}

sp {chunk-multi*chunk-predicate-impasse*apply*complete*snc*t26203-1
    :chunk
    (state <s1> ^gtype <c2> ^<c2> <g1>)
    (<g1> ^condition <c1>)
    (<c1> ^name current ^type concept ^attribute predicate)
    -->
    (<s1> ^predicate <p1> + ^gtype predicate +)
    (<p1> ^link <c1> + ^potential-args <p2> + ^parameter-set <p3> +
           ^formated predicate + ^primary-rtype single + ^nlp-set <p13> +
           ^aname current + ^handle current +)
    (<p3> ^argnum 1 +)
    (<p13> ^conditions <n1> + ^aname current +)
    (<n1> ^type state-pair + ^name below1 + ^attribute prepositions +
           ^result <r1> + ^parameter <p6> + ^negative false + ^args <a2> +
           ^rtype single +)
    (<r1> ^set <p4> +)
    (<p6> ^1 <p5> + ^num 1 +)
    (<p5> ^type single + ^param-id 1 +)
    (<a2> ^1 <c3> + ^2 <c4> + ^num 2 +)
    (<c3> ^name object + ^attribute input-arg + ^result <r2> +
           ^parameter <p8> + ^negative false + ^args <a1> + ^rtype single +)
    (<r2> ^set <r3> +)
    (<p8> ^1 <p7> + ^num 1 +)
    (<p7> ^type single + ^param-id 1 +)
    (<c4> ^type attribute + ^name boat1 + ^attribute shape + ^result <r4> +
           ^parameter <p10> + ^negative false + ^args <a4> + ^rtype single +)
    (<r4> ^set <p9> +)
    (<p10> ^num 0 +)
    (<a4> ^1 <c5> + ^num 1 +)
    (<c5> ^type attribute + ^name object + ^attribute primitive +
           ^result <r5> + ^parameter <p12> + ^negative false + ^args <a3> +
           ^rtype single +)
    (<r5> ^set <p11> +)
    (<p12> ^num 0 +)
}

sp {chunk-multi*chunk-puzzle-impasse*apply*complete*snc*t24838-2
    :chunk
    (state <s1> ^retrieve-game mahjong163 -^opponent <o*1>)
    -->
    (<s1> ^retrieve-handle action-default167 +)
}

sp {chunk-multi*chunk-puzzle-impasse*apply*complete*snc*t24838-1
    :chunk
    (state <s1> ^retrieve-game mahjong163 -^opponent <o*1>)
    -->
    (<s1> ^retrieve-handle goal-default170 +)
}

sp {chunk-multi*chunk-predicate-impasse*apply*complete*goal*snc*t24829-1
    :chunk
    (state <s1> ^gtype goal ^retrieve-handle goal-default170)
    -->
    (<s1> ^goal <p1> +)
    (<p1> ^potential-args <p2> + ^parameter-set <p3> + ^formated predicate +
           ^primary-rtype set + ^nlp-set <p15> + ^aname goal-default170 +
           ^handle goal-default170 +)
    (<p3> ^argnum 1 +)
    (<p15> ^conditions <n1> + ^aname goal-default170 +)
    (<n1> ^type state-pair + ^name on1 + ^attribute prepositions +
           ^result <r1> + ^parameter <p6> + ^negative false + ^args <a3> +
           ^rtype set +)
    (<r1> ^set <p4> +)
    (<p6> ^1 <p5> + ^num 1 +)
    (<p5> ^type set + ^param-id 1 +)
    (<a3> ^1 <c1> + ^2 <c3> + ^num 2 +)
    (<c1> ^type attribute + ^name block + ^attribute category + ^result <r2> +
           ^parameter <p9> + ^negative false + ^args <a2> + ^rtype set +)
    (<r2> ^set <p7> +)
    (<p9> ^1 <p8> + ^num 1 +)
    (<p8> ^type set + ^param-id 1 +)
    (<a2> ^1 <c2> + ^num 1 +)
    (<c2> ^type attribute + ^name object + ^attribute primitive +
           ^result <r3> + ^parameter <p10> + ^negative false + ^args <a1> +
           ^rtype single +)
    (<r3> ^set <r4> +)
    (<p10> ^num 0 +)
    (<c3> ^type attribute + ^name garbage + ^attribute name + ^result <r5> +
           ^parameter <p12> + ^negative false + ^args <a5> + ^rtype single +)
    (<r5> ^set <p11> +)
    (<p12> ^num 0 +)
    (<a5> ^1 <c4> + ^num 1 +)
    (<c4> ^type attribute + ^name object + ^attribute primitive +
           ^result <r6> + ^parameter <p14> + ^negative false + ^args <a4> +
           ^rtype single +)
    (<r6> ^set <p13> +)
    (<p14> ^num 0 +)
}

sp {chunk-multi*chunk-predicate-impasse*apply*complete*action*snc*t24821-1
    :chunk
    (state <s1> ^gtype action ^retrieve-handle action-default167)
    -->
    (<s1> ^action <p1> +)
    (<p1> ^potential-args <p2> + ^parameter-set <p3> + ^formated predicate +
           ^primary-rtype single + ^nlp-set <p15> + ^verb-structure <v2> +
           ^aname action-default167 + ^handle action-default167 +)
    (<p3> ^argnum 4 +)
    (<p15> ^conditions <n1> + ^conditions <n2> + ^conditions <c9> +
           ^aname action-default167 +)
    (<n1> ^type attribute-of + ^name color + ^result <r1> + ^parameter <p6> +
           ^negative false + ^args <a5> + ^rtype single +
           ^return-type number +)
    (<r1> ^set <p4> +)
    (<p6> ^1 <p5> + ^2 <p7> + ^num 2 +)
    (<p5> ^type single + ^param-id 4 +)
    (<p7> ^type single + ^param-id 1 +)
    (<a5> ^2 <c1> + ^num 1 +)
    (<c1> ^type concept + ^name clear + ^attribute predicate + ^result <r2> +
           ^parameter <p9> + ^negative false + ^args <a4> + ^rtype single +)
    (<r2> ^set <p8> +)
    (<p9> ^num 0 +)
    (<a4> ^1 <c2> + ^num 1 +)
    (<c2> ^type concept + ^name free + ^attribute predicate + ^result <r3> +
           ^parameter <p11> + ^negative false + ^args <a3> + ^rtype single +)
    (<r3> ^set <p10> +)
    (<p11> ^num 0 +)
    (<a3> ^1 <c3> + ^num 1 +)
    (<c3> ^type attribute + ^name block + ^attribute category + ^result <r4> +
           ^parameter <p13> + ^negative false + ^args <a2> + ^rtype single +)
    (<r4> ^set <p12> +)
    (<p13> ^num 0 +)
    (<a2> ^1 <c4> + ^num 1 +)
    (<c4> ^type attribute + ^name object + ^attribute primitive +
           ^result <r5> + ^parameter <p14> + ^negative false + ^args <a1> +
           ^rtype single +)
    (<r5> ^set <r6> +)
    (<p14> ^num 0 +)
    (<n2> ^type attribute-of + ^name color + ^result <r7> + ^parameter <p18> +
           ^negative false + ^args <a10> + ^rtype single +
           ^return-type number +)
    (<r7> ^set <p16> +)
    (<p18> ^1 <p17> + ^2 <p19> + ^num 2 +)
    (<p17> ^type single + ^param-id 4 +)
    (<p19> ^type single + ^param-id 2 +)
    (<a10> ^2 <c5> + ^num 1 +)
    (<c5> ^type concept + ^name free + ^attribute predicate + ^result <r8> +
           ^parameter <p21> + ^negative false + ^args <a9> + ^rtype single +)
    (<r8> ^set <p20> +)
    (<p21> ^num 0 +)
    (<a9> ^1 <c6> + ^num 1 +)
    (<c6> ^type concept + ^name clear + ^attribute predicate + ^result <r9> +
           ^parameter <p23> + ^negative false + ^args <a8> + ^rtype single +)
    (<r9> ^set <p22> +)
    (<p23> ^num 0 +)
    (<a8> ^1 <c7> + ^num 1 +)
    (<c7> ^type attribute + ^name block + ^attribute category +
           ^result <r10> + ^parameter <p25> + ^negative false + ^args <a7> +
           ^rtype single +)
    (<r10> ^set <p24> +)
    (<p25> ^num 0 +)
    (<a7> ^1 <c8> + ^num 1 +)
    (<c8> ^type attribute + ^name object + ^attribute primitive +
           ^result <r11> + ^parameter <p26> + ^negative false + ^args <a6> +
           ^rtype single +)
    (<r11> ^set <r12> +)
    (<p26> ^num 0 +)
    (<c9> ^type attribute + ^name garbage + ^attribute name + ^result <r13> +
           ^parameter <p29> + ^negative false + ^args <a12> + ^rtype single +)
    (<r13> ^set <p27> +)
    (<p29> ^1 <p28> + ^num 1 +)
    (<p28> ^type single + ^param-id 3 +)
    (<a12> ^1 <c10> + ^num 1 +)
    (<c10> ^type attribute + ^name object + ^attribute primitive +
           ^result <r14> + ^parameter <p31> + ^negative false + ^args <a11> +
           ^rtype single +)
    (<r14> ^set <p30> +)
    (<p31> ^num 0 +)
    (<v2> ^1 <v1> + ^2 <v3> +)
    (<v1> ^1 1 + ^2 3 + ^verb-name move1 + ^verb-prep on1 +)
    (<v3> ^1 2 + ^2 3 + ^verb-name move1 + ^verb-prep on1 +)
}

sp {chunk*justification-17689*t24713-1
    :chunk
    (state <s1> ^list <l1> ^gtype <c3> ^gtype <c1> ^<c3> <a1> ^<c1> <a1>
          ^world <n1>)
    (<a1> ^condition <n3>)
    (<n3> ^rtype set ^negative false ^type state-pair ^args <a2>
          ^parameter <p2> ^name <c2> ^result <r2> ^attribute <c4>)
    (<a2> ^num 2 ^2 <c5> ^1 <c6>)
    (<p2> ^num 1)
    (<c5> -^rtype set)
    (<c6> ^rtype set ^result <r1>)
    (<l1> ^game <g1>)
    (<n1> ^predicates <p1>)
    (<p1> ^predicate <n2>)
    (<n2> ^handle <c2>)
    (<r2> ^set <p4>)
    (<r1> ^set <p3>)
    (<p3> ^instance <i1>)
    (<i1> ^1 <s2>)
   -{ (<s2> -^<x1> <x*1>)
      (<s1> ^<a*1> <v*1>)}
   -{ (<s2> ^<elem> <e>)
     -{ (<n2> ^instance <instance1>)
        (<instance1> ^1 <e> ^2 <objb>)
        (<c5> ^result <r*2>)
        (<r*2> ^set <s*4>)
        (<s*4> ^instance <i*2>)
        (<i*2> ^1 <objb>)}}
    -->
    (<p4> ^instance <i2> +)
    (<i2> ^1 <s2> +)
}

sp {chunk*justification-17619*onc*t24707-2
    :chunk
    (state <s1> ^list <l1> ^gtype <c2> ^gtype <c1> ^<c2> <a1> ^<c1> <a1>)
    (<a1> ^condition <c3>)
    (<c3> ^rtype set ^type attribute ^args <a2> ^negative <c4> ^parameter <p1>
          ^result <r1> ^name <c6> ^attribute <c7>)
    (<a2> ^1 <c5>)
    (<c5> -^rtype set ^result <r2>)
    (<l1> ^game <g1>)
    (<r2> ^set <r3>)
    (<r3> ^instance <i2>)
    (<i2> ^1 <n1>)
    (<n1> ^predicates <p3>)
    (<r1> ^set <p2>)
    (<p2> ^instance <i1>)
    (<i1> ^2 <c6> ^3 <c7> ^1 <s2>)
    (<p3> ^<c7> <c6>)
    -->
    (<s2> ^object <n1> +)
}

sp {chunk*justification-17613*t24707-1
    :chunk
    (state <s1> ^list <l1> ^gtype <c2> ^gtype <c1> ^<c2> <a1> ^<c1> <a1>)
    (<a1> ^condition <c3>)
    (<c3> ^rtype set ^type attribute ^args <a2> ^negative <c4> ^parameter <p1>
          ^result <r1> ^name <c6> ^attribute <c7>)
    (<a2> ^1 <c5>)
    (<c5> -^rtype set)
    (<l1> ^game <g1>)
    (<r1> ^set <p2>)
    -->
    (<p2> ^instance <i1> +)
    (<i1> ^2 <c6> + ^3 <c7> + ^1 <s2> +)
}

sp {chunk-multi*chunk-puzzle-impasse*apply*complete*snc*t23089-3
    :chunk
    (state <s1> ^retrieve-game sokoban138 -^opponent <o*1>)
    -->
    (<s1> ^retrieve-handle action-default142 +)
}

sp {chunk-multi*chunk-puzzle-impasse*apply*complete*snc*t23089-2
    :chunk
    (state <s1> ^retrieve-game sokoban138 -^opponent <o*1>)
    -->
    (<s1> ^retrieve-handle action-default153 +)
}

sp {chunk-multi*chunk-puzzle-impasse*apply*complete*snc*t23089-1
    :chunk
    (state <s1> ^retrieve-game sokoban138 -^opponent <o*1>)
    -->
    (<s1> ^retrieve-handle goal-default162 +)
}

sp {chunk-multi*chunk-predicate-impasse*apply*complete*action*snc*t23080-1
    :chunk
    (state <s1> ^gtype action ^retrieve-handle action-default153)
    -->
    (<s1> ^action <p1> +)
    (<p1> ^potential-args <p2> + ^parameter-set <p3> + ^formated predicate +
           ^primary-rtype single + ^nlp-set <p11> + ^verb-structure <v2> +
           ^aname action-default153 + ^handle action-default153 +)
    (<p3> ^argnum 5 +)
    (<p11> ^conditions <n1> + ^conditions <n2> + ^conditions <n3> +
           ^aname action-default153 +)
    (<n1> ^type state-pair + ^name on1 + ^attribute prepositions +
           ^result <r1> + ^parameter <p6> + ^negative false + ^args <a3> +
           ^rtype single +)
    (<r1> ^set <p4> +)
    (<p6> ^1 <p5> + ^2 <p7> + ^num 2 +)
    (<p5> ^type single + ^param-id 5 +)
    (<p7> ^type single + ^param-id 3 +)
    (<a3> ^1 <c1> + ^2 <c3> + ^num 2 +)
    (<c1> ^type attribute + ^name block + ^attribute category + ^result <r2> +
           ^parameter <p9> + ^negative false + ^args <a2> + ^rtype single +)
    (<r2> ^set <p8> +)
    (<p9> ^num 0 +)
    (<a2> ^1 <c2> + ^num 1 +)
    (<c2> ^type attribute + ^name object + ^attribute primitive +
           ^result <r3> + ^parameter <p10> + ^negative false + ^args <a1> +
           ^rtype single +)
    (<r3> ^set <r4> +)
    (<p10> ^num 0 +)
    (<n2> ^type state-pair + ^name on1 + ^attribute prepositions +
           ^result <r5> + ^parameter <p14> + ^negative false + ^args <a6> +
           ^rtype single +)
    (<r5> ^set <p12> +)
    (<p14> ^1 <p13> + ^2 <p15> + ^num 2 +)
    (<p13> ^type single + ^param-id 4 +)
    (<p15> ^type single + ^param-id 1 +)
    (<a6> ^1 <c4> + ^2 <c6> + ^num 2 +)
    (<c4> ^type attribute + ^name block + ^attribute category + ^result <r6> +
           ^parameter <p17> + ^negative false + ^args <a5> + ^rtype single +)
    (<r6> ^set <p16> +)
    (<p17> ^num 0 +)
    (<a5> ^1 <c5> + ^num 1 +)
    (<c5> ^type attribute + ^name object + ^attribute primitive +
           ^result <r7> + ^parameter <p18> + ^negative false + ^args <a4> +
           ^rtype single +)
    (<r7> ^set <r8> +)
    (<p18> ^num 0 +)
    (<c6> ^type concept + ^name covered + ^attribute predicate +
           ^result <r10> + ^parameter <p25> + ^negative false + ^args <a9> +
           ^rtype single +)
    (<r10> ^set <p24> +)
    (<p25> ^num 0 +)
    (<a9> ^1 <c7> + ^num 1 +)
    (<c7> ^type attribute + ^name location + ^attribute category +
           ^result <r11> + ^parameter <p27> + ^negative false + ^args <a8> +
           ^rtype single +)
    (<r11> ^set <p26> +)
    (<p27> ^num 0 +)
    (<a8> ^1 <c8> + ^num 1 +)
    (<c8> ^type attribute + ^name object + ^attribute primitive +
           ^result <r12> + ^parameter <p28> + ^negative false + ^args <a7> +
           ^rtype single +)
    (<r12> ^set <r13> +)
    (<p28> ^num 0 +)
    (<c3> ^type concept + ^name occupied + ^attribute predicate +
           ^result <r18> + ^parameter <p35> + ^negative false + ^args <a16> +
           ^rtype single +)
    (<r18> ^set <p34> +)
    (<p35> ^num 0 +)
    (<a16> ^1 <c12> + ^num 1 +)
    (<c12> ^type attribute + ^name location + ^attribute category +
           ^result <r19> + ^parameter <p37> + ^negative false + ^args <a15> +
           ^rtype single +)
    (<r19> ^set <p36> +)
    (<p37> ^num 0 +)
    (<a15> ^1 <c13> + ^num 1 +)
    (<c13> ^type attribute + ^name object + ^attribute primitive +
           ^result <r20> + ^parameter <p38> + ^negative false + ^args <a14> +
           ^rtype single +)
    (<r20> ^set <r21> +)
    (<p38> ^num 0 +)
    (<n3> ^type function + ^name between + ^result <r9> + ^parameter <p21> +
           ^negative false + ^args <a10> + ^rtype single +
           ^function board-between +)
    (<r9> ^set <p19> +)
    (<p21> ^1 <p20> + ^2 <p22> + ^3 <p23> + ^num 3 +)
    (<p20> ^type single + ^param-id 1 +)
    (<p22> ^type single + ^param-id 2 +)
    (<p23> ^type single + ^param-id 3 +)
    (<a10> ^1 <c6> + ^2 <c9> + ^3 <c3> + ^num 3 +)
    (<c9> ^type concept + ^name clear + ^attribute predicate + ^result <r14> +
           ^parameter <p30> + ^negative false + ^args <a13> + ^rtype single +)
    (<r14> ^set <p29> +)
    (<p30> ^num 0 +)
    (<a13> ^1 <c10> + ^num 1 +)
    (<c10> ^type attribute + ^name location + ^attribute category +
           ^result <r15> + ^parameter <p32> + ^negative false + ^args <a12> +
           ^rtype single +)
    (<r15> ^set <p31> +)
    (<p32> ^num 0 +)
    (<a12> ^1 <c11> + ^num 1 +)
    (<c11> ^type attribute + ^name object + ^attribute primitive +
           ^result <r16> + ^parameter <p33> + ^negative false + ^args <a11> +
           ^rtype single +)
    (<r16> ^set <r17> +)
    (<p33> ^num 0 +)
    (<v2> ^1 <v1> + ^2 <v3> +)
    (<v1> ^1 5 + ^2 1 + ^verb-name move1 + ^verb-prep on1 +)
    (<v3> ^1 4 + ^2 2 + ^verb-name move1 + ^verb-prep on1 +)
}

sp {chunk-multi*chunk-predicate-impasse*apply*complete*action*snc*t23072-1
    :chunk
    (state <s1> ^gtype action ^retrieve-handle action-default142)
    -->
    (<s1> ^action <p1> +)
    (<p1> ^potential-args <p2> + ^parameter-set <p3> + ^formated predicate +
           ^primary-rtype single + ^nlp-set <p13> + ^verb-structure <v2> +
           ^aname action-default142 + ^handle action-default142 +)
    (<p3> ^argnum 3 +)
    (<p13> ^conditions <n1> + ^conditions <n2> + ^aname action-default142 +)
    (<n1> ^type state-pair + ^name below1 + ^attribute prepositions +
           ^result <r1> + ^parameter <p6> + ^negative false + ^args <a1> +
           ^rtype single +)
    (<r1> ^set <p4> +)
    (<p6> ^1 <p5> + ^2 <p7> + ^num 2 +)
    (<p5> ^type single + ^param-id 2 +)
    (<p7> ^type single + ^param-id 1 +)
    (<a1> ^1 <c1> + ^2 <c2> + ^num 2 +)
    (<c2> ^type attribute + ^name blue1 + ^attribute color + ^result <r2> +
           ^parameter <p9> + ^negative false + ^args <a4> + ^rtype single +)
    (<r2> ^set <p8> +)
    (<p9> ^num 0 +)
    (<a4> ^1 <c3> + ^num 1 +)
    (<c3> ^type attribute + ^name block + ^attribute category + ^result <r3> +
           ^parameter <p11> + ^negative false + ^args <a3> + ^rtype single +)
    (<r3> ^set <p10> +)
    (<p11> ^num 0 +)
    (<a3> ^1 <c4> + ^num 1 +)
    (<c4> ^type attribute + ^name object + ^attribute primitive +
           ^result <r4> + ^parameter <p12> + ^negative false + ^args <a2> +
           ^rtype single +)
    (<r4> ^set <r5> +)
    (<p12> ^num 0 +)
    (<c1> ^type attribute + ^name location + ^attribute category +
           ^result <r7> + ^parameter <p19> + ^negative false + ^args <a6> +
           ^rtype single +)
    (<r7> ^set <p18> +)
    (<p19> ^num 0 +)
    (<a6> ^1 <c5> + ^num 1 +)
    (<c5> ^type attribute + ^name object + ^attribute primitive +
           ^result <r8> + ^parameter <p20> + ^negative false + ^args <a5> +
           ^rtype single +)
    (<r8> ^set <r9> +)
    (<p20> ^num 0 +)
    (<n2> ^type concept + ^name adjacent + ^attribute predicate +
           ^result <r6> + ^parameter <p16> + ^negative false + ^args <a7> +
           ^rtype single +)
    (<r6> ^set <p14> +)
    (<p16> ^1 <p15> + ^2 <p17> + ^num 2 +)
    (<p15> ^type single + ^param-id 2 +)
    (<p17> ^type single + ^param-id 3 +)
    (<a7> ^1 <c1> + ^2 <c6> + ^num 2 +)
    (<c6> ^type concept + ^name clear + ^attribute predicate + ^result <r10> +
           ^parameter <p22> + ^negative false + ^args <a10> + ^rtype single +)
    (<r10> ^set <p21> +)
    (<p22> ^num 0 +)
    (<a10> ^1 <c7> + ^num 1 +)
    (<c7> ^type attribute + ^name location + ^attribute category +
           ^result <r11> + ^parameter <p24> + ^negative false + ^args <a9> +
           ^rtype single +)
    (<r11> ^set <p23> +)
    (<p24> ^num 0 +)
    (<a9> ^1 <c8> + ^num 1 +)
    (<c8> ^type attribute + ^name object + ^attribute primitive +
           ^result <r12> + ^parameter <p25> + ^negative false + ^args <a8> +
           ^rtype single +)
    (<r12> ^set <r13> +)
    (<p25> ^num 0 +)
    (<v2> ^1 <v1> +)
    (<v1> ^1 1 + ^2 3 + ^verb-name move1 + ^verb-prep on1 +)
}

sp {chunk-multi*chunk-predicate-impasse*apply*complete*goal*snc*t23064-1
    :chunk
    (state <s1> ^gtype goal ^retrieve-handle goal-default162)
    -->
    (<s1> ^goal <p1> +)
    (<p1> ^potential-args <p2> + ^parameter-set <p3> + ^formated predicate +
           ^primary-rtype single + ^nlp-set <p17> + ^aname goal-default162 +
           ^handle goal-default162 +)
    (<p3> ^argnum 2 +)
    (<p17> ^conditions <n1> + ^conditions <n2> + ^aname goal-default162 +)
    (<n1> ^type state-pair + ^name on1 + ^attribute prepositions +
           ^result <r1> + ^parameter <p6> + ^negative false + ^args <a4> +
           ^rtype single +)
    (<r1> ^set <p4> +)
    (<p6> ^1 <p5> + ^num 1 +)
    (<p5> ^type single + ^param-id 2 +)
    (<a4> ^1 <c1> + ^2 <c4> + ^num 2 +)
    (<c1> ^type attribute + ^name green1 + ^attribute color + ^result <r2> +
           ^parameter <p8> + ^negative false + ^args <a3> + ^rtype single +)
    (<r2> ^set <p7> +)
    (<p8> ^num 0 +)
    (<a3> ^1 <c2> + ^num 1 +)
    (<c2> ^type attribute + ^name block + ^attribute category + ^result <r3> +
           ^parameter <p10> + ^negative false + ^args <a2> + ^rtype single +)
    (<r3> ^set <p9> +)
    (<p10> ^num 0 +)
    (<a2> ^1 <c3> + ^num 1 +)
    (<c3> ^type attribute + ^name object + ^attribute primitive +
           ^result <r4> + ^parameter <p11> + ^negative false + ^args <a1> +
           ^rtype single +)
    (<r4> ^set <r5> +)
    (<p11> ^num 0 +)
    (<c4> ^type attribute + ^name green1 + ^attribute color + ^result <r6> +
           ^parameter <p13> + ^negative false + ^args <a7> + ^rtype single +)
    (<r6> ^set <p12> +)
    (<p13> ^num 0 +)
    (<a7> ^1 <c5> + ^num 1 +)
    (<c5> ^type attribute + ^name location + ^attribute category +
           ^result <r7> + ^parameter <p15> + ^negative false + ^args <a6> +
           ^rtype single +)
    (<r7> ^set <p14> +)
    (<p15> ^num 0 +)
    (<a6> ^1 <c6> + ^num 1 +)
    (<c6> ^type attribute + ^name object + ^attribute primitive +
           ^result <r8> + ^parameter <p16> + ^negative false + ^args <a5> +
           ^rtype single +)
    (<r8> ^set <r9> +)
    (<p16> ^num 0 +)
    (<n2> ^type state-pair + ^name on1 + ^attribute prepositions +
           ^result <r10> + ^parameter <p20> + ^negative false + ^args <a11> +
           ^rtype single +)
    (<r10> ^set <p18> +)
    (<p20> ^1 <p19> + ^num 1 +)
    (<p19> ^type single + ^param-id 1 +)
    (<a11> ^1 <c7> + ^2 <c10> + ^num 2 +)
    (<c7> ^type attribute + ^name red1 + ^attribute color + ^result <r11> +
           ^parameter <p22> + ^negative false + ^args <a10> + ^rtype single +)
    (<r11> ^set <p21> +)
    (<p22> ^num 0 +)
    (<a10> ^1 <c8> + ^num 1 +)
    (<c8> ^type attribute + ^name block + ^attribute category +
           ^result <r12> + ^parameter <p24> + ^negative false + ^args <a9> +
           ^rtype single +)
    (<r12> ^set <p23> +)
    (<p24> ^num 0 +)
    (<a9> ^1 <c9> + ^num 1 +)
    (<c9> ^type attribute + ^name object + ^attribute primitive +
           ^result <r13> + ^parameter <p25> + ^negative false + ^args <a8> +
           ^rtype single +)
    (<r13> ^set <r14> +)
    (<p25> ^num 0 +)
    (<c10> ^type attribute + ^name red1 + ^attribute color + ^result <r15> +
           ^parameter <p27> + ^negative false + ^args <a14> + ^rtype single +)
    (<r15> ^set <p26> +)
    (<p27> ^num 0 +)
    (<a14> ^1 <c11> + ^num 1 +)
    (<c11> ^type attribute + ^name location + ^attribute category +
           ^result <r16> + ^parameter <p29> + ^negative false + ^args <a13> +
           ^rtype single +)
    (<r16> ^set <p28> +)
    (<p29> ^num 0 +)
    (<a13> ^1 <c12> + ^num 1 +)
    (<c12> ^type attribute + ^name object + ^attribute primitive +
           ^result <r17> + ^parameter <p30> + ^negative false + ^args <a12> +
           ^rtype single +)
    (<r17> ^set <r18> +)
    (<p30> ^num 0 +)
}

sp {chunk*justification-15482*onc*t21743-1
    :chunk
    (state <s1> ^diff-table <d1> ^list <l1> ^gtype <c5> ^gtype <c1> ^<c5> <a1>
          ^<c1> <a1>)
    (<d1> ^diff <d3> ^diff <d2>)
    (<d3> ^result 1 ^pair <p3> ^pair <p2>)
    (<d2> ^result 2 ^pair <p1>)
    (<p3> ^num <c4> ^num { <> <c4> <c3> })
    (<p2> ^num <c4> ^num { <> <c3> <> <c4> <c2> })
    (<p1> ^num <c3> ^num <c2>)
    (<a1> ^condition <n1>)
    (<n1> ^function board-between ^rtype single ^name between ^type function
          ^args <a2> ^negative <c6> ^parameter <p4> ^result <r1>)
    (<a2> ^num 3 ^1 <c9> ^2 <c7> ^3 <c8>)
    (<c9> ^rtype single ^result <r2>)
    (<l1> ^game <g1>)
    (<c8> ^result <r4>)
    (<r4> ^set <p8>)
    (<p8> ^instance <i3>)
    (<i3> ^1 <n4>)
    (<n4> ^predicates <p11>)
    (<c7> ^result <r3>)
    (<r3> ^set <p7>)
    (<p7> ^instance <i2>)
    (<i2> ^1 <n3>)
    (<n3> ^predicates <p10>)
    (<p11> ^{ << x y >> <c12> } <c2> ^<c10> <c11>)
    (<p10> ^<c12> <c3> ^<c10> <c11>)
    (<r2> ^set <p6>)
    (<p6> ^instance <i1>)
    (<i1> ^1 <n2>)
    (<n2> ^predicates <p9>)
    (<p9> ^<c12> <c4> ^{ << x y >> <> <c12> <c10> } <c11>)
    (<r1> ^set <p5>)
    -->
    (<p5> ^instance <s2> +)
    (<s2> ^2 <n3> + ^3 <n4> + ^1 <n2> +)
}

sp {chunk-multi*chunk-puzzle-impasse*apply*complete*snc*t18781-2
    :chunk
    (state <s1> ^retrieve-game eight-puzzle-iso135 -^opponent <o*1>)
    -->
    (<s1> ^retrieve-handle slide-block102 +)
}

sp {chunk-multi*chunk-puzzle-impasse*apply*complete*snc*t18781-1
    :chunk
    (state <s1> ^retrieve-game eight-puzzle-iso135 -^opponent <o*1>)
    -->
    (<s1> ^retrieve-handle goal-default137 +)
}

sp {chunk-multi*chunk-predicate-impasse*apply*complete*goal*snc*t18772-1
    :chunk
    (state <s1> ^gtype goal ^retrieve-handle goal-default137)
    -->
    (<s1> ^goal <p1> +)
    (<p1> ^potential-args <p2> + ^parameter-set <p3> + ^formated predicate +
           ^primary-rtype set + ^nlp-set <p14> + ^aname goal-default137 +
           ^handle goal-default137 +)
    (<p3> ^argnum 2 +)
    (<p14> ^conditions <n1> + ^conditions <n2> + ^aname goal-default137 +)
    (<n1> ^type function + ^name count + ^result <r1> + ^parameter <p6> +
           ^negative false + ^args <a4> + ^rtype single +
           ^return-type number + ^function soar-count +)
    (<r1> ^set <p4> +)
    (<p6> ^1 <p5> + ^2 <p7> + ^num 2 +)
    (<p5> ^type single + ^param-id 2 +)
    (<p7> ^type set + ^param-id 1 +)
    (<a4> ^2 <c1> + ^num 1 +)
    (<c1> ^type concept + ^name matched + ^attribute predicate +
           ^result <r2> + ^parameter <p10> + ^negative false + ^args <a3> +
           ^rtype set +)
    (<r2> ^set <p8> +)
    (<p10> ^1 <p9> + ^num 1 +)
    (<p9> ^type set + ^param-id 1 +)
    (<a3> ^1 <c2> + ^num 1 +)
    (<c2> ^type attribute + ^name location + ^attribute category +
           ^result <r3> + ^parameter <p12> + ^negative false + ^args <a2> +
           ^rtype single +)
    (<r3> ^set <p11> +)
    (<p12> ^num 0 +)
    (<a2> ^1 <c3> + ^num 1 +)
    (<c3> ^type attribute + ^name object + ^attribute primitive +
           ^result <r4> + ^parameter <p13> + ^negative false + ^args <a1> +
           ^rtype single +)
    (<r4> ^set <r5> +)
    (<p13> ^num 0 +)
    (<n2> ^name number + ^result <r6> + ^parameter <p16> + ^negative false +
           ^args <a5> + ^rtype single + ^return-type number +)
    (<r6> ^set <s2> +)
    (<s2> ^instance <i1> +)
    (<i1> ^1 8 +)
    (<p16> ^1 <p15> + ^num 1 +)
    (<p15> ^type single + ^param-id 2 +)
}

sp {chunk-multi*chunk-puzzle-impasse*apply*complete*snc*t17492-3
    :chunk
    (state <s1> ^retrieve-game connect-all-3134 -^opponent <o*1>)
    -->
    (<s1> ^retrieve-handle place-block127 +)
}

sp {chunk-multi*chunk-puzzle-impasse*apply*complete*snc*t17492-2
    :chunk
    (state <s1> ^retrieve-game connect-all-3134 -^opponent <o*1>)
    -->
    (<s1> ^retrieve-handle three-in-a-row130 +)
}

sp {chunk-multi*chunk-puzzle-impasse*apply*complete*snc*t17492-1
    :chunk
    (state <s1> ^retrieve-game connect-all-3134 -^opponent <o*1>)
    -->
    (<s1> ^retrieve-handle enemy-3-in-a-row132 +)
}

sp {chunk-multi*chunk-puzzle-impasse*apply*complete*snc*t16044-3
    :chunk
    (state <s1> ^retrieve-game tic-tac-toe126 -^opponent <o*1>)
    -->
    (<s1> ^retrieve-handle place-block127 +)
}

sp {chunk-multi*chunk-puzzle-impasse*apply*complete*snc*t16044-2
    :chunk
    (state <s1> ^retrieve-game tic-tac-toe126 -^opponent <o*1>)
    -->
    (<s1> ^retrieve-handle three-in-a-row130 +)
}

sp {chunk-multi*chunk-puzzle-impasse*apply*complete*snc*t16044-1
    :chunk
    (state <s1> ^retrieve-game tic-tac-toe126 -^opponent <o*1>)
    -->
    (<s1> ^retrieve-handle enemy-3-in-a-row132 +)
}

sp {chunk-multi*chunk-predicate-impasse*apply*complete*goal*snc*t16035-1
    :chunk
    (state <s1> ^gtype goal ^retrieve-handle three-in-a-row130)
    -->
    (<s1> ^goal <p1> +)
    (<p1> ^potential-args <p2> + ^parameter-set <p3> + ^formated predicate +
           ^primary-rtype set + ^nlp-set <p4> + ^aname three-in-a-row130 +
           ^handle three-in-a-row130 +)
    (<p3> ^argnum 2 +)
    (<p4> ^conditions <n1> + ^conditions <n2> + ^conditions <n3> +
           ^aname three-in-a-row130 +)
    (<n1> ^type concept + ^name captured + ^attribute predicate +
           ^result <r2> + ^parameter <p11> + ^negative false + ^args <a4> +
           ^rtype set +)
    (<r2> ^set <p9> +)
    (<p11> ^1 <p10> + ^num 1 +)
    (<p10> ^type set + ^param-id 1 +)
    (<a4> ^1 <c1> + ^num 1 +)
    (<c1> ^type state-pair + ^name linear + ^attribute preposition +
           ^result <r3> + ^parameter <p14> + ^negative false + ^args <a3> +
           ^rtype set +)
    (<r3> ^set <p12> +)
    (<p14> ^1 <p13> + ^num 1 +)
    (<p13> ^type set + ^param-id 1 +)
    (<a3> ^1 <c2> + ^num 1 +)
    (<c2> ^type attribute + ^name location + ^attribute category +
           ^result <r4> + ^parameter <p16> + ^negative false + ^args <a2> +
           ^rtype single +)
    (<r4> ^set <p15> +)
    (<p16> ^num 0 +)
    (<a2> ^1 <c3> + ^num 1 +)
    (<c3> ^type attribute + ^name object + ^attribute primitive +
           ^result <r5> + ^parameter <p17> + ^negative false + ^args <a1> +
           ^rtype single +)
    (<r5> ^set <r6> +)
    (<p17> ^num 0 +)
    (<n2> ^type function + ^name count + ^result <r1> + ^parameter <p7> +
           ^negative false + ^args <a5> + ^rtype single +
           ^return-type number + ^function soar-count +)
    (<r1> ^set <p5> +)
    (<p7> ^1 <p6> + ^2 <p8> + ^num 2 +)
    (<p6> ^type single + ^param-id 2 +)
    (<p8> ^type set + ^param-id 1 +)
    (<a5> ^2 <n1> + ^num 1 +)
    (<n3> ^name number + ^result <r7> + ^parameter <p19> + ^negative false +
           ^args <a6> + ^rtype single + ^return-type number +)
    (<r7> ^set <s2> +)
    (<s2> ^instance <i1> +)
    (<i1> ^1 3 +)
    (<p19> ^1 <p18> + ^num 1 +)
    (<p18> ^type single + ^param-id 2 +)
}

sp {chunk-multi*chunk-predicate-impasse*apply*complete*failure*snc*t16027-1
    :chunk
    (state <s1> ^gtype failure ^retrieve-handle enemy-3-in-a-row132)
    -->
    (<s1> ^failure <p1> +)
    (<p1> ^potential-args <p2> + ^parameter-set <p3> + ^formated predicate +
           ^primary-rtype set + ^nlp-set <p4> + ^aname enemy-3-in-a-row132 +
           ^handle enemy-3-in-a-row132 +)
    (<p3> ^argnum 2 +)
    (<p4> ^conditions <n1> + ^conditions <n2> + ^conditions <n3> +
           ^aname enemy-3-in-a-row132 +)
    (<n1> ^type concept + ^name occupied + ^attribute predicate +
           ^result <r2> + ^parameter <p11> + ^negative false + ^args <a4> +
           ^rtype set +)
    (<r2> ^set <p9> +)
    (<p11> ^1 <p10> + ^num 1 +)
    (<p10> ^type set + ^param-id 1 +)
    (<a4> ^1 <c1> + ^num 1 +)
    (<c1> ^type state-pair + ^name linear + ^attribute preposition +
           ^result <r3> + ^parameter <p14> + ^negative false + ^args <a3> +
           ^rtype set +)
    (<r3> ^set <p12> +)
    (<p14> ^1 <p13> + ^num 1 +)
    (<p13> ^type set + ^param-id 1 +)
    (<a3> ^1 <c2> + ^num 1 +)
    (<c2> ^type attribute + ^name location + ^attribute category +
           ^result <r4> + ^parameter <p16> + ^negative false + ^args <a2> +
           ^rtype single +)
    (<r4> ^set <p15> +)
    (<p16> ^num 0 +)
    (<a2> ^1 <c3> + ^num 1 +)
    (<c3> ^type attribute + ^name object + ^attribute primitive +
           ^result <r5> + ^parameter <p17> + ^negative false + ^args <a1> +
           ^rtype single +)
    (<r5> ^set <r6> +)
    (<p17> ^num 0 +)
    (<n2> ^type function + ^name count + ^result <r1> + ^parameter <p7> +
           ^negative false + ^args <a5> + ^rtype single +
           ^return-type number + ^function soar-count +)
    (<r1> ^set <p5> +)
    (<p7> ^1 <p6> + ^2 <p8> + ^num 2 +)
    (<p6> ^type single + ^param-id 2 +)
    (<p8> ^type set + ^param-id 1 +)
    (<a5> ^2 <n1> + ^num 1 +)
    (<n3> ^name number + ^result <r7> + ^parameter <p19> + ^negative false +
           ^args <a6> + ^rtype single + ^return-type number +)
    (<r7> ^set <s2> +)
    (<s2> ^instance <i1> +)
    (<i1> ^1 3 +)
    (<p19> ^1 <p18> + ^num 1 +)
    (<p18> ^type single + ^param-id 2 +)
}

sp {chunk-multi*chunk-predicate-impasse*apply*complete*action*snc*t16019-1
    :chunk
    (state <s1> ^gtype action ^retrieve-handle place-block127)
    -->
    (<s1> ^action <p1> +)
    (<p1> ^potential-args <p2> + ^parameter-set <p3> + ^formated predicate +
           ^primary-rtype single + ^nlp-set <p10> + ^verb-structure <v2> +
           ^aname place-block127 + ^handle place-block127 +)
    (<p3> ^argnum 2 +)
    (<p10> ^conditions <c1> + ^conditions <c4> + ^aname place-block127 +)
    (<c1> ^type concept + ^name clear + ^attribute predicate + ^result <r1> +
           ^parameter <p6> + ^negative false + ^args <a3> + ^rtype single +)
    (<r1> ^set <p4> +)
    (<p6> ^1 <p5> + ^num 1 +)
    (<p5> ^type single + ^param-id 2 +)
    (<a3> ^1 <c2> + ^num 1 +)
    (<c2> ^type attribute + ^name location + ^attribute category +
           ^result <r2> + ^parameter <p8> + ^negative false + ^args <a2> +
           ^rtype single +)
    (<r2> ^set <p7> +)
    (<p8> ^num 0 +)
    (<a2> ^1 <c3> + ^num 1 +)
    (<c3> ^type attribute + ^name object + ^attribute primitive +
           ^result <r3> + ^parameter <p9> + ^negative false + ^args <a1> +
           ^rtype single +)
    (<r3> ^set <r4> +)
    (<p9> ^num 0 +)
    (<c4> ^type concept + ^name free + ^attribute predicate + ^result <r5> +
           ^parameter <p13> + ^negative false + ^args <a8> + ^rtype single +)
    (<r5> ^set <p11> +)
    (<p13> ^1 <p12> + ^num 1 +)
    (<p12> ^type single + ^param-id 1 +)
    (<a8> ^1 <c5> + ^num 1 +)
    (<c5> ^type concept + ^name clear + ^attribute predicate + ^result <r6> +
           ^parameter <p15> + ^negative false + ^args <a7> + ^rtype single +)
    (<r6> ^set <p14> +)
    (<p15> ^num 0 +)
    (<a7> ^1 <c6> + ^num 1 +)
    (<c6> ^type attribute + ^name red1 + ^attribute color + ^result <r7> +
           ^parameter <p17> + ^negative false + ^args <a6> + ^rtype single +)
    (<r7> ^set <p16> +)
    (<p17> ^num 0 +)
    (<a6> ^1 <c7> + ^num 1 +)
    (<c7> ^type attribute + ^name block + ^attribute category + ^result <r8> +
           ^parameter <p19> + ^negative false + ^args <a5> + ^rtype single +)
    (<r8> ^set <p18> +)
    (<p19> ^num 0 +)
    (<a5> ^1 <c8> + ^num 1 +)
    (<c8> ^type attribute + ^name object + ^attribute primitive +
           ^result <r9> + ^parameter <p20> + ^negative false + ^args <a4> +
           ^rtype single +)
    (<r9> ^set <r10> +)
    (<p20> ^num 0 +)
    (<v2> ^1 <v1> +)
    (<v1> ^1 1 + ^2 2 + ^verb-name move1 + ^verb-prep on1 +)
}

sp {chunk-multi*chunk-puzzle-impasse*apply*complete*snc*t13489-2
    :chunk
    (state <s1> ^retrieve-game world-blocks118 -^opponent <o*1>)
    -->
    (<s1> ^retrieve-handle action-default121 +)
}

sp {chunk-multi*chunk-puzzle-impasse*apply*complete*snc*t13489-1
    :chunk
    (state <s1> ^retrieve-game world-blocks118 -^opponent <o*1>)
    -->
    (<s1> ^retrieve-handle goal-default125 +)
}

sp {chunk-multi*chunk-predicate-impasse*apply*complete*goal*snc*t13480-1
    :chunk
    (state <s1> ^gtype goal ^retrieve-handle goal-default125)
    -->
    (<s1> ^goal <p1> +)
    (<p1> ^potential-args <p2> + ^parameter-set <p3> + ^formated predicate +
           ^primary-rtype single + ^nlp-set <p12> + ^aname goal-default125 +
           ^handle goal-default125 +)
    (<p3> ^argnum 1 +)
    (<p12> ^conditions <n1> + ^conditions <n2> + ^aname goal-default125 +)
    (<n1> ^type state-pair + ^name on1 + ^attribute prepositions +
           ^result <r1> + ^parameter <p6> + ^negative false + ^args <a1> +
           ^rtype single +)
    (<r1> ^set <p4> +)
    (<p6> ^1 <p5> + ^num 1 +)
    (<p5> ^type single + ^param-id 1 +)
    (<a1> ^1 <c1> + ^2 <c2> + ^num 2 +)
    (<c2> ^type attribute + ^name purple1 + ^attribute color + ^result <r2> +
           ^parameter <p8> + ^negative false + ^args <a4> + ^rtype single +)
    (<r2> ^set <p7> +)
    (<p8> ^num 0 +)
    (<a4> ^1 <c3> + ^num 1 +)
    (<c3> ^type attribute + ^name block + ^attribute category + ^result <r3> +
           ^parameter <p10> + ^negative false + ^args <a3> + ^rtype single +)
    (<r3> ^set <p9> +)
    (<p10> ^num 0 +)
    (<a3> ^1 <c4> + ^num 1 +)
    (<c4> ^type attribute + ^name object + ^attribute primitive +
           ^result <r4> + ^parameter <p11> + ^negative false + ^args <a2> +
           ^rtype single +)
    (<r4> ^set <r5> +)
    (<p11> ^num 0 +)
    (<c1> ^type attribute + ^name blue1 + ^attribute color + ^result <r7> +
           ^parameter <p17> + ^negative false + ^args <a7> + ^rtype single +)
    (<r7> ^set <p16> +)
    (<p17> ^num 0 +)
    (<a7> ^1 <c5> + ^num 1 +)
    (<c5> ^type attribute + ^name block + ^attribute category + ^result <r8> +
           ^parameter <p19> + ^negative false + ^args <a6> + ^rtype single +)
    (<r8> ^set <p18> +)
    (<p19> ^num 0 +)
    (<a6> ^1 <c6> + ^num 1 +)
    (<c6> ^type attribute + ^name object + ^attribute primitive +
           ^result <r9> + ^parameter <p20> + ^negative false + ^args <a5> +
           ^rtype single +)
    (<r9> ^set <r10> +)
    (<p20> ^num 0 +)
    (<n2> ^type state-pair + ^name below1 + ^attribute prepositions +
           ^result <r6> + ^parameter <p15> + ^negative false + ^args <a8> +
           ^rtype single +)
    (<r6> ^set <p13> +)
    (<p15> ^1 <p14> + ^num 1 +)
    (<p14> ^type single + ^param-id 1 +)
    (<a8> ^1 <c1> + ^2 <c7> + ^num 2 +)
    (<c7> ^type attribute + ^name yellow1 + ^attribute color + ^result <r11> +
           ^parameter <p22> + ^negative false + ^args <a11> + ^rtype single +)
    (<r11> ^set <p21> +)
    (<p22> ^num 0 +)
    (<a11> ^1 <c8> + ^num 1 +)
    (<c8> ^type attribute + ^name block + ^attribute category +
           ^result <r12> + ^parameter <p24> + ^negative false + ^args <a10> +
           ^rtype single +)
    (<r12> ^set <p23> +)
    (<p24> ^num 0 +)
    (<a10> ^1 <c9> + ^num 1 +)
    (<c9> ^type attribute + ^name object + ^attribute primitive +
           ^result <r13> + ^parameter <p25> + ^negative false + ^args <a9> +
           ^rtype single +)
    (<r13> ^set <r14> +)
    (<p25> ^num 0 +)
}

sp {chunk-multi*chunk-predicate-impasse*apply*complete*action*snc*t13472-1
    :chunk
    (state <s1> ^gtype action ^retrieve-handle action-default121)
    -->
    (<s1> ^action <p1> +)
    (<p1> ^potential-args <p2> + ^parameter-set <p3> + ^formated predicate +
           ^primary-rtype single + ^nlp-set <p9> + ^verb-structure <v2> +
           ^aname action-default121 + ^handle action-default121 +)
    (<p3> ^argnum 2 +)
    (<p9> ^conditions <c1> + ^conditions <c3> + ^aname action-default121 +)
    (<c1> ^type concept + ^name clear + ^attribute predicate + ^result <r1> +
           ^parameter <p6> + ^negative false + ^args <a2> + ^rtype single +)
    (<r1> ^set <p4> +)
    (<p6> ^1 <p5> + ^num 1 +)
    (<p5> ^type single + ^param-id 2 +)
    (<a2> ^1 <c2> + ^num 1 +)
    (<c2> ^type attribute + ^name object + ^attribute primitive +
           ^result <r2> + ^parameter <p8> + ^negative false + ^args <a1> +
           ^rtype single +)
    (<r2> ^set <p7> +)
    (<p8> ^num 0 +)
    (<c3> ^type concept + ^name clear + ^attribute predicate + ^result <r3> +
           ^parameter <p12> + ^negative false + ^args <a5> + ^rtype single +)
    (<r3> ^set <p10> +)
    (<p12> ^1 <p11> + ^num 1 +)
    (<p11> ^type single + ^param-id 1 +)
    (<a5> ^1 <c4> + ^num 1 +)
    (<c4> ^type attribute + ^name block + ^attribute category + ^result <r4> +
           ^parameter <p14> + ^negative false + ^args <a4> + ^rtype single +)
    (<r4> ^set <p13> +)
    (<p14> ^num 0 +)
    (<a4> ^1 <c5> + ^num 1 +)
    (<c5> ^type attribute + ^name object + ^attribute primitive +
           ^result <r5> + ^parameter <p15> + ^negative false + ^args <a3> +
           ^rtype single +)
    (<r5> ^set <r6> +)
    (<p15> ^num 0 +)
    (<v2> ^1 <v1> +)
    (<v1> ^1 1 + ^2 2 + ^verb-name move1 + ^verb-prep on1 +)
}

sp {chunk-multi*chunk-puzzle-impasse*apply*complete*snc*t11850-2
    :chunk
    (state <s1> ^retrieve-game iso-five-puzzle101 -^opponent <o*1>)
    -->
    (<s1> ^retrieve-handle slide-block102 +)
}

sp {chunk-multi*chunk-puzzle-impasse*apply*complete*snc*t11850-1
    :chunk
    (state <s1> ^retrieve-game iso-five-puzzle101 -^opponent <o*1>)
    -->
    (<s1> ^retrieve-handle goal-default117 +)
}

sp {chunk-multi*chunk-predicate-impasse*apply*complete*goal*snc*t11841-1
    :chunk
    (state <s1> ^gtype goal ^retrieve-handle goal-default117)
    -->
    (<s1> ^goal <p1> +)
    (<p1> ^potential-args <p2> + ^parameter-set <p3> + ^formated predicate +
           ^primary-rtype set + ^nlp-set <p14> + ^aname goal-default117 +
           ^handle goal-default117 +)
    (<p3> ^argnum 2 +)
    (<p14> ^conditions <n1> + ^conditions <n2> + ^aname goal-default117 +)
    (<n1> ^type function + ^name count + ^result <r1> + ^parameter <p6> +
           ^negative false + ^args <a4> + ^rtype single +
           ^return-type number + ^function soar-count +)
    (<r1> ^set <p4> +)
    (<p6> ^1 <p5> + ^2 <p7> + ^num 2 +)
    (<p5> ^type single + ^param-id 2 +)
    (<p7> ^type set + ^param-id 1 +)
    (<a4> ^2 <c1> + ^num 1 +)
    (<c1> ^type concept + ^name matched + ^attribute predicate +
           ^result <r2> + ^parameter <p10> + ^negative false + ^args <a3> +
           ^rtype set +)
    (<r2> ^set <p8> +)
    (<p10> ^1 <p9> + ^num 1 +)
    (<p9> ^type set + ^param-id 1 +)
    (<a3> ^1 <c2> + ^num 1 +)
    (<c2> ^type attribute + ^name location + ^attribute category +
           ^result <r3> + ^parameter <p12> + ^negative false + ^args <a2> +
           ^rtype single +)
    (<r3> ^set <p11> +)
    (<p12> ^num 0 +)
    (<a2> ^1 <c3> + ^num 1 +)
    (<c3> ^type attribute + ^name object + ^attribute primitive +
           ^result <r4> + ^parameter <p13> + ^negative false + ^args <a1> +
           ^rtype single +)
    (<r4> ^set <r5> +)
    (<p13> ^num 0 +)
    (<n2> ^name number + ^result <r6> + ^parameter <p16> + ^negative false +
           ^args <a5> + ^rtype single + ^return-type number +)
    (<r6> ^set <s2> +)
    (<s2> ^instance <i1> +)
    (<i1> ^1 5 +)
    (<p16> ^1 <p15> + ^num 1 +)
    (<p15> ^type single + ^param-id 2 +)
}

sp {chunk-multi*chunk-predicate-impasse*apply*complete*action*snc*t11833-1
    :chunk
    (state <s1> ^gtype action ^retrieve-handle slide-block102)
    -->
    (<s1> ^action <p1> +)
    (<p1> ^potential-args <p2> + ^parameter-set <p3> + ^formated predicate +
           ^primary-rtype single + ^nlp-set <p13> + ^verb-structure <v2> +
           ^aname slide-block102 + ^handle slide-block102 +)
    (<p3> ^argnum 3 +)
    (<p13> ^conditions <n1> + ^conditions <n2> + ^aname slide-block102 +)
    (<n1> ^type concept + ^name adjacent + ^attribute predicate +
           ^result <r1> + ^parameter <p6> + ^negative false + ^args <a1> +
           ^rtype single +)
    (<r1> ^set <p4> +)
    (<p6> ^1 <p5> + ^2 <p7> + ^num 2 +)
    (<p5> ^type single + ^param-id 3 +)
    (<p7> ^type single + ^param-id 2 +)
    (<a1> ^1 <c1> + ^2 <c2> + ^num 2 +)
    (<c2> ^type concept + ^name clear + ^attribute predicate + ^result <r2> +
           ^parameter <p9> + ^negative false + ^args <a4> + ^rtype single +)
    (<r2> ^set <p8> +)
    (<p9> ^num 0 +)
    (<a4> ^1 <c3> + ^num 1 +)
    (<c3> ^type attribute + ^name location + ^attribute category +
           ^result <r3> + ^parameter <p11> + ^negative false + ^args <a3> +
           ^rtype single +)
    (<r3> ^set <p10> +)
    (<p11> ^num 0 +)
    (<a3> ^1 <c4> + ^num 1 +)
    (<c4> ^type attribute + ^name object + ^attribute primitive +
           ^result <r4> + ^parameter <p12> + ^negative false + ^args <a2> +
           ^rtype single +)
    (<r4> ^set <r5> +)
    (<p12> ^num 0 +)
    (<c1> ^type attribute + ^name location + ^attribute category +
           ^result <r10> + ^parameter <p22> + ^negative false + ^args <a9> +
           ^rtype single +)
    (<r10> ^set <p21> +)
    (<p22> ^num 0 +)
    (<a9> ^1 <c7> + ^num 1 +)
    (<c7> ^type attribute + ^name object + ^attribute primitive +
           ^result <r11> + ^parameter <p23> + ^negative false + ^args <a8> +
           ^rtype single +)
    (<r11> ^set <r12> +)
    (<p23> ^num 0 +)
    (<n2> ^type state-pair + ^name on1 + ^attribute prepositions +
           ^result <r6> + ^parameter <p16> + ^negative false + ^args <a7> +
           ^rtype single +)
    (<r6> ^set <p14> +)
    (<p16> ^1 <p15> + ^2 <p17> + ^num 2 +)
    (<p15> ^type single + ^param-id 1 +)
    (<p17> ^type single + ^param-id 3 +)
    (<a7> ^1 <c5> + ^2 <c1> + ^num 2 +)
    (<c5> ^type attribute + ^name block + ^attribute category + ^result <r7> +
           ^parameter <p19> + ^negative false + ^args <a6> + ^rtype single +)
    (<r7> ^set <p18> +)
    (<p19> ^num 0 +)
    (<a6> ^1 <c6> + ^num 1 +)
    (<c6> ^type attribute + ^name object + ^attribute primitive +
           ^result <r8> + ^parameter <p20> + ^negative false + ^args <a5> +
           ^rtype single +)
    (<r8> ^set <r9> +)
    (<p20> ^num 0 +)
    (<v2> ^1 <v1> +)
    (<v1> ^1 1 + ^2 2 + ^verb-name move1 + ^verb-prep on1 +)
}

sp {chunk-multi*chunk-predicate-impasse*apply*complete*snc*t11725-1
    :chunk
    (state <s1> ^gtype <c2> ^<c2> <g1>)
    (<g1> ^condition <c1>)
    (<c1> ^name matched ^type concept ^attribute predicate)
    -->
    (<s1> ^predicate <p1> + ^gtype predicate +)
    (<p1> ^link <c1> + ^potential-args <p2> + ^parameter-set <p3> +
           ^formated predicate + ^primary-rtype single + ^nlp-set <p8> +
           ^aname matched + ^handle matched +)
    (<p3> ^argnum 3 +)
    (<p8> ^conditions <n1> + ^conditions <n2> + ^conditions <n3> +
           ^aname matched +)
    (<n1> ^type attribute-of + ^name value + ^result <r1> + ^parameter <p6> +
           ^negative false + ^args <a1> + ^rtype single +
           ^return-type number +)
    (<r1> ^set <p4> +)
    (<p6> ^1 <p5> + ^2 <p7> + ^num 2 +)
    (<p5> ^type single + ^param-id 3 +)
    (<p7> ^type single + ^param-id 1 +)
    (<a1> ^2 <c3> + ^num 1 +)
    (<n2> ^type attribute-of + ^name value + ^result <r2> + ^parameter <p11> +
           ^negative false + ^args <a2> + ^rtype single +
           ^return-type number +)
    (<r2> ^set <p9> +)
    (<p11> ^1 <p10> + ^2 <p12> + ^num 2 +)
    (<p10> ^type single + ^param-id 3 +)
    (<p12> ^type single + ^param-id 2 +)
    (<a2> ^2 <c4> + ^num 1 +)
    (<c4> ^type attribute + ^name block + ^attribute category + ^result <r4> +
           ^parameter <p18> + ^negative false + ^args <a4> + ^rtype single +)
    (<r4> ^set <p17> +)
    (<p18> ^num 0 +)
    (<a4> ^1 <c5> + ^num 1 +)
    (<c5> ^type attribute + ^name object + ^attribute primitive +
           ^result <r5> + ^parameter <p19> + ^negative false + ^args <a3> +
           ^rtype single +)
    (<r5> ^set <r6> +)
    (<p19> ^num 0 +)
    (<c3> ^name object + ^attribute input-arg + ^result <r7> +
           ^parameter <p21> + ^negative false + ^args <a6> + ^rtype single +)
    (<r7> ^set <r8> +)
    (<p21> ^1 <p20> + ^num 1 +)
    (<p20> ^type single + ^param-id 1 +)
    (<n3> ^type state-pair + ^name on1 + ^attribute prepositions +
           ^result <r3> + ^parameter <p15> + ^negative false + ^args <a5> +
           ^rtype single +)
    (<r3> ^set <p13> +)
    (<p15> ^1 <p14> + ^2 <p16> + ^num 2 +)
    (<p14> ^type single + ^param-id 2 +)
    (<p16> ^type single + ^param-id 1 +)
    (<a5> ^1 <c4> + ^2 <c3> + ^num 2 +)
}

sp {chunk*justification-9227*t11362-1
    :chunk
    (state <s1> ^list <l1> ^gtype <c2> ^gtype <c1> ^<c2> <a1> ^<c1> <a1>)
    (<a1> ^condition <n1>)
    (<n1> ^type attribute-of ^args <a2> ^parameter <p1> ^negative <c3>
          ^result <r1> ^name <c4>)
    (<a2> ^num 1 ^2 <c5>)
    (<p1> ^num 2)
    (<c5> -^rtype set ^result <r2>)
    (<l1> ^game <g1>)
    (<r2> ^set <r3>)
    (<r3> ^instance <i1>)
    (<i1> ^1 <n2>)
    (<n2> ^predicates <p3>)
    (<r1> ^set <p2>)
    (<p3> ^<c4> <c6>)
    -->
    (<p2> ^instance <i2> +)
    (<i2> ^2 <n2> + ^1 <c6> +)
}

sp {chunk-multi*chunk-puzzle-impasse*apply*complete*snc*t9195-4
    :chunk
    (state <s1> ^retrieve-game connect-447 -^opponent <o*1>)
    -->
    (<s1> ^retrieve-handle bottom-drop48 +)
}

sp {chunk-multi*chunk-puzzle-impasse*apply*complete*snc*t9195-3
    :chunk
    (state <s1> ^retrieve-game connect-447 -^opponent <o*1>)
    -->
    (<s1> ^retrieve-handle stack-drop62 +)
}

sp {chunk-multi*chunk-puzzle-impasse*apply*complete*snc*t9195-2
    :chunk
    (state <s1> ^retrieve-game connect-447 -^opponent <o*1>)
    -->
    (<s1> ^retrieve-handle enemy-4-in-a-row85 +)
}

sp {chunk-multi*chunk-puzzle-impasse*apply*complete*snc*t9195-1
    :chunk
    (state <s1> ^retrieve-game connect-447 -^opponent <o*1>)
    -->
    (<s1> ^retrieve-handle four-in-a-row93 +)
}

sp {chunk-multi*chunk-predicate-impasse*apply*complete*goal*snc*t9186-1
    :chunk
    (state <s1> ^gtype goal ^retrieve-handle four-in-a-row93)
    -->
    (<s1> ^goal <p1> +)
    (<p1> ^potential-args <p2> + ^parameter-set <p3> + ^formated predicate +
           ^primary-rtype set + ^nlp-set <p4> + ^aname four-in-a-row93 +
           ^handle four-in-a-row93 +)
    (<p3> ^argnum 2 +)
    (<p4> ^conditions <n1> + ^conditions <n2> + ^conditions <n3> +
           ^aname four-in-a-row93 +)
    (<n1> ^type concept + ^name captured + ^attribute predicate +
           ^result <r2> + ^parameter <p11> + ^negative false + ^args <a4> +
           ^rtype set +)
    (<r2> ^set <p9> +)
    (<p11> ^1 <p10> + ^num 1 +)
    (<p10> ^type set + ^param-id 1 +)
    (<a4> ^1 <c1> + ^num 1 +)
    (<c1> ^type state-pair + ^name linear + ^attribute preposition +
           ^result <r3> + ^parameter <p14> + ^negative false + ^args <a3> +
           ^rtype set +)
    (<r3> ^set <p12> +)
    (<p14> ^1 <p13> + ^num 1 +)
    (<p13> ^type set + ^param-id 1 +)
    (<a3> ^1 <c2> + ^num 1 +)
    (<c2> ^type attribute + ^name location + ^attribute category +
           ^result <r4> + ^parameter <p16> + ^negative false + ^args <a2> +
           ^rtype single +)
    (<r4> ^set <p15> +)
    (<p16> ^num 0 +)
    (<a2> ^1 <c3> + ^num 1 +)
    (<c3> ^type attribute + ^name object + ^attribute primitive +
           ^result <r5> + ^parameter <p17> + ^negative false + ^args <a1> +
           ^rtype single +)
    (<r5> ^set <r6> +)
    (<p17> ^num 0 +)
    (<n2> ^type function + ^name count + ^result <r1> + ^parameter <p7> +
           ^negative false + ^args <a5> + ^rtype single +
           ^return-type number + ^function soar-count +)
    (<r1> ^set <p5> +)
    (<p7> ^1 <p6> + ^2 <p8> + ^num 2 +)
    (<p6> ^type single + ^param-id 2 +)
    (<p8> ^type set + ^param-id 1 +)
    (<a5> ^2 <n1> + ^num 1 +)
    (<n3> ^name number + ^result <r7> + ^parameter <p19> + ^negative false +
           ^args <a6> + ^rtype single + ^return-type number +)
    (<r7> ^set <s2> +)
    (<s2> ^instance <i1> +)
    (<i1> ^1 4 +)
    (<p19> ^1 <p18> + ^num 1 +)
    (<p18> ^type single + ^param-id 2 +)
}

sp {chunk-multi*chunk-predicate-impasse*apply*complete*action*snc*t9178-1
    :chunk
    (state <s1> ^gtype action ^retrieve-handle stack-drop62)
    -->
    (<s1> ^action <p1> +)
    (<p1> ^potential-args <p2> + ^parameter-set <p3> + ^formated predicate +
           ^primary-rtype single + ^nlp-set <p18> + ^verb-structure <v2> +
           ^aname stack-drop62 + ^handle stack-drop62 +)
    (<p3> ^argnum 3 +)
    (<p18> ^conditions <n1> + ^conditions <c7> + ^aname stack-drop62 +)
    (<n1> ^type state-pair + ^name above1 + ^attribute prepositions +
           ^result <r1> + ^parameter <p6> + ^negative false + ^args <a4> +
           ^rtype single +)
    (<r1> ^set <p4> +)
    (<p6> ^1 <p5> + ^2 <p7> + ^num 2 +)
    (<p5> ^type single + ^param-id 3 +)
    (<p7> ^type single + ^param-id 2 +)
    (<a4> ^1 <c1> + ^2 <c4> + ^num 2 +)
    (<c1> ^type concept + ^name clear + ^attribute predicate + ^result <r2> +
           ^parameter <p9> + ^negative false + ^args <a3> + ^rtype single +)
    (<r2> ^set <p8> +)
    (<p9> ^num 0 +)
    (<a3> ^1 <c2> + ^num 1 +)
    (<c2> ^type attribute + ^name location + ^attribute category +
           ^result <r3> + ^parameter <p11> + ^negative false + ^args <a2> +
           ^rtype single +)
    (<r3> ^set <p10> +)
    (<p11> ^num 0 +)
    (<a2> ^1 <c3> + ^num 1 +)
    (<c3> ^type attribute + ^name object + ^attribute primitive +
           ^result <r4> + ^parameter <p12> + ^negative false + ^args <a1> +
           ^rtype single +)
    (<r4> ^set <r5> +)
    (<p12> ^num 0 +)
    (<c4> ^type concept + ^name covered + ^attribute predicate +
           ^result <r6> + ^parameter <p14> + ^negative false + ^args <a7> +
           ^rtype single +)
    (<r6> ^set <p13> +)
    (<p14> ^num 0 +)
    (<a7> ^1 <c5> + ^num 1 +)
    (<c5> ^type attribute + ^name location + ^attribute category +
           ^result <r7> + ^parameter <p16> + ^negative false + ^args <a6> +
           ^rtype single +)
    (<r7> ^set <p15> +)
    (<p16> ^num 0 +)
    (<a6> ^1 <c6> + ^num 1 +)
    (<c6> ^type attribute + ^name object + ^attribute primitive +
           ^result <r8> + ^parameter <p17> + ^negative false + ^args <a5> +
           ^rtype single +)
    (<r8> ^set <r9> +)
    (<p17> ^num 0 +)
    (<c7> ^type concept + ^name clear + ^attribute predicate + ^result <r10> +
           ^parameter <p21> + ^negative false + ^args <a12> + ^rtype single +)
    (<r10> ^set <p19> +)
    (<p21> ^1 <p20> + ^num 1 +)
    (<p20> ^type single + ^param-id 1 +)
    (<a12> ^1 <c8> + ^num 1 +)
    (<c8> ^type concept + ^name free + ^attribute predicate + ^result <r11> +
           ^parameter <p23> + ^negative false + ^args <a11> + ^rtype single +)
    (<r11> ^set <p22> +)
    (<p23> ^num 0 +)
    (<a11> ^1 <c9> + ^num 1 +)
    (<c9> ^type attribute + ^name red1 + ^attribute color + ^result <r12> +
           ^parameter <p25> + ^negative false + ^args <a10> + ^rtype single +)
    (<r12> ^set <p24> +)
    (<p25> ^num 0 +)
    (<a10> ^1 <c10> + ^num 1 +)
    (<c10> ^type attribute + ^name block + ^attribute category +
           ^result <r13> + ^parameter <p27> + ^negative false + ^args <a9> +
           ^rtype single +)
    (<r13> ^set <p26> +)
    (<p27> ^num 0 +)
    (<a9> ^1 <c11> + ^num 1 +)
    (<c11> ^type attribute + ^name object + ^attribute primitive +
           ^result <r14> + ^parameter <p28> + ^negative false + ^args <a8> +
           ^rtype single +)
    (<r14> ^set <r15> +)
    (<p28> ^num 0 +)
    (<v2> ^1 <v1> +)
    (<v1> ^1 1 + ^2 3 + ^verb-name move1 + ^verb-prep on1 +)
}

sp {chunk-multi*chunk-predicate-impasse*apply*complete*failure*snc*t9170-1
    :chunk
    (state <s1> ^gtype failure ^retrieve-handle enemy-4-in-a-row85)
    -->
    (<s1> ^failure <p1> +)
    (<p1> ^potential-args <p2> + ^parameter-set <p3> + ^formated predicate +
           ^primary-rtype set + ^nlp-set <p4> + ^aname enemy-4-in-a-row85 +
           ^handle enemy-4-in-a-row85 +)
    (<p3> ^argnum 2 +)
    (<p4> ^conditions <n1> + ^conditions <n2> + ^conditions <n3> +
           ^aname enemy-4-in-a-row85 +)
    (<n1> ^type concept + ^name occupied + ^attribute predicate +
           ^result <r2> + ^parameter <p11> + ^negative false + ^args <a4> +
           ^rtype set +)
    (<r2> ^set <p9> +)
    (<p11> ^1 <p10> + ^num 1 +)
    (<p10> ^type set + ^param-id 1 +)
    (<a4> ^1 <c1> + ^num 1 +)
    (<c1> ^type state-pair + ^name linear + ^attribute preposition +
           ^result <r3> + ^parameter <p14> + ^negative false + ^args <a3> +
           ^rtype set +)
    (<r3> ^set <p12> +)
    (<p14> ^1 <p13> + ^num 1 +)
    (<p13> ^type set + ^param-id 1 +)
    (<a3> ^1 <c2> + ^num 1 +)
    (<c2> ^type attribute + ^name location + ^attribute category +
           ^result <r4> + ^parameter <p16> + ^negative false + ^args <a2> +
           ^rtype single +)
    (<r4> ^set <p15> +)
    (<p16> ^num 0 +)
    (<a2> ^1 <c3> + ^num 1 +)
    (<c3> ^type attribute + ^name object + ^attribute primitive +
           ^result <r5> + ^parameter <p17> + ^negative false + ^args <a1> +
           ^rtype single +)
    (<r5> ^set <r6> +)
    (<p17> ^num 0 +)
    (<n2> ^type function + ^name count + ^result <r1> + ^parameter <p7> +
           ^negative false + ^args <a5> + ^rtype single +
           ^return-type number + ^function soar-count +)
    (<r1> ^set <p5> +)
    (<p7> ^1 <p6> + ^2 <p8> + ^num 2 +)
    (<p6> ^type single + ^param-id 2 +)
    (<p8> ^type set + ^param-id 1 +)
    (<a5> ^2 <n1> + ^num 1 +)
    (<n3> ^name number + ^result <r7> + ^parameter <p19> + ^negative false +
           ^args <a6> + ^rtype single + ^return-type number +)
    (<r7> ^set <s2> +)
    (<s2> ^instance <i1> +)
    (<i1> ^1 4 +)
    (<p19> ^1 <p18> + ^num 1 +)
    (<p18> ^type single + ^param-id 2 +)
}

sp {chunk-multi*chunk-predicate-impasse*apply*complete*action*snc*t9162-1
    :chunk
    (state <s1> ^gtype action ^retrieve-handle bottom-drop48)
    -->
    (<s1> ^action <p1> +)
    (<p1> ^potential-args <p2> + ^parameter-set <p3> + ^formated predicate +
           ^primary-rtype single + ^nlp-set <p15> + ^verb-structure <v2> +
           ^aname bottom-drop48 + ^handle bottom-drop48 +)
    (<p3> ^argnum 2 +)
    (<p15> ^conditions <n1> + ^conditions <c6> + ^aname bottom-drop48 +)
    (<n1> ^type state-pair + ^name above1 + ^attribute prepositions +
           ^result <r1> + ^parameter <p6> + ^negative true + ^args <a4> +
           ^rtype single +)
    (<r1> ^set <p4> +)
    (<p6> ^1 <p5> + ^num 1 +)
    (<p5> ^type single + ^param-id 1 +)
    (<a4> ^1 <c1> + ^2 <c4> + ^num 2 +)
    (<c1> ^type concept + ^name clear + ^attribute predicate + ^result <r2> +
           ^parameter <p8> + ^negative false + ^args <a3> + ^rtype single +)
    (<r2> ^set <p7> +)
    (<p8> ^num 0 +)
    (<a3> ^1 <c2> + ^num 1 +)
    (<c2> ^type attribute + ^name location + ^attribute category +
           ^result <r3> + ^parameter <p10> + ^negative false + ^args <a2> +
           ^rtype single +)
    (<r3> ^set <p9> +)
    (<p10> ^num 0 +)
    (<a2> ^1 <c3> + ^num 1 +)
    (<c3> ^type attribute + ^name object + ^attribute primitive +
           ^result <r4> + ^parameter <p11> + ^negative false + ^args <a1> +
           ^rtype single +)
    (<r4> ^set <r5> +)
    (<p11> ^num 0 +)
    (<c4> ^type attribute + ^name location + ^attribute category +
           ^result <r6> + ^parameter <p13> + ^negative false + ^args <a6> +
           ^rtype single +)
    (<r6> ^set <p12> +)
    (<p13> ^num 0 +)
    (<a6> ^1 <c5> + ^num 1 +)
    (<c5> ^type attribute + ^name object + ^attribute primitive +
           ^result <r7> + ^parameter <p14> + ^negative false + ^args <a5> +
           ^rtype single +)
    (<r7> ^set <r8> +)
    (<p14> ^num 0 +)
    (<c6> ^type concept + ^name free + ^attribute predicate + ^result <r9> +
           ^parameter <p18> + ^negative false + ^args <a11> + ^rtype single +)
    (<r9> ^set <p16> +)
    (<p18> ^1 <p17> + ^num 1 +)
    (<p17> ^type single + ^param-id 2 +)
    (<a11> ^1 <c7> + ^num 1 +)
    (<c7> ^type concept + ^name clear + ^attribute predicate + ^result <r10> +
           ^parameter <p20> + ^negative false + ^args <a10> + ^rtype single +)
    (<r10> ^set <p19> +)
    (<p20> ^num 0 +)
    (<a10> ^1 <c8> + ^num 1 +)
    (<c8> ^type attribute + ^name red1 + ^attribute color + ^result <r11> +
           ^parameter <p22> + ^negative false + ^args <a9> + ^rtype single +)
    (<r11> ^set <p21> +)
    (<p22> ^num 0 +)
    (<a9> ^1 <c9> + ^num 1 +)
    (<c9> ^type attribute + ^name block + ^attribute category +
           ^result <r12> + ^parameter <p24> + ^negative false + ^args <a8> +
           ^rtype single +)
    (<r12> ^set <p23> +)
    (<p24> ^num 0 +)
    (<a8> ^1 <c10> + ^num 1 +)
    (<c10> ^type attribute + ^name object + ^attribute primitive +
           ^result <r13> + ^parameter <p25> + ^negative false + ^args <a7> +
           ^rtype single +)
    (<r13> ^set <r14> +)
    (<p25> ^num 0 +)
    (<v2> ^1 <v1> +)
    (<v1> ^1 2 + ^2 1 + ^verb-name move1 + ^verb-prep on1 +)
}

sp {chunk-multi*chunk-predicate-impasse*apply*complete*snc*t9054-1
    :chunk
    (state <s1> ^gtype <c1> ^<c1> <g1>)
    (<g1> ^condition <n1>)
    (<n1> ^name captured ^type concept ^attribute predicate)
    -->
    (<s1> ^predicate <p1> + ^gtype predicate +)
    (<p1> ^link <n1> + ^potential-args <p2> + ^parameter-set <p3> +
           ^formated predicate + ^primary-rtype single + ^nlp-set <p14> +
           ^aname captured + ^handle captured +)
    (<p3> ^argnum 1 +)
    (<p14> ^conditions <n2> + ^aname captured +)
    (<n2> ^type state-pair + ^name below1 + ^attribute prepositions +
           ^result <r1> + ^parameter <p6> + ^negative false + ^args <a2> +
           ^rtype single +)
    (<r1> ^set <p4> +)
    (<p6> ^1 <p5> + ^num 1 +)
    (<p5> ^type single + ^param-id 1 +)
    (<a2> ^1 <c2> + ^2 <c3> + ^num 2 +)
    (<c2> ^name object + ^attribute input-arg + ^result <r2> +
           ^parameter <p8> + ^negative false + ^args <a1> + ^rtype single +)
    (<r2> ^set <r3> +)
    (<p8> ^1 <p7> + ^num 1 +)
    (<p7> ^type single + ^param-id 1 +)
    (<c3> ^type attribute + ^name red1 + ^attribute color + ^result <r4> +
           ^parameter <p10> + ^negative false + ^args <a5> + ^rtype single +)
    (<r4> ^set <p9> +)
    (<p10> ^num 0 +)
    (<a5> ^1 <c4> + ^num 1 +)
    (<c4> ^type attribute + ^name block + ^attribute category + ^result <r5> +
           ^parameter <p12> + ^negative false + ^args <a4> + ^rtype single +)
    (<r5> ^set <p11> +)
    (<p12> ^num 0 +)
    (<a4> ^1 <c5> + ^num 1 +)
    (<c5> ^type attribute + ^name object + ^attribute primitive +
           ^result <r6> + ^parameter <p13> + ^negative false + ^args <a3> +
           ^rtype single +)
    (<r6> ^set <r7> +)
    (<p13> ^num 0 +)
}

sp {chunk*justification-6925*t7763-1
    :chunk
    (state <s1> ^list <l1> ^gtype <c2> ^gtype <c1> ^<c2> <a1> ^<c1> <a1>)
    (<a1> ^condition <n1>)
    (<n1> ^function soar-count ^type function ^args <a2> ^parameter <p1>
          ^negative <c3> ^result <r2> ^name <c4>)
    (<a2> ^num 1 ^2 <n2>)
    (<p1> ^num 2)
    (<n2> ^rtype set ^result <r1>)
    (<l1> ^game <g1>)
    (<r2> ^set <p3>)
    (<r1> ^set <p2>)
    (<p2> ^instance <i1>)
    (<i1> ^1 <s2>)
   -{ (<s2> -^<something> <s*3>)
      (<s1> ^<a*1> <v*1>)}
    -->
    (<p3> ^instance <p4> +)
    (<p4> ^1 (size <s2>) + ^2 <s2> +)
}

sp {chunk*justification-6867*t7757-1
    :chunk
    (state <s1> ^list <l1> ^gtype <c3> ^gtype <c1> ^<c3> <a1> ^<c1> <a1>
          ^world <n1>)
    (<a1> ^condition <c4>)
    (<c4> ^rtype set ^negative false ^type state-pair ^args <a2>
          ^parameter <p2> ^name <c2> ^result <r1> ^attribute <c5>)
    (<a2> ^num 1 ^1 <c6>)
    (<c6> -^rtype set)
    (<p2> ^num { < 2 <c7> })
    (<l1> ^game <g1>)
    (<n1> ^predicates <p1>)
    (<p1> ^predicate <n2>)
    (<n2> ^handle <c2> ^instance <n3>)
    (<n3> ^1 <s2>)
   -{ (<s2> ^<elem> <obja>)
     -{ (<c6> ^result <r*1>)
        (<r*1> ^set <s*3>)
        (<s*3> ^instance <i*1>)
        (<i*1> ^1 <obja>)}}
   -{ (<s2> -^<x1> <x*1>)
      (<s1> ^<a*1> <v*1>)}
    (<r1> ^set <p3>)
    -->
    (<p3> ^instance <i1> +)
    (<i1> ^1 <s2> +)
}

sp {chunk-multi*chunk-predicate-impasse*apply*complete*snc*t7748-1
    :chunk
    (state <s1> ^gtype <c1> ^<c1> <g1>)
    (<g1> ^condition <n1>)
    (<n1> ^name occupied ^type concept ^attribute predicate)
    -->
    (<s1> ^predicate <p1> + ^gtype predicate +)
    (<p1> ^link <n1> + ^potential-args <p2> + ^parameter-set <p3> +
           ^formated predicate + ^primary-rtype single + ^nlp-set <p14> +
           ^aname occupied + ^handle occupied +)
    (<p3> ^argnum 1 +)
    (<p14> ^conditions <n2> + ^aname occupied +)
    (<n2> ^type state-pair + ^name below1 + ^attribute prepositions +
           ^result <r1> + ^parameter <p6> + ^negative false + ^args <a2> +
           ^rtype single +)
    (<r1> ^set <p4> +)
    (<p6> ^1 <p5> + ^num 1 +)
    (<p5> ^type single + ^param-id 1 +)
    (<a2> ^1 <c2> + ^2 <c3> + ^num 2 +)
    (<c2> ^name object + ^attribute input-arg + ^result <r2> +
           ^parameter <p8> + ^negative false + ^args <a1> + ^rtype single +)
    (<r2> ^set <r3> +)
    (<p8> ^1 <p7> + ^num 1 +)
    (<p7> ^type single + ^param-id 1 +)
    (<c3> ^type attribute + ^name blue1 + ^attribute color + ^result <r4> +
           ^parameter <p10> + ^negative false + ^args <a5> + ^rtype single +)
    (<r4> ^set <p9> +)
    (<p10> ^num 0 +)
    (<a5> ^1 <c4> + ^num 1 +)
    (<c4> ^type attribute + ^name block + ^attribute category + ^result <r5> +
           ^parameter <p12> + ^negative false + ^args <a4> + ^rtype single +)
    (<r5> ^set <p11> +)
    (<p12> ^num 0 +)
    (<a4> ^1 <c5> + ^num 1 +)
    (<c5> ^type attribute + ^name object + ^attribute primitive +
           ^result <r6> + ^parameter <p13> + ^negative false + ^args <a3> +
           ^rtype single +)
    (<r6> ^set <r7> +)
    (<p13> ^num 0 +)
}

sp {chunk-multi*chunk-predicate-impasse*apply*complete*snc*t6597-1
    :chunk
    (state <s1> ^gtype <c2> ^<c2> <g1>)
    (<g1> ^condition <c1>)
    (<c1> ^name covered ^type concept ^attribute predicate)
    -->
    (<s1> ^predicate <p1> + ^gtype predicate +)
    (<p1> ^link <c1> + ^potential-args <p2> + ^parameter-set <p3> +
           ^formated predicate + ^primary-rtype single + ^nlp-set <p11> +
           ^aname covered + ^handle covered +)
    (<p3> ^argnum 1 +)
    (<p11> ^conditions <n1> + ^aname covered +)
    (<n1> ^type state-pair + ^name below1 + ^attribute prepositions +
           ^result <r1> + ^parameter <p6> + ^negative false + ^args <a2> +
           ^rtype single +)
    (<r1> ^set <p4> +)
    (<p6> ^1 <p5> + ^num 1 +)
    (<p5> ^type single + ^param-id 1 +)
    (<a2> ^1 <c3> + ^2 <c4> + ^num 2 +)
    (<c3> ^name object + ^attribute input-arg + ^result <r2> +
           ^parameter <p8> + ^negative false + ^args <a1> + ^rtype single +)
    (<r2> ^set <r3> +)
    (<p8> ^1 <p7> + ^num 1 +)
    (<p7> ^type single + ^param-id 1 +)
    (<c4> ^type attribute + ^name object + ^attribute primitive +
           ^result <r4> + ^parameter <p10> + ^negative false + ^args <a3> +
           ^rtype single +)
    (<r4> ^set <p9> +)
    (<p10> ^num 0 +)
}

sp {chunk-multi*chunk-predicate-impasse*apply*complete*snc*t5216-1
    :chunk
    (state <s1> ^gtype <c2> ^<c2> <g1>)
    (<g1> ^condition <c1>)
    (<c1> ^name free ^type concept ^attribute predicate)
    -->
    (<s1> ^predicate <p1> + ^gtype predicate +)
    (<p1> ^link <c1> + ^potential-args <p2> + ^parameter-set <p3> +
           ^formated predicate + ^primary-rtype single + ^nlp-set <p12> +
           ^aname free + ^handle free +)
    (<p3> ^argnum 1 +)
    (<p12> ^conditions <n1> + ^aname free +)
    (<n1> ^type state-pair + ^name on1 + ^attribute prepositions +
           ^result <r1> + ^parameter <p6> + ^negative true + ^args <a2> +
           ^rtype single +)
    (<r1> ^set <p4> +)
    (<p6> ^1 <p5> + ^num 1 +)
    (<p5> ^type single + ^param-id 1 +)
    (<a2> ^1 <c3> + ^2 <c4> + ^num 2 +)
    (<c3> ^name object + ^attribute input-arg + ^result <r2> +
           ^parameter <p8> + ^negative false + ^args <a1> + ^rtype single +)
    (<r2> ^set <r3> +)
    (<p8> ^1 <p7> + ^num 1 +)
    (<p7> ^type single + ^param-id 1 +)
    (<c4> ^type attribute + ^name location + ^attribute category +
           ^result <r4> + ^parameter <p10> + ^negative false + ^args <a4> +
           ^rtype single +)
    (<r4> ^set <p9> +)
    (<p10> ^num 0 +)
    (<a4> ^1 <c5> + ^num 1 +)
    (<c5> ^type attribute + ^name object + ^attribute primitive +
           ^result <r5> + ^parameter <p11> + ^negative false + ^args <a3> +
           ^rtype single +)
    (<r5> ^set <r6> +)
    (<p11> ^num 0 +)
}

sp {chunk-multi*chunk-puzzle-impasse*apply*complete*snc*t3215-2
    :chunk
    (state <s1> ^retrieve-game simple-maze1 -^opponent <o*1>)
    -->
    (<s1> ^retrieve-handle action-default43 +)
}

sp {chunk-multi*chunk-puzzle-impasse*apply*complete*snc*t3215-1
    :chunk
    (state <s1> ^retrieve-game simple-maze1 -^opponent <o*1>)
    -->
    (<s1> ^retrieve-handle goal-default46 +)
}

sp {chunk-multi*chunk-predicate-impasse*apply*complete*action*snc*t3206-1
    :chunk
    (state <s1> ^gtype action ^retrieve-handle action-default43)
    -->
    (<s1> ^action <p1> +)
    (<p1> ^potential-args <p2> + ^parameter-set <p3> + ^formated predicate +
           ^primary-rtype single + ^nlp-set <p13> + ^verb-structure <v2> +
           ^aname action-default43 + ^handle action-default43 +)
    (<p3> ^argnum 3 +)
    (<p13> ^conditions <n1> + ^conditions <n2> + ^aname action-default43 +)
    (<n1> ^type concept + ^name adjacent + ^attribute predicate +
           ^result <r1> + ^parameter <p6> + ^negative false + ^args <a1> +
           ^rtype single +)
    (<r1> ^set <p4> +)
    (<p6> ^1 <p5> + ^2 <p7> + ^num 2 +)
    (<p5> ^type single + ^param-id 3 +)
    (<p7> ^type single + ^param-id 2 +)
    (<a1> ^1 <c1> + ^2 <c2> + ^num 2 +)
    (<c2> ^type concept + ^name clear + ^attribute predicate + ^result <r2> +
           ^parameter <p9> + ^negative false + ^args <a4> + ^rtype single +)
    (<r2> ^set <p8> +)
    (<p9> ^num 0 +)
    (<a4> ^1 <c3> + ^num 1 +)
    (<c3> ^type attribute + ^name location + ^attribute category +
           ^result <r3> + ^parameter <p11> + ^negative false + ^args <a3> +
           ^rtype single +)
    (<r3> ^set <p10> +)
    (<p11> ^num 0 +)
    (<a3> ^1 <c4> + ^num 1 +)
    (<c4> ^type attribute + ^name object + ^attribute primitive +
           ^result <r4> + ^parameter <p12> + ^negative false + ^args <a2> +
           ^rtype single +)
    (<r4> ^set <r5> +)
    (<p12> ^num 0 +)
    (<c1> ^type attribute + ^name location + ^attribute category +
           ^result <r11> + ^parameter <p24> + ^negative false + ^args <a10> +
           ^rtype single +)
    (<r11> ^set <p23> +)
    (<p24> ^num 0 +)
    (<a10> ^1 <c8> + ^num 1 +)
    (<c8> ^type attribute + ^name object + ^attribute primitive +
           ^result <r12> + ^parameter <p25> + ^negative false + ^args <a9> +
           ^rtype single +)
    (<r12> ^set <r13> +)
    (<p25> ^num 0 +)
    (<n2> ^type state-pair + ^name on1 + ^attribute prepositions +
           ^result <r6> + ^parameter <p16> + ^negative false + ^args <a8> +
           ^rtype single +)
    (<r6> ^set <p14> +)
    (<p16> ^1 <p15> + ^2 <p17> + ^num 2 +)
    (<p15> ^type single + ^param-id 1 +)
    (<p17> ^type single + ^param-id 3 +)
    (<a8> ^1 <c5> + ^2 <c1> + ^num 2 +)
    (<c5> ^type attribute + ^name red1 + ^attribute color + ^result <r7> +
           ^parameter <p19> + ^negative false + ^args <a7> + ^rtype single +)
    (<r7> ^set <p18> +)
    (<p19> ^num 0 +)
    (<a7> ^1 <c6> + ^num 1 +)
    (<c6> ^type attribute + ^name block + ^attribute category + ^result <r8> +
           ^parameter <p21> + ^negative false + ^args <a6> + ^rtype single +)
    (<r8> ^set <p20> +)
    (<p21> ^num 0 +)
    (<a6> ^1 <c7> + ^num 1 +)
    (<c7> ^type attribute + ^name object + ^attribute primitive +
           ^result <r9> + ^parameter <p22> + ^negative false + ^args <a5> +
           ^rtype single +)
    (<r9> ^set <r10> +)
    (<p22> ^num 0 +)
    (<v2> ^1 <v1> +)
    (<v1> ^1 1 + ^2 2 + ^verb-name move1 + ^verb-prep on1 +)
}

sp {chunk-multi*chunk-predicate-impasse*apply*complete*goal*snc*t3198-1
    :chunk
    (state <s1> ^gtype goal ^retrieve-handle goal-default46)
    -->
    (<s1> ^goal <p1> +)
    (<p1> ^potential-args <p2> + ^parameter-set <p3> + ^formated predicate +
           ^primary-rtype single + ^nlp-set <p17> + ^aname goal-default46 +
           ^handle goal-default46 +)
    (<p3> ^argnum 1 +)
    (<p17> ^conditions <n1> + ^aname goal-default46 +)
    (<n1> ^type state-pair + ^name on1 + ^attribute prepositions +
           ^result <r1> + ^parameter <p6> + ^negative false + ^args <a4> +
           ^rtype single +)
    (<r1> ^set <p4> +)
    (<p6> ^1 <p5> + ^num 1 +)
    (<p5> ^type single + ^param-id 1 +)
    (<a4> ^1 <c1> + ^2 <c4> + ^num 2 +)
    (<c1> ^type attribute + ^name red1 + ^attribute color + ^result <r2> +
           ^parameter <p8> + ^negative false + ^args <a3> + ^rtype single +)
    (<r2> ^set <p7> +)
    (<p8> ^num 0 +)
    (<a3> ^1 <c2> + ^num 1 +)
    (<c2> ^type attribute + ^name block + ^attribute category + ^result <r3> +
           ^parameter <p10> + ^negative false + ^args <a2> + ^rtype single +)
    (<r3> ^set <p9> +)
    (<p10> ^num 0 +)
    (<a2> ^1 <c3> + ^num 1 +)
    (<c3> ^type attribute + ^name object + ^attribute primitive +
           ^result <r4> + ^parameter <p11> + ^negative false + ^args <a1> +
           ^rtype single +)
    (<r4> ^set <r5> +)
    (<p11> ^num 0 +)
    (<c4> ^type attribute + ^name red1 + ^attribute color + ^result <r6> +
           ^parameter <p13> + ^negative false + ^args <a7> + ^rtype single +)
    (<r6> ^set <p12> +)
    (<p13> ^num 0 +)
    (<a7> ^1 <c5> + ^num 1 +)
    (<c5> ^type attribute + ^name location + ^attribute category +
           ^result <r7> + ^parameter <p15> + ^negative false + ^args <a6> +
           ^rtype single +)
    (<r7> ^set <p14> +)
    (<p15> ^num 0 +)
    (<a6> ^1 <c6> + ^num 1 +)
    (<c6> ^type attribute + ^name object + ^attribute primitive +
           ^result <r8> + ^parameter <p16> + ^negative false + ^args <a5> +
           ^rtype single +)
    (<r8> ^set <r9> +)
    (<p16> ^num 0 +)
}

sp {chunk*justification-2959*t3090-1
    :chunk
    (state <s1> ^list <l1> ^gtype <c3> ^gtype <c1> ^<c3> <a1> ^<c1> <a1>
          ^world <n1>)
    (<a1> ^condition <n6>)
    (<n6> ^rtype single ^negative false ^type state-pair ^args <a2>
          ^parameter <p2> ^name <c2> ^result <r3> ^attribute <c4>)
    (<a2> ^num 2 ^2 <c5> ^1 <c6>)
    (<c5> -^rtype set ^result <r1>)
    (<c6> -^rtype set ^result <r2>)
    (<p2> ^num { < 2 <c7> })
    (<l1> ^game <g1>)
    (<n1> ^predicates <p1>)
    (<p1> ^predicate <n2>)
    (<n2> ^handle <c2> ^instance <n3>)
    (<n3> ^2 <n4> ^1 <n5>)
    (<r3> ^set <p5>)
    (<r2> ^set <p4>)
    (<p4> ^instance <i2>)
    (<i2> ^1 <n5>)
    (<r1> ^set <p3>)
    (<p3> ^instance <i1>)
    (<i1> ^1 <n4>)
    -->
    (<p5> ^instance <i3> +)
    (<i3> ^1 <n5> +)
}

sp {chunk*justification-2319*t2554-1
    :chunk
    (state <s1> ^list <l1> ^gtype <c2> ^gtype <c1> ^<c2> <a1> ^<c1> <a1>)
    (<a1> ^condition <c3>)
    (<c3> ^rtype single ^type attribute ^args <a2> ^negative <c4>
          ^parameter <p1> ^result <r3> ^name <c6> ^attribute <c7>)
    (<p1> ^num { < 2 <c8> })
    (<l1> ^game <g1>)
    (<a2> ^1 <c5>)
    (<r3> ^set <p3>)
    (<c5> ^result <r1>)
    (<r1> ^set <r2>)
    (<r2> ^instance <i1>)
    (<i1> ^1 <n1>)
    (<n1> ^predicates <p2>)
    (<p2> ^<c7> <c6>)
    -->
    (<p3> ^instance <i2> +)
    (<i2> ^1 <n1> +)
}

sp {chunk-multi*chunk-predicate-impasse*apply*complete*snc*t2545-1
    :chunk
    (state <s1> ^gtype <c2> ^<c2> <g1>)
    (<g1> ^condition <c1>)
    (<c1> ^name clear ^type concept ^attribute predicate)
    -->
    (<s1> ^predicate <p1> + ^gtype predicate +)
    (<p1> ^link <c1> + ^potential-args <p2> + ^parameter-set <p3> +
           ^formated predicate + ^primary-rtype single + ^nlp-set <p11> +
           ^aname clear + ^handle clear +)
    (<p3> ^argnum 1 +)
    (<p11> ^conditions <n1> + ^aname clear +)
    (<n1> ^type state-pair + ^name below1 + ^attribute prepositions +
           ^result <r1> + ^parameter <p6> + ^negative true + ^args <a2> +
           ^rtype single +)
    (<r1> ^set <p4> +)
    (<p6> ^1 <p5> + ^num 1 +)
    (<p5> ^type single + ^param-id 1 +)
    (<a2> ^1 <c3> + ^2 <c4> + ^num 2 +)
    (<c3> ^name object + ^attribute input-arg + ^result <r2> +
           ^parameter <p8> + ^negative false + ^args <a1> + ^rtype single +)
    (<r2> ^set <r3> +)
    (<p8> ^1 <p7> + ^num 1 +)
    (<p7> ^type single + ^param-id 1 +)
    (<c4> ^type attribute + ^name object + ^attribute primitive +
           ^result <r4> + ^parameter <p10> + ^negative false + ^args <a3> +
           ^rtype single +)
    (<r4> ^set <p9> +)
    (<p10> ^num 0 +)
}

sp {chunk-multi*chunk-predicate-impasse*apply*complete*snc*t2535-1
    :chunk
    (state <s1> ^gtype <c1> ^<c1> <g1>)
    (<g1> ^condition <n1>)
    (<n1> ^name adjacent ^type concept ^attribute predicate)
    -->
    (<s1> ^predicate <p1> + ^gtype predicate +)
    (<p1> ^link <n1> + ^potential-args <p2> + ^parameter-set <p3> +
           ^formated predicate + ^primary-rtype single + ^nlp-set <p8> +
           ^aname adjacent + ^handle adjacent +)
    (<p3> ^argnum 2 +)
    (<p8> ^conditions <n2> + ^conditions <n3> + ^aname adjacent +)
    (<n2> ^type state-pair + ^name near1 + ^attribute prepositions +
           ^result <r1> + ^parameter <p6> + ^negative false + ^args <a1> +
           ^rtype single +)
    (<r1> ^set <p4> +)
    (<p6> ^1 <p5> + ^2 <p7> + ^num 2 +)
    (<p5> ^type single + ^param-id 1 +)
    (<p7> ^type single + ^param-id 2 +)
    (<a1> ^1 <c2> + ^2 <c3> + ^num 2 +)
    (<c2> ^name object + ^attribute input-arg + ^result <r3> +
           ^parameter <p14> + ^negative false + ^args <a2> + ^rtype single +)
    (<r3> ^set <r4> +)
    (<p14> ^1 <p13> + ^num 1 +)
    (<p13> ^type single + ^param-id 1 +)
    (<c3> ^name object + ^attribute input-arg + ^result <r5> +
           ^parameter <p16> + ^negative false + ^args <a4> + ^rtype single +)
    (<r5> ^set <r6> +)
    (<p16> ^1 <p15> + ^num 1 +)
    (<p15> ^type single + ^param-id 2 +)
    (<n3> ^type state-pair + ^name diagonal-with1 + ^attribute prepositions +
           ^result <r2> + ^parameter <p11> + ^negative true + ^args <a3> +
           ^rtype single +)
    (<r2> ^set <p9> +)
    (<p11> ^1 <p10> + ^2 <p12> + ^num 2 +)
    (<p10> ^type single + ^param-id 1 +)
    (<p12> ^type single + ^param-id 2 +)
    (<a3> ^1 <c2> + ^2 <c3> + ^num 2 +)
}

sp {chunk*justification-1786*t1914-1
    :chunk
    (state <s1> ^list <l1> ^gtype <c3> ^gtype <c1> ^<c3> <a1> ^<c1> <a1>
          ^world <n1>)
    (<a1> ^condition <n3>)
    (<n3> ^rtype single ^negative true ^type state-pair ^args <a2>
          ^parameter <p2> ^name <c2> ^result <r3> ^attribute <c4>)
    (<a2> ^num 2 ^1 <c5> ^2 <c7>)
    (<c5> -^rtype set ^result <r1>)
    (<p2> ^num { < 2 <c6> })
    (<l1> ^game <g1>)
    (<n1> ^predicates <p1>)
    (<p1> ^predicate <n2>)
    (<n2> ^handle <c2>)
    (<r3> ^set <p3>)
    (<r1> ^set <r2>)
    (<r2> ^instance <i1>)
    (<i1> ^1 <n4>)
   -{ (<n2> ^instance <instance>)
      (<instance> ^1 <n4> ^2 <objb>)
      (<c7> ^result <r*2>)
      (<r*2> ^set <s*4>)
      (<s*4> ^instance <i*2>)
      (<i*2> ^1 <objb>)}
    -->
    (<p3> ^instance <i2> +)
    (<i2> ^1 <n4> +)
}

sp {chunk*justification-1734*t1908-1
    :chunk
    (state <s1> ^list <l1> ^gtype <c2> ^gtype <c1> ^<c2> <a2> ^<c1> <a2>
          ^world <n1>)
    (<a2> ^condition <c3>)
    (<c3> ^rtype single ^name object ^type attribute ^attribute primitive
          ^args <a3> ^negative <c4> ^parameter <p1> ^result <r1>)
    (<a3> -^1 <a1>)
    (<l1> ^game <g1>)
    (<n1> ^objects <o1>)
    (<r1> ^set <p2>)
    (<o1> ^object <n2>)
    -->
    (<p2> ^instance <i1> +)
    (<i1> ^1 <n2> +)
}

sp {chunk*justification-1241*t1263-1
    :chunk
    (state <s1> ^list <l1> ^gtype <c3> ^gtype <c1> ^<c3> <a1> ^<c1> <a1>
          ^world <n1>)
    (<a1> ^condition <n6>)
    (<n6> ^rtype single ^negative false ^type state-pair ^args <a2>
          ^parameter <p2> ^name <c2> ^result <r5> ^attribute <c4>)
    (<a2> ^num 2 ^2 <c5> ^1 <c6>)
    (<p2> ^num 2)
    (<c5> -^rtype set ^result <r1>)
    (<c6> -^rtype set ^result <r3>)
    (<l1> ^game <g1>)
    (<n1> ^predicates <p1>)
    (<p1> ^predicate <n2>)
    (<n2> ^handle <c2> ^instance <n3>)
    (<n3> ^2 <n4> ^1 <n5>)
    (<r5> ^set <p3>)
    (<r3> ^set <r4>)
    (<r4> ^instance <i2>)
    (<i2> ^1 <n5>)
    (<r1> ^set <r2>)
    (<r2> ^instance <i1>)
    (<i1> ^1 <n4>)
    -->
    (<p3> ^instance <i3> +)
    (<i3> ^2 <n4> + ^1 <n5> +)
}

sp {chunk*justification-589*t1257-1
    :chunk
    (state <s1> ^list <l1> ^gtype <c3> ^gtype <c1> ^<c3> <a1> ^<c1> <a1>
          ^world <n1>)
    (<a1> ^condition <n3>)
    (<n3> ^rtype single ^negative true ^type state-pair ^args <a2>
          ^parameter <p2> ^name <c2> ^result <r5> ^attribute <c4>)
    (<a2> ^num 2 ^2 <c5> ^1 <c6>)
    (<p2> ^num 2)
    (<c5> -^rtype set ^result <r1>)
    (<c6> -^rtype set ^result <r3>)
    (<l1> ^game <g1>)
    (<n1> ^predicates <p1>)
    (<p1> ^predicate <n2>)
    (<n2> ^handle <c2>)
    (<r5> ^set <p3>)
    (<r3> ^set <r4>)
    (<r4> ^instance <i2>)
    (<i2> ^1 <n5>)
    (<r1> ^set <r2>)
    (<r2> ^instance <i1>)
    (<i1> ^1 { <> <n5> <n4> })
   -{ (<n2> ^instance <instance1>)
      (<instance1> ^2 <n4> ^1 <n5>)}
    -->
    (<p3> ^instance <i3> +)
    (<i3> ^2 <n4> + ^1 <n5> +)
}



