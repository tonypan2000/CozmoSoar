sp {chunk*chunk-puzzle-impasse*apply*complete*StateNoChange*t2818-3
    :chunk
    (state <s1> ^retrieve-game world-blocks1 -^opponent <o*1>)
    -->
    (<s1> ^retrieve-handle stack-block3 +)
}

sp {chunk*chunk-puzzle-impasse*apply*complete*StateNoChange*t2818-2
    :chunk
    (state <s1> ^retrieve-game world-blocks1 -^opponent <o*1>)
    -->
    (<s1> ^retrieve-handle heuristic-default15 +)
}

sp {chunk*chunk-puzzle-impasse*apply*complete*StateNoChange*t2818-1
    :chunk
    (state <s1> ^retrieve-game world-blocks1 -^opponent <o*1>)
    -->
    (<s1> ^retrieve-handle stacked-up17 +)
}

sp {chunk*chunk-predicate-impasse*apply*complete*action*StateNoChange*t2704-1
    :chunk
    (state <s1> ^gtype goal ^retrieve-handle stacked-up17)
    -->
    (<s1> ^goal <p1> +)
    (<p1> ^potential-args <p2> + ^parameter-set <p3> + ^formated predicate +
           ^primary-rtype single + ^nlp-set <l23> + ^aname stacked-up17 +
           ^handle stacked-up17 +)
    (<p3> ^argnum 1 +)
    (<l23> ^conditions <l1> + ^conditions <l24> + ^aname stacked-up17 +)
    (<l1> ^rtype single + ^args <l2> + ^negative false + ^parameter <l19> +
           ^result <l21> + ^attribute prepositions + ^name below1 +
           ^type state-pair +)
    (<l2> ^num 2 + ^2 <l3> + ^1 <l18> +)
    (<l3> ^rtype single + ^args <l4> + ^negative false + ^parameter <l15> +
           ^result <l16> + ^attribute color + ^name yellow1 +
           ^type attribute +)
    (<l4> ^num 1 + ^1 <l5> +)
    (<l5> ^rtype single + ^args <l6> + ^negative false + ^parameter <l12> +
           ^result <l13> + ^attribute category + ^name block +
           ^type attribute +)
    (<l6> ^num 1 + ^1 <l7> +)
    (<l7> ^rtype single + ^args <l8> + ^negative false + ^parameter <l9> +
           ^result <l10> + ^attribute primitive + ^name object +
           ^type attribute +)
    (<l9> ^num 0 +)
    (<l10> ^set <l11> +)
    (<l12> ^num 0 +)
    (<l13> ^set <l14> +)
    (<l15> ^num 0 +)
    (<l16> ^set <l17> +)
    (<l19> ^num 1 + ^1 <l20> +)
    (<l20> ^param-id 1 + ^type single +)
    (<l21> ^set <l22> +)
    (<l18> ^rtype single + ^args <l41> + ^negative false + ^parameter <l52> +
           ^result <l53> + ^attribute color + ^name blue1 + ^type attribute +)
    (<l41> ^num 1 + ^1 <l42> +)
    (<l42> ^rtype single + ^args <l43> + ^negative false + ^parameter <l49> +
           ^result <l50> + ^attribute category + ^name block +
           ^type attribute +)
    (<l43> ^num 1 + ^1 <l44> +)
    (<l44> ^rtype single + ^args <l45> + ^negative false + ^parameter <l46> +
           ^result <l47> + ^attribute primitive + ^name object +
           ^type attribute +)
    (<l46> ^num 0 +)
    (<l47> ^set <l48> +)
    (<l49> ^num 0 +)
    (<l50> ^set <l51> +)
    (<l52> ^num 0 +)
    (<l53> ^set <l54> +)
    (<l24> ^rtype single + ^args <l25> + ^negative false + ^parameter <l55> +
           ^result <l57> + ^attribute prepositions + ^name on1 +
           ^type state-pair +)
    (<l25> ^num 2 + ^2 <l26> + ^1 <l18> +)
    (<l26> ^rtype single + ^args <l27> + ^negative false + ^parameter <l38> +
           ^result <l39> + ^attribute color + ^name purple1 +
           ^type attribute +)
    (<l27> ^num 1 + ^1 <l28> +)
    (<l28> ^rtype single + ^args <l29> + ^negative false + ^parameter <l35> +
           ^result <l36> + ^attribute category + ^name block +
           ^type attribute +)
    (<l29> ^num 1 + ^1 <l30> +)
    (<l30> ^rtype single + ^args <l31> + ^negative false + ^parameter <l32> +
           ^result <l33> + ^attribute primitive + ^name object +
           ^type attribute +)
    (<l32> ^num 0 +)
    (<l33> ^set <l34> +)
    (<l35> ^num 0 +)
    (<l36> ^set <l37> +)
    (<l38> ^num 0 +)
    (<l39> ^set <l40> +)
    (<l55> ^num 1 + ^1 <l56> +)
    (<l56> ^param-id 1 + ^type single +)
    (<l57> ^set <l58> +)
}

sp {chunk*top-pair*apply*complete*t2692-1
    :chunk
    (state <s1> ^list <l1> ^world <n2>
          ^{ << action goal predicate failure heuristic >> <c6> } <a2>)
    (<l1> ^game <g1>)
    (<n2> ^predicates <p2>)
    (<p2> ^predicate <n3>)
    (<n3> ^instance <n4> ^handle <c1>)
    (<n4> ^2 <n5> ^1 <n6>)
    (<a2> ^condition <n1>)
    (<n1> ^rtype single ^negative false ^name <c1> ^type state-pair ^args <a1>
          ^parameter <p1> ^result <r3> ^attribute <c2>)
    (<a1> ^num 2 ^2 <c3> ^1 <c4>)
    (<c3> -^rtype set ^result <r1>)
    (<c4> -^rtype set ^result <r2>)
    (<p1> ^num { < 2 <c5> })
    (<r3> ^set <p5>)
    (<r2> ^set <p4>)
    (<p4> ^instance <i2>)
    (<i2> ^1 <n6>)
    (<r1> ^set <p3>)
    (<p3> ^instance <i1>)
    (<i1> ^1 <n5>)
    -->
    (<p5> ^instance <i3> +)
    (<i3> ^1 <n6> +)
}

sp {chunk*chunk-predicate-impasse*apply*complete*action*StateNoChange*t1723-1
    :chunk
    (state <s1> ^gtype heuristic ^retrieve-handle heuristic-default15)
    -->
    (<s1> ^heuristic <p1> +)
    (<p1> ^modifier previously + ^moved <l1> + ^avoid <l6> +
           ^ntype heuristic + ^potential-args <p2> + ^parameter-set <p3> +
           ^formated predicate + ^primary-rtype single + ^nlp-set <l12> +
           ^aname heuristic-default15 + ^handle heuristic-default15 +)
    (<l6> ^1 <l2> +)
    (<l2> ^rtype single + ^args <l3> + ^parameter <l5> + ^attribute action +
           ^name move1 + ^type concept +)
    (<l5> ^1 <l4> +)
    (<l4> ^param-id 1 + ^type single +)
    (<p3> ^argnum 1 +)
    (<l1> ^rtype single + ^args <l7> + ^negative false + ^parameter <l8> +
           ^result <l10> + ^attribute action + ^name move1 + ^type concept +)
    (<l8> ^num 1 + ^1 <l9> +)
    (<l9> ^param-id 1 + ^type single +)
    (<l10> ^set <l11> +)
    (<l12> ^conditions <l1> + ^aname heuristic-default15 +)
}

sp {chunk*chunk-previous*preference*avoid*single-operators*1args*moved*Tie*t1710-1
    :chunk
    (state <s3> ^operator <o1> + ^list <l1> ^superstate <s2>)
    (<o1> -^duplicate-of <d*1> ^verb-structure <l2> ^parameters <i2>)
    (<l1> ^game <g1>)
    (<l2> ^1 <l3>)
    (<l3> ^verb-name <c3> ^1 <c4>)
    (<s2> ^superstate <s1> ^operator <o2>)
    (<s1> ^heuristic <a1>)
    (<a1> -^consider <c*1> ^modifier previously ^ntype heuristic ^moved <c1>
          ^parameter-set <p1> ^avoid <n1>)
    (<c1> ^type concept ^attribute action ^parameter <p2>)
    (<p1> ^argnum 1 ^set <i1>)
    (<p2> -^2 <v*2> ^1 <p5>)
    (<n1> -^2 <v*4> ^1 <n2>)
    (<p5> ^param-id <c4>)
    (<n2> -^verb <v*7> ^name <c3> ^type concept ^attribute action
          ^parameter <p3>)
    (<p3> -^2 <v*8> ^1 <p4>)
    (<p4> ^param-id <c2>)
    (<o2> ^superoperator <o3>)
    (<o3> ^parameters <i3>)
    (<i3> ^<c4> <n5>)
    (<n5> ^handle <c5>)
    (<i2> ^<c4> <n4>)
    (<n4> ^handle <c5>)
    (<i1> ^<c2> <n3>)
    (<n3> ^handle <c5>)
    -->
    (<s3> ^operator <o1> -)
}

sp {chunk*chunk-predicate-impasse*apply*complete*action*StateNoChange*t1474-1
    :chunk
    (state <s1> ^gtype action ^retrieve-handle stack-block3)
    -->
    (<s1> ^action <p1> +)
    (<p1> ^potential-args <p2> + ^parameter-set <p3> + ^formated predicate +
           ^primary-rtype single + ^nlp-set <l12> + ^verb-structure <l30> +
           ^aname stack-block3 + ^handle stack-block3 +)
    (<p3> ^argnum 2 +)
    (<l12> ^conditions <l1> + ^conditions <l13> + ^aname stack-block3 +)
    (<l1> ^rtype single + ^args <l2> + ^negative false + ^parameter <l8> +
           ^result <l10> + ^attribute predicate + ^name clear +
           ^type concept +)
    (<l2> ^num 1 + ^1 <l3> +)
    (<l3> ^rtype single + ^args <l4> + ^negative false + ^parameter <l5> +
           ^result <l6> + ^attribute primitive + ^name object +
           ^type attribute +)
    (<l5> ^num 0 +)
    (<l6> ^set <l7> +)
    (<l8> ^num 1 + ^1 <l9> +)
    (<l9> ^param-id 2 + ^type single +)
    (<l10> ^set <l11> +)
    (<l13> ^rtype single + ^args <l14> + ^negative false + ^parameter <l25> +
           ^result <l27> + ^attribute predicate + ^name clear +
           ^type concept +)
    (<l14> ^num 1 + ^1 <l15> +)
    (<l15> ^rtype single + ^args <l16> + ^negative false + ^parameter <l22> +
           ^result <l23> + ^attribute category + ^name block +
           ^type attribute +)
    (<l16> ^num 1 + ^1 <l17> +)
    (<l17> ^rtype single + ^args <l18> + ^negative false + ^parameter <l19> +
           ^result <l20> + ^attribute primitive + ^name object +
           ^type attribute +)
    (<l19> ^num 0 +)
    (<l20> ^set <l21> +)
    (<l22> ^num 0 +)
    (<l23> ^set <l24> +)
    (<l25> ^num 1 + ^1 <l26> +)
    (<l26> ^param-id 1 + ^type single +)
    (<l27> ^set <l28> +)
    (<l30> ^1 <l29> +)
    (<l29> ^verb-prep on1 + ^verb-name move1 + ^2 2 + ^1 1 +)
}

sp {chunk*with-attribute*apply*complete*instance*t1460-1
    :chunk
    (state <s1> ^list <l1>
          ^{ << action goal predicate failure heuristic >> <c7> } <a2>)
    (<l1> ^game <g1>)
    (<a2> ^condition <c1>)
    (<c1> ^rtype single ^type attribute ^args <a1> ^negative <c2>
          ^parameter <p1> ^result <r3> ^name <c4> ^attribute <c5>)
    (<p1> ^num { < 2 <c6> })
    (<a1> ^1 <c3>)
    (<r3> ^set <p3>)
    (<c3> ^result <r1>)
    (<r1> ^set <r2>)
    (<r2> ^instance <i1>)
    (<i1> ^1 <n1>)
    (<n1> ^predicates <p2>)
    (<p2> ^<c5> <c4>)
    -->
    (<p3> ^instance <i2> +)
    (<i2> ^1 <n1> +)
}

sp {chunk*chunk-predicate-impasse*apply*complete*StateNoChange*t1451-1
    :chunk
    (state <s1> ^gtype <c2> ^<c2> <g1>)
    (<g1> ^condition <c1>)
    (<c1> ^name clear ^type concept ^attribute predicate)
    -->
    (<s1> ^predicate <p1> + ^gtype predicate +)
    (<p1> ^link <c1> + ^potential-args <p2> + ^parameter-set <p3> +
           ^formated predicate + ^primary-rtype single + ^nlp-set <l18> +
           ^aname clear + ^handle clear +)
    (<p3> ^argnum 1 +)
    (<l18> ^conditions <l1> + ^aname clear +)
    (<l1> ^rtype single + ^args <l2> + ^negative true + ^parameter <l14> +
           ^result <l16> + ^attribute prepositions + ^name below1 +
           ^type state-pair +)
    (<l2> ^num 2 + ^2 <l3> + ^1 <l8> +)
    (<l3> ^rtype single + ^args <l4> + ^negative false + ^parameter <l5> +
           ^result <l6> + ^attribute primitive + ^name object +
           ^type attribute +)
    (<l5> ^num 0 +)
    (<l6> ^set <l7> +)
    (<l8> ^rtype single + ^args <l9> + ^negative false + ^parameter <l10> +
           ^result <l12> + ^attribute input-arg + ^name object +)
    (<l10> ^num 1 + ^1 <l11> +)
    (<l11> ^param-id 1 + ^type single +)
    (<l12> ^set <l13> +)
    (<l14> ^num 1 + ^1 <l15> +)
    (<l15> ^param-id 1 + ^type single +)
    (<l16> ^set <l17> +)
}

sp {chunk*top-pair*apply*complete*t1167-1
    :chunk
    (state <s1> ^list <l1> ^world <n2>
          ^{ << action goal predicate failure heuristic >> <c6> } <a2>)
    (<l1> ^game <g1>)
    (<n2> ^predicates <p2>)
    (<p2> ^predicate <n3>)
    (<n3> ^handle <c1>)
    (<a2> ^condition <n1>)
    (<n1> ^rtype single ^negative true ^name <c1> ^type state-pair ^args <a1>
          ^parameter <p1> ^result <r3> ^attribute <c2>)
    (<a1> ^num 2 ^1 <c3> ^2 <c5>)
    (<c3> -^rtype set ^result <r1>)
    (<p1> ^num { < 2 <c4> })
    (<r3> ^set <p3>)
    (<r1> ^set <r2>)
    (<r2> ^instance <i1>)
    (<i1> ^1 <n4>)
   -{ (<n3> ^instance <instance>)
      (<instance> ^1 <n4> ^2 <objb>)
      (<c5> ^result <r*2>)
      (<r*2> ^set <s*4>)
      (<s*4> ^instance <i*2>)
      (<i*2> ^1 <objb>)}
    -->
    (<p3> ^instance <i2> +)
    (<i2> ^1 <n4> +)
}

sp {chunk*with-attribute*apply*complete*instance*t1161-1
    :chunk
    (state <s1> ^list <l1> ^world <n1>
          ^{ << action goal predicate failure heuristic >> <c4> } <a3>)
    (<l1> ^game <g1>)
    (<n1> ^objects <c3>)
    (<a3> ^condition <c1>)
    (<c1> ^rtype single ^name object ^type attribute ^attribute primitive
          ^args <a2> ^negative <c2> ^parameter <p1> ^result <r1>)
    (<a2> -^1 <a1>)
    (<r1> ^set <p2>)
    (<c3> ^object <n2>)
    (<n2> -^handle self)
    -->
    (<p2> ^instance <i1> +)
    (<i1> ^1 <n2> +)
}



