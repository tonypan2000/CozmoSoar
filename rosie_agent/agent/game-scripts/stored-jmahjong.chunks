sp {chunk*chunk-puzzle-impasse*apply*complete*StateNoChange*t2713-2
    :chunk
    (state <s1> ^retrieve-game mahjong1 -^opponent <o*1>)
    -->
    (<s1> ^retrieve-handle action-default11 +)
}

sp {chunk*chunk-puzzle-impasse*apply*complete*StateNoChange*t2713-1
    :chunk
    (state <s1> ^retrieve-game mahjong1 -^opponent <o*1>)
    -->
    (<s1> ^retrieve-handle goal-default14 +)
}

sp {chunk*chunk-predicate-impasse*apply*complete*action*StateNoChange*t2602-1
    :chunk
    (state <s1> ^gtype goal ^retrieve-handle goal-default14)
    -->
    (<s1> ^goal <p1> +)
    (<p1> ^potential-args <p2> + ^parameter-set <p3> + ^formated predicate +
           ^primary-rtype set + ^nlp-set <l28> + ^aname goal-default14 +
           ^handle goal-default14 +)
    (<p3> ^argnum 1 +)
    (<l28> ^conditions <l1> + ^aname goal-default14 +)
    (<l1> ^rtype set + ^args <l2> + ^negative false + ^parameter <l24> +
           ^result <l26> + ^attribute prepositions + ^name on1 +
           ^type state-pair +)
    (<l2> ^num 2 + ^2 <l3> + ^1 <l13> +)
    (<l3> ^rtype single + ^args <l4> + ^negative false + ^parameter <l10> +
           ^result <l11> + ^attribute name + ^name garbage + ^type attribute +)
    (<l4> ^num 1 + ^1 <l5> +)
    (<l5> ^rtype single + ^args <l6> + ^negative false + ^parameter <l7> +
           ^result <l8> + ^attribute primitive + ^name object +
           ^type attribute +)
    (<l7> ^num 0 +)
    (<l8> ^set <l9> +)
    (<l10> ^num 0 +)
    (<l11> ^set <l12> +)
    (<l13> ^rtype set + ^args <l14> + ^negative false + ^parameter <l20> +
           ^result <l22> + ^attribute category + ^name block +
           ^type attribute +)
    (<l14> ^num 1 + ^1 <l15> +)
    (<l15> ^rtype single + ^args <l16> + ^negative false + ^parameter <l17> +
           ^result <l18> + ^attribute primitive + ^name object +
           ^type attribute +)
    (<l17> ^num 0 +)
    (<l18> ^set <l19> +)
    (<l20> ^num 1 + ^1 <l21> +)
    (<l21> ^param-id 1 + ^type set +)
    (<l22> ^set <l23> +)
    (<l24> ^num 1 + ^1 <l25> +)
    (<l25> ^param-id 1 + ^type set +)
    (<l26> ^set <l27> +)
}

sp {chunk*top-pair*apply*complete*t2590-1
    :chunk
    (state <s1> ^list <l1> ^world <n2>
          ^{ << action goal predicate failure heuristic >> <c5> } <a2>)
    (<l1> ^game <g1>)
    (<n2> ^predicates <p2>)
    (<p2> ^predicate <n3>)
    (<n3> ^handle <c1>)
    (<a2> ^condition <n1>)
    (<n1> ^rtype set ^negative false ^name <c1> ^type state-pair ^args <a1>
          ^parameter <p1> ^result <r2> ^attribute <c2>)
    (<a1> ^num 2 ^2 <c3> ^1 <c4>)
    (<p1> ^num 1)
    (<c3> -^rtype set)
    (<c4> ^rtype set ^result <r1>)
    (<r2> ^set <p4>)
    (<r1> ^set <p3>)
    (<p3> ^instance <i1>)
    (<i1> ^1 <i2>)
   -{ (<i2> -^<x1> <x*1>)
      (<s1> ^<a*1> <v*1>)}
   -{ (<i2> ^<elem> <e>)
     -{ (<n3> ^instance <instance1>)
        (<instance1> ^1 <e> ^2 <objb>)
        (<c3> ^result <r*2>)
        (<r*2> ^set <s*4>)
        (<s*4> ^instance <i*2>)
        (<i*2> ^1 <objb>)}}
    -->
    (<p4> ^instance <i3> +)
    (<i3> ^1 <i2> +)
}

sp {chunk*with-attribute*apply*complete*instance*objects*OpNoChange*t2584-2
    :chunk
    (state <s1> ^list <l1>
          ^{ << action goal predicate failure heuristic >> <c6> } <a2>)
    (<l1> ^game <g1>)
    (<a2> ^condition <c1>)
    (<c1> ^rtype set ^type attribute ^args <a1> ^negative <c2> ^parameter <p1>
          ^result <r1> ^name <c4> ^attribute <c5>)
    (<a1> ^1 <c3>)
    (<c3> -^rtype set ^result <r2>)
    (<r2> ^set <r3>)
    (<r3> ^instance <i3>)
    (<i3> ^1 <n1>)
    (<n1> ^predicates <p3>)
    (<r1> ^set <p2>)
    (<p2> ^instance <i1>)
    (<i1> ^2 <c4> ^3 <c5> ^1 <i2>)
    (<p3> ^<c5> <c4>)
    -->
    (<i2> ^object <n1> +)
}

sp {chunk*with-attribute*apply*complete*instance*t2584-1
    :chunk
    (state <s1> ^list <l1>
          ^{ << action goal predicate failure heuristic >> <c6> } <a2>)
    (<l1> ^game <g1>)
    (<a2> ^condition <c1>)
    (<c1> ^rtype set ^type attribute ^args <a1> ^negative <c2> ^parameter <p1>
          ^result <r1> ^name <c4> ^attribute <c5>)
    (<a1> ^1 <c3>)
    (<c3> -^rtype set)
    (<r1> ^set <p2>)
    -->
    (<p2> ^instance <i1> +)
    (<i1> ^2 <c4> + ^3 <c5> + ^1 <i2> +)
}

sp {chunk*chunk-predicate-impasse*apply*complete*action*StateNoChange*t2082-1
    :chunk
    (state <s1> ^gtype action ^retrieve-handle action-default11)
    -->
    (<s1> ^action <p1> +)
    (<p1> ^potential-args <p2> + ^parameter-set <p3> + ^formated predicate +
           ^primary-rtype single + ^nlp-set <l28> + ^verb-structure <l68> +
           ^aname action-default11 + ^handle action-default11 +)
    (<p3> ^argnum 4 +)
    (<l28> ^conditions <l1> + ^conditions <l29> + ^conditions <l56> +
           ^aname action-default11 +)
    (<l1> ^return-type number + ^rtype single + ^args <l2> + ^negative false +
           ^parameter <l23> + ^result <l26> + ^name color +
           ^type attribute-of +)
    (<l2> ^num 1 + ^2 <l3> +)
    (<l3> ^rtype single + ^args <l4> + ^negative false + ^parameter <l20> +
           ^result <l21> + ^attribute predicate + ^name free + ^type concept +)
    (<l4> ^num 1 + ^1 <l5> +)
    (<l5> ^rtype single + ^args <l6> + ^negative false + ^parameter <l17> +
           ^result <l18> + ^attribute predicate + ^name clear +
           ^type concept +)
    (<l6> ^num 1 + ^1 <l7> +)
    (<l7> ^rtype single + ^args <l8> + ^negative false + ^parameter <l14> +
           ^result <l15> + ^attribute category + ^name block +
           ^type attribute +)
    (<l8> ^num 1 + ^1 <l9> +)
    (<l9> ^rtype single + ^args <l10> + ^negative false + ^parameter <l11> +
           ^result <l12> + ^attribute primitive + ^name object +
           ^type attribute +)
    (<l11> ^num 0 +)
    (<l12> ^set <l13> +)
    (<l14> ^num 0 +)
    (<l15> ^set <l16> +)
    (<l17> ^num 0 +)
    (<l18> ^set <l19> +)
    (<l20> ^num 0 +)
    (<l21> ^set <l22> +)
    (<l23> ^num 2 + ^2 <l24> + ^1 <l25> +)
    (<l24> ^param-id 2 + ^type single +)
    (<l25> ^param-id 4 + ^type single +)
    (<l26> ^set <l27> +)
    (<l29> ^return-type number + ^rtype single + ^args <l30> +
           ^negative false + ^parameter <l51> + ^result <l54> + ^name color +
           ^type attribute-of +)
    (<l30> ^num 1 + ^2 <l31> +)
    (<l31> ^rtype single + ^args <l32> + ^negative false + ^parameter <l48> +
           ^result <l49> + ^attribute predicate + ^name clear +
           ^type concept +)
    (<l32> ^num 1 + ^1 <l33> +)
    (<l33> ^rtype single + ^args <l34> + ^negative false + ^parameter <l45> +
           ^result <l46> + ^attribute predicate + ^name free + ^type concept +)
    (<l34> ^num 1 + ^1 <l35> +)
    (<l35> ^rtype single + ^args <l36> + ^negative false + ^parameter <l42> +
           ^result <l43> + ^attribute category + ^name block +
           ^type attribute +)
    (<l36> ^num 1 + ^1 <l37> +)
    (<l37> ^rtype single + ^args <l38> + ^negative false + ^parameter <l39> +
           ^result <l40> + ^attribute primitive + ^name object +
           ^type attribute +)
    (<l39> ^num 0 +)
    (<l40> ^set <l41> +)
    (<l42> ^num 0 +)
    (<l43> ^set <l44> +)
    (<l45> ^num 0 +)
    (<l46> ^set <l47> +)
    (<l48> ^num 0 +)
    (<l49> ^set <l50> +)
    (<l51> ^num 2 + ^2 <l52> + ^1 <l53> +)
    (<l52> ^param-id 3 + ^type single +)
    (<l53> ^param-id 4 + ^type single +)
    (<l54> ^set <l55> +)
    (<l56> ^rtype single + ^args <l57> + ^negative false + ^parameter <l63> +
           ^result <l65> + ^attribute name + ^name garbage + ^type attribute +)
    (<l57> ^num 1 + ^1 <l58> +)
    (<l58> ^rtype single + ^args <l59> + ^negative false + ^parameter <l60> +
           ^result <l61> + ^attribute primitive + ^name object +
           ^type attribute +)
    (<l60> ^num 0 +)
    (<l61> ^set <l62> +)
    (<l63> ^num 1 + ^1 <l64> +)
    (<l64> ^param-id 1 + ^type single +)
    (<l65> ^set <l66> +)
    (<l68> ^2 <l67> + ^1 <l69> +)
    (<l67> ^verb-prep on1 + ^verb-name move1 + ^2 1 + ^1 3 +)
    (<l69> ^verb-prep on1 + ^verb-name move1 + ^2 1 + ^1 2 +)
}

sp {chunk*attribute-of*apply*complete*t2068-1
    :chunk
    (state <s1> ^list <l1>
          ^{ << action goal predicate failure heuristic >> <c5> } <a2>)
    (<l1> ^game <g1>)
    (<a2> ^condition <n1>)
    (<n1> ^type attribute-of ^args <a1> ^parameter <p1> ^negative <c1>
          ^result <r3> ^result <r1> ^name <c2>)
    (<a1> ^num 1 ^2 <c3>)
    (<p1> ^num 2)
    (<c3> -^rtype set ^result <r2>)
    (<r3> ^set <p5>)
    (<r2> ^set <p3>)
    (<p3> ^instance <i1>)
    (<i1> ^1 <n2>)
    (<n2> ^predicates <p4>)
    (<r1> ^set <p2>)
    (<p4> ^<c2> <c4>)
    -->
    (<p5> ^instance <i2> +)
    (<i2> ^2 <n2> + ^1 <c4> +)
}

sp {chunk*chunk-predicate-impasse*apply*complete*StateNoChange*t2059-1
    :chunk
    (state <s1> ^gtype <c2> ^<c2> <g1>)
    (<g1> ^condition <c1>)
    (<c1> ^name free ^type concept ^attribute predicate)
    -->
    (<s1> ^predicate <p1> + ^gtype predicate +)
    (<p1> ^link <c1> + ^potential-args <p2> + ^parameter-set <p3> +
           ^formated predicate + ^primary-rtype single + ^nlp-set <l23> +
           ^aname free + ^handle free +)
    (<p3> ^argnum 1 +)
    (<l23> ^conditions <l1> + ^aname free +)
    (<l1> ^rtype single + ^args <l2> + ^negative true + ^parameter <l19> +
           ^result <l21> + ^attribute prepositions + ^name on1 +
           ^type state-pair +)
    (<l2> ^num 2 + ^2 <l3> + ^1 <l13> +)
    (<l3> ^rtype single + ^args <l4> + ^negative false + ^parameter <l10> +
           ^result <l11> + ^attribute category + ^name location +
           ^type attribute +)
    (<l4> ^num 1 + ^1 <l5> +)
    (<l5> ^rtype single + ^args <l6> + ^negative false + ^parameter <l7> +
           ^result <l8> + ^attribute primitive + ^name object +
           ^type attribute +)
    (<l7> ^num 0 +)
    (<l8> ^set <l9> +)
    (<l10> ^num 0 +)
    (<l11> ^set <l12> +)
    (<l13> ^rtype single + ^args <l14> + ^negative false + ^parameter <l15> +
           ^result <l17> + ^attribute input-arg + ^name object +)
    (<l15> ^num 1 + ^1 <l16> +)
    (<l16> ^param-id 1 + ^type single +)
    (<l17> ^set <l18> +)
    (<l19> ^num 1 + ^1 <l20> +)
    (<l20> ^param-id 1 + ^type single +)
    (<l21> ^set <l22> +)
}

sp {chunk*chunk-predicate-impasse*apply*complete*StateNoChange*t2049-1
    :chunk
    (state <s1> ^gtype <c2> ^<c2> <g1>)
    (<g1> ^condition <c1>)
    (<c1> ^name clear ^type concept ^attribute predicate)
    -->
    (<s1> ^predicate <p1> + ^gtype predicate +)
    (<p1> ^link <c1> + ^potential-args <p2> + ^parameter-set <p3> +
           ^formated predicate + ^primary-rtype single + ^nlp-set <l18> +
           ^aname clear + ^handle clear +)
    (<p3> ^argnum 1 +)
    (<l18> ^conditions <l1> + ^aname clear +)
    (<l1> ^rtype single + ^args <l2> + ^negative true + ^parameter <l14> +
           ^result <l16> + ^attribute prepositions + ^name below1 +
           ^type state-pair +)
    (<l2> ^num 2 + ^2 <l3> + ^1 <l8> +)
    (<l3> ^rtype single + ^args <l4> + ^negative false + ^parameter <l5> +
           ^result <l6> + ^attribute primitive + ^name object +
           ^type attribute +)
    (<l5> ^num 0 +)
    (<l6> ^set <l7> +)
    (<l8> ^rtype single + ^args <l9> + ^negative false + ^parameter <l10> +
           ^result <l12> + ^attribute input-arg + ^name object +)
    (<l10> ^num 1 + ^1 <l11> +)
    (<l11> ^param-id 1 + ^type single +)
    (<l12> ^set <l13> +)
    (<l14> ^num 1 + ^1 <l15> +)
    (<l15> ^param-id 1 + ^type single +)
    (<l16> ^set <l17> +)
}

sp {chunk*with-attribute*apply*complete*instance*t1449-1
    :chunk
    (state <s1> ^list <l1>
          ^{ << action goal predicate failure heuristic >> <c7> } <a2>)
    (<l1> ^game <g1>)
    (<a2> ^condition <c1>)
    (<c1> ^rtype single ^type attribute ^args <a1> ^negative <c2>
          ^parameter <p1> ^result <r3> ^name <c4> ^attribute <c5>)
    (<p1> ^num { < 2 <c6> })
    (<a1> ^1 <c3>)
    (<r3> ^set <p3>)
    (<c3> ^result <r1>)
    (<r1> ^set <r2>)
    (<r2> ^instance <i1>)
    (<i1> ^1 <n1>)
    (<n1> ^predicates <p2>)
    (<p2> ^<c5> <c4>)
    -->
    (<p3> ^instance <i2> +)
    (<i2> ^1 <n1> +)
}

sp {chunk*top-pair*apply*complete*t931-1
    :chunk
    (state <s1> ^list <l1> ^world <n2>
          ^{ << action goal predicate failure heuristic >> <c6> } <a2>)
    (<l1> ^game <g1>)
    (<n2> ^predicates <p2>)
    (<p2> ^predicate <n3>)
    (<n3> ^handle <c1>)
    (<a2> ^condition <n1>)
    (<n1> ^rtype single ^negative true ^name <c1> ^type state-pair ^args <a1>
          ^parameter <p1> ^result <r3> ^attribute <c2>)
    (<a1> ^num 2 ^1 <c3> ^2 <c5>)
    (<c3> -^rtype set ^result <r1>)
    (<p1> ^num { < 2 <c4> })
    (<r3> ^set <p3>)
    (<r1> ^set <r2>)
    (<r2> ^instance <i1>)
    (<i1> ^1 <n4>)
   -{ (<n3> ^instance <instance>)
      (<instance> ^1 <n4> ^2 <objb>)
      (<c5> ^result <r*2>)
      (<r*2> ^set <s*4>)
      (<s*4> ^instance <i*2>)
      (<i*2> ^1 <objb>)}
    -->
    (<p3> ^instance <i2> +)
    (<i2> ^1 <n4> +)
}

sp {chunk*with-attribute*apply*complete*instance*t925-1
    :chunk
    (state <s1> ^list <l1> ^world <n1>
          ^{ << action goal predicate failure heuristic >> <c4> } <a3>)
    (<l1> ^game <g1>)
    (<n1> ^objects <c3>)
    (<a3> ^condition <c1>)
    (<c1> ^rtype single ^name object ^type attribute ^attribute primitive
          ^args <a2> ^negative <c2> ^parameter <p1> ^result <r1>)
    (<a2> -^1 <a1>)
    (<r1> ^set <p2>)
    (<c3> ^object <n2>)
    (<n2> -^handle self)
    -->
    (<p2> ^instance <i1> +)
    (<i1> ^1 <n2> +)
}



