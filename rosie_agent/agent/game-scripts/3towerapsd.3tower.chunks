sp {chunk*chunk-puzzle-impasse*apply*complete*OpNoChange*t3532-5
    :chunk
    (state <s1> ^retrieve-game tower-of-hanoi-31 -^opponent <o1>)
    -->
    (<s1> ^retrieve-handle action-default22 +)
}

sp {chunk*chunk-puzzle-impasse*apply*complete*OpNoChange*t3532-4
    :chunk
    (state <s1> ^retrieve-game tower-of-hanoi-31 -^opponent <o1>)
    -->
    (<s1> ^retrieve-handle heuristic-default24 +)
}

sp {chunk*chunk-puzzle-impasse*apply*complete*OpNoChange*t3532-3
    :chunk
    (state <s1> ^retrieve-game tower-of-hanoi-31 -^opponent <o1>)
    -->
    (<s1> ^retrieve-handle heuristic-default26 +)
}

sp {chunk*chunk-puzzle-impasse*apply*complete*OpNoChange*t3532-2
    :chunk
    (state <s1> ^retrieve-game tower-of-hanoi-31 -^opponent <o1>)
    -->
    (<s1> ^retrieve-handle goal-default31 +)
}

sp {chunk*chunk-puzzle-impasse*apply*complete*start-search-depth*OpNoChange*t3532-1
    :chunk
    (state <s1> ^retrieve-game tower-of-hanoi-31 -^opponent <o1>)
    -->
    (<s1> ^start-search-depth 7 +)
}

sp {chunk*chunk-predicate-impasse*apply*complete*action*OpNoChange*t3415-1
    :chunk
    (state <s1> ^gtype goal ^retrieve-handle goal-default31)
    -->
    (<s1> ^goal <g1> +)
    (<g1> ^potential-args <p1> + ^parameter-set <p2> + ^formated predicate +
           ^primary-rtype set + ^nlp-set <n1> + ^aname goal-default31 +
           ^handle goal-default31 +)
    (<p2> ^argnum 2 +)
    (<n1> ^conditions <c1> + ^conditions <c2> + ^aname goal-default31 +)
    (<c1> ^function soar-count + ^return-type number + ^rtype single +
           ^args <a1> + ^negative false + ^parameter <p7> + ^result <r5> +
           ^name count + ^type function +)
    (<a1> ^num 1 + ^2 <i1> +)
    (<i1> ^rtype set + ^args <a2> + ^negative false + ^parameter <p6> +
           ^result <r4> + ^attribute predicate + ^name clear + ^type concept +)
    (<a2> ^num 1 + ^1 <i2> +)
    (<i2> ^rtype single + ^args <a3> + ^negative false + ^parameter <p5> +
           ^result <r3> + ^attribute color + ^name green1 + ^type attribute +)
    (<a3> ^num 1 + ^1 <i3> +)
    (<i3> ^rtype single + ^args <a4> + ^negative false + ^parameter <p4> +
           ^result <r2> + ^attribute category + ^name location +
           ^type attribute +)
    (<a4> ^num 1 + ^1 <i4> +)
    (<i4> ^rtype single + ^args <a5> + ^negative false + ^parameter <p3> +
           ^result <r1> + ^attribute primitive + ^name object +
           ^type attribute +)
    (<p3> ^num 0 +)
    (<r1> ^set <s2> +)
    (<p4> ^num 0 +)
    (<r2> ^set <s3> +)
    (<p5> ^num 0 +)
    (<r3> ^set <s4> +)
    (<p6> ^num 1 + ^1 <i5> +)
    (<i5> ^param-id 1 + ^type set +)
    (<r4> ^set <s5> +)
    (<p7> ^num 2 + ^2 <i6> + ^1 <i7> +)
    (<i6> ^param-id 1 + ^type set +)
    (<i7> ^param-id 2 + ^type single +)
    (<r5> ^set <s6> +)
    (<c2> ^return-type number + ^rtype single + ^args <a6> + ^negative false +
           ^parameter <p8> + ^result <r6> + ^name number +)
    (<p8> ^num 1 + ^1 <i8> +)
    (<i8> ^param-id 2 + ^type single +)
    (<r6> ^set <s7> +)
    (<s7> ^instance <i9> +)
    (<i9> ^1 2 +)
}

sp {chunkx4*soar-count*apply*complete*OpNoChange*t3403-1
    :chunk
    (state <s1> ^list <l1>
          ^{ <a1> << action goal predicate failure heuristic >> } <a2>)
    (<l1> ^game <g1>)
    (<a2> ^condition <c1>)
    (<c1> ^function soar-count ^type function ^args <a3> ^parameter <p1>
          ^negative <n1> ^result <r1> ^name <n2>)
    (<a3> ^num 1 ^2 <i1>)
    (<p1> ^num 2)
    (<i1> ^rtype set ^result <r2>)
    (<r1> ^set <s2>)
    (<r2> ^set <s3>)
    (<s3> ^instance <i2>)
    (<i2> ^1 <i3>)
   -{ (<i3> -^<a4> <a5>)
      (<s1> ^<a6> <a7>)}
    -->
    (<s2> ^instance <i4> +)
    (<i4> ^1 (size <i3>) + ^2 <i3> +)
}

sp {chunk*chunk-predicate-impasse*apply*complete*action*OpNoChange*t2670-1
    :chunk
    (state <s1> ^gtype heuristic ^retrieve-handle heuristic-default26)
    -->
    (<s1> ^heuristic <h1> +)
    (<h1> ^prefer <p1> + ^ntype heuristic + ^potential-args <p2> +
           ^parameter-set <p3> + ^formated predicate + ^primary-rtype single +
           ^nlp-set <n1> + ^aname heuristic-default26 +
           ^handle heuristic-default26 +)
    (<p1> ^1 <i1> +)
    (<p3> ^argnum 1 +)
    (<i1> ^rtype single + ^args <a1> + ^negative false + ^parameter <p4> +
           ^result <r1> + ^attribute action + ^name move1 + ^type concept +)
    (<p4> ^num 1 + ^1 <i2> +)
    (<i2> ^param-id 1 + ^type single +)
    (<r1> ^set <s2> +)
    (<n1> ^conditions <i1> + ^conditions <c1> + ^aname heuristic-default26 +)
    (<c1> ^rtype single + ^args <a2> + ^negative false + ^parameter <p7> +
           ^result <r4> + ^attribute size + ^name small1 + ^type attribute +)
    (<a2> ^num 1 + ^1 <i3> +)
    (<i3> ^rtype single + ^args <a3> + ^negative false + ^parameter <p6> +
           ^result <r3> + ^attribute category + ^name block +
           ^type attribute +)
    (<a3> ^num 1 + ^1 <i4> +)
    (<i4> ^rtype single + ^args <a4> + ^negative false + ^parameter <p5> +
           ^result <r2> + ^attribute primitive + ^name object +
           ^type attribute +)
    (<p5> ^num 0 +)
    (<r2> ^set <s3> +)
    (<p6> ^num 0 +)
    (<r3> ^set <s4> +)
    (<p7> ^num 1 + ^1 <i5> +)
    (<i5> ^param-id 1 + ^type single +)
    (<r4> ^set <s5> +)
}

sp {chunk*chunk-predicate-impasse*apply*complete*action*OpNoChange*t2450-1
    :chunk
    (state <s1> ^gtype heuristic ^retrieve-handle heuristic-default24)
    -->
    (<s1> ^heuristic <h1> +)
    (<h1> ^modifier previously + ^moved <m1> + ^avoid <a1> +
           ^ntype heuristic + ^potential-args <p2> + ^parameter-set <p3> +
           ^formated predicate + ^primary-rtype single + ^nlp-set <n1> +
           ^aname heuristic-default24 + ^handle heuristic-default24 +)
    (<a1> ^1 <i1> +)
    (<i1> ^rtype single + ^args <a2> + ^parameter <p1> + ^attribute action +
           ^name move1 + ^type concept +)
    (<p1> ^1 <i2> +)
    (<i2> ^param-id 1 + ^type single +)
    (<p3> ^argnum 1 +)
    (<m1> ^rtype single + ^args <a3> + ^negative false + ^parameter <p4> +
           ^result <r1> + ^attribute action + ^name move1 + ^type concept +)
    (<p4> ^num 1 + ^1 <i3> +)
    (<i3> ^param-id 1 + ^type single +)
    (<r1> ^set <s2> +)
    (<n1> ^conditions <m1> + ^aname heuristic-default24 +)
}

sp {chunkx2*chunk-previous*preference*avoid*single-operators*1args*moved*OpNoChange*t2437-1
    :chunk
    (state <s1> ^operator <o1> + ^list <l1> ^superstate <s2>)
    (<o1> -^duplicate-of <d1> ^verb-structure <v1> ^parameters <p1>)
    (<l1> ^game <g1>)
    (<v1> ^1 <i1>)
    (<i1> ^verb-name <v2> ^1 <i2>)
    (<s2> ^superstate <s3> ^operator <o2>)
    (<s3> ^heuristic <h1>)
    (<h1> -^consider <c1> ^modifier previously ^ntype heuristic ^moved <m1>
          ^parameter-set <p2> ^avoid <a1>)
    (<m1> ^type concept ^attribute action ^parameter <p3>)
    (<p2> ^argnum 1 ^set <s4>)
    (<p3> -^2 <i3> ^1 <i5>)
    (<a1> -^2 <i4> ^1 <i6>)
    (<i5> ^param-id <i2>)
    (<i6> -^verb <v3> ^name <v2> ^type concept ^attribute action
          ^parameter <p4>)
    (<p4> -^2 <i7> ^1 <i8>)
    (<i8> ^param-id <p5>)
    (<o2> ^superoperator <s5>)
    (<s5> ^parameters <p6>)
    (<p6> ^<i2> <i9>)
    (<i9> ^handle <h2>)
    (<p1> ^<i2> <i10>)
    (<i10> ^handle <h2>)
    (<s4> ^<p5> <p7>)
    (<p7> ^handle <h2>)
    -->
    (<s1> ^operator <o1> -)
}

sp {chunk*chunk-predicate-impasse*apply*complete*action*OpNoChange*t2179-1
    :chunk
    (state <s1> ^gtype action ^retrieve-handle action-default22)
    -->
    (<s1> ^action <a1> +)
    (<a1> ^potential-args <p1> + ^parameter-set <p2> + ^formated predicate +
           ^primary-rtype single + ^nlp-set <n1> + ^verb-structure <v1> +
           ^aname action-default22 + ^handle action-default22 +)
    (<p2> ^argnum 2 +)
    (<n1> ^conditions <c1> + ^aname action-default22 +)
    (<c1> ^rtype single + ^args <a2> + ^negative false + ^parameter <p8> +
           ^result <r6> + ^attribute predicate + ^name larger +
           ^type concept +)
    (<a2> ^num 2 + ^2 <i1> + ^1 <i4> +)
    (<i1> ^rtype single + ^args <a3> + ^negative false + ^parameter <p5> +
           ^result <r3> + ^attribute predicate + ^name clear + ^type concept +)
    (<a3> ^num 1 + ^1 <i2> +)
    (<i2> ^rtype single + ^args <a4> + ^negative false + ^parameter <p4> +
           ^result <r2> + ^attribute category + ^name block +
           ^type attribute +)
    (<a4> ^num 1 + ^1 <i3> +)
    (<i3> ^rtype single + ^args <a5> + ^negative false + ^parameter <p3> +
           ^result <r1> + ^attribute primitive + ^name object +
           ^type attribute +)
    (<p3> ^num 0 +)
    (<r1> ^set <s2> +)
    (<p4> ^num 0 +)
    (<r2> ^set <s3> +)
    (<p5> ^num 0 +)
    (<r3> ^set <s4> +)
    (<i4> ^rtype single + ^args <a6> + ^negative false + ^parameter <p7> +
           ^result <r5> + ^attribute predicate + ^name clear + ^type concept +)
    (<a6> ^num 1 + ^1 <i5> +)
    (<i5> ^rtype single + ^args <a7> + ^negative false + ^parameter <p6> +
           ^result <r4> + ^attribute primitive + ^name object +
           ^type attribute +)
    (<p6> ^num 0 +)
    (<r4> ^set <s5> +)
    (<p7> ^num 0 +)
    (<r5> ^set <s6> +)
    (<p8> ^num 2 + ^2 <i6> + ^1 <i7> +)
    (<i6> ^param-id 1 + ^type single +)
    (<i7> ^param-id 2 + ^type single +)
    (<r6> ^set <s7> +)
    (<v1> ^1 <i8> +)
    (<i8> ^verb-prep on1 + ^verb-name move1 + ^2 2 + ^1 1 +)
}

sp {chunkx4*with-attribute*apply*complete*instance*OpNoChange*t2165-1
    :chunk
    (state <s1> ^list <l1>
          ^{ <a1> << action goal predicate failure heuristic >> } <a2>)
    (<l1> ^game <g1>)
    (<a2> ^condition <c1>)
    (<c1> ^rtype single ^type attribute ^args <a3> ^negative <n1>
          ^parameter <p1> ^result <r1> ^name <n3> ^attribute <a4>)
    (<p1> ^num { <n2> < 2 })
    (<a3> ^1 <i1>)
    (<r1> ^set <s2>)
    (<i1> ^result <r2>)
    (<r2> ^set <s3>)
    (<s3> ^instance <i2>)
    (<i2> ^1 <i3>)
    (<i3> ^predicates <p2>)
    (<p2> ^<a4> <n3>)
    -->
    (<s2> ^instance <i4> +)
    (<i4> ^1 <i3> +)
}

sp {chunk*chunk-predicate-impasse*apply*complete*OpNoChange*t1787-1
    :chunk
    (state <s1> ^gtype <g1> ^<g1> <g2>)
    (<g2> ^condition <c1>)
    (<c1> ^name larger ^type concept ^attribute predicate)
    -->
    (<s1> ^predicate <p1> + ^gtype predicate +)
    (<p1> ^link <c1> + ^potential-args <p2> + ^parameter-set <p3> +
           ^formated predicate + ^primary-rtype single + ^nlp-set <n1> +
           ^aname larger + ^handle larger +)
    (<p3> ^argnum 4 +)
    (<n1> ^conditions <c2> + ^conditions <c3> + ^conditions <c4> +
           ^aname larger +)
    (<c3> ^return-type number + ^rtype single + ^args <a1> + ^negative false +
           ^parameter <p5> + ^result <r2> + ^name volume +
           ^type attribute-of +)
    (<a1> ^num 1 + ^2 <i1> +)
    (<i1> ^rtype single + ^args <a2> + ^negative false + ^parameter <p4> +
           ^result <r1> + ^attribute input-arg + ^name object +)
    (<p4> ^num 1 + ^1 <i2> +)
    (<i2> ^param-id 2 + ^type single +)
    (<r1> ^set <s2> +)
    (<p5> ^num 2 + ^2 <i3> + ^1 <i4> +)
    (<i3> ^param-id 2 + ^type single +)
    (<i4> ^param-id 4 + ^type single +)
    (<r2> ^set <s3> +)
    (<c2> ^return-type number + ^rtype single + ^args <a3> + ^negative false +
           ^parameter <p7> + ^result <r4> + ^name volume +
           ^type attribute-of +)
    (<a3> ^num 1 + ^2 <i5> +)
    (<i5> ^rtype single + ^args <a4> + ^negative false + ^parameter <p6> +
           ^result <r3> + ^attribute input-arg + ^name object +)
    (<p6> ^num 1 + ^1 <i6> +)
    (<i6> ^param-id 1 + ^type single +)
    (<r3> ^set <s4> +)
    (<p7> ^num 2 + ^2 <i7> + ^1 <i8> +)
    (<i7> ^param-id 1 + ^type single +)
    (<i8> ^param-id 3 + ^type single +)
    (<r4> ^set <s5> +)
    (<c4> ^function soar-greater + ^return-type number + ^rtype single +
           ^args <a5> + ^negative false + ^parameter <p8> + ^result <r5> +
           ^name greater + ^type function +)
    (<a5> ^num 2 + ^2 <c3> + ^1 <c2> +)
    (<p8> ^num 2 + ^2 <i9> + ^1 <i10> +)
    (<i9> ^param-id 4 + ^type single +)
    (<i10> ^param-id 3 + ^type single +)
    (<r5> ^set <s6> +)
}

sp {chunkx4*soar-compare*greater*param-2*OpNoChange*t1772-1
    :chunk
    (state <s1> ^list <l1>
          ^{ <a1> << action goal predicate failure heuristic >> } <a2>)
    (<l1> ^game <g1>)
    (<a2> ^condition <c1>)
    (<c1> ^function soar-greater ^type function ^args <a3> ^parameter <p1>
          ^negative <n1> ^result <r1> ^name <n2>)
    (<a3> ^num 2 ^2 <i1> ^1 <i2>)
    (<p1> ^num 2)
    (<r1> ^set <s2>)
    (<i2> ^result <r2>)
    (<r2> ^set <s3>)
    (<s3> ^instance <i3>)
    (<i3> ^1 <i4>)
    (<i1> ^result <r3>)
    (<r3> ^set <s4>)
    (<s4> ^instance <i5>)
    (<i5> ^1 { <i6> < <i4> })
    -->
    (<s2> ^instance <i7> +)
    (<i7> ^1 <i4> + ^2 <i6> +)
}

sp {chunkx4*attribute-of*apply*complete*OpNoChange*t1767-1
    :chunk
    (state <s1> ^list <l1>
          ^{ <a1> << action goal predicate failure heuristic >> } <a2>)
    (<l1> ^game <g1>)
    (<a2> ^condition <c1>)
    (<c1> ^type attribute-of ^args <a3> ^parameter <p1> ^negative <n1>
          ^result <r1> ^result <r3> ^name <n2>)
    (<a3> ^num 1 ^2 <i1>)
    (<p1> ^num 2)
    (<i1> -^rtype set ^result <r2>)
    (<r1> ^set <s2>)
    (<r2> ^set <s3>)
    (<s3> ^instance <i2>)
    (<i2> ^1 <i3>)
    (<i3> ^predicates <p2>)
    (<r3> ^set <s4>)
    (<p2> ^<n2> <n3>)
    -->
    (<s2> ^instance <i4> +)
    (<i4> ^2 <i3> + ^1 <n3> +)
}

sp {chunk*chunk-predicate-impasse*apply*complete*OpNoChange*t983-1
    :chunk
    (state <s1> ^gtype <g1> ^<g1> <g2>)
    (<g2> ^condition <c1>)
    (<c1> ^name clear ^type concept ^attribute predicate)
    -->
    (<s1> ^predicate <p1> + ^gtype predicate +)
    (<p1> ^link <c1> + ^potential-args <p2> + ^parameter-set <p3> +
           ^formated predicate + ^primary-rtype single + ^nlp-set <n1> +
           ^aname clear + ^handle clear +)
    (<p3> ^argnum 1 +)
    (<n1> ^conditions <c2> + ^aname clear +)
    (<c2> ^rtype single + ^args <a1> + ^negative true + ^parameter <p6> +
           ^result <r3> + ^attribute prepositions + ^name below1 +
           ^type state-pair +)
    (<a1> ^num 2 + ^2 <i1> + ^1 <i2> +)
    (<i1> ^rtype single + ^args <a2> + ^negative false + ^parameter <p4> +
           ^result <r1> + ^attribute primitive + ^name object +
           ^type attribute +)
    (<p4> ^num 0 +)
    (<r1> ^set <s2> +)
    (<i2> ^rtype single + ^args <a3> + ^negative false + ^parameter <p5> +
           ^result <r2> + ^attribute input-arg + ^name object +)
    (<p5> ^num 1 + ^1 <i3> +)
    (<i3> ^param-id 1 + ^type single +)
    (<r2> ^set <s3> +)
    (<p6> ^num 1 + ^1 <i4> +)
    (<i4> ^param-id 1 + ^type single +)
    (<r3> ^set <s4> +)
}

sp {chunkx4*top-pair*apply*complete*OpNoChange*t968-1
    :chunk
    (state <s1> ^list <l1> ^world <w1>
          ^{ <a1> << action goal predicate failure heuristic >> } <a2>)
    (<l1> ^game <g1>)
    (<w1> ^predicates <p1>)
    (<a2> ^condition <c1>)
    (<c1> ^rtype single ^negative true ^type state-pair ^args <a3>
          ^parameter <p2> ^result <r1> ^name <n2> ^attribute <a4>)
    (<a3> ^num 2 ^1 <i1> ^2 <i2>)
    (<i1> -^rtype set ^result <r2>)
    (<p2> ^num { <n1> < 2 })
    (<r1> ^set <s2>)
    (<r2> ^set <s3>)
    (<s3> ^instance <i3>)
    (<i3> ^1 <i4>)
    (<p1> ^predicate <p3>)
   -{ (<p3> ^instance <i5>)
      (<i5> ^1 <i4> ^2 <i6>)
      (<i2> ^result <r3>)
      (<r3> ^set <s4>)
      (<s4> ^instance <i7>)
      (<i7> ^1 <i6>)}
    (<p3> ^handle <n2>)
    -->
    (<s2> ^instance <i8> +)
    (<i8> ^1 <i4> +)
}

sp {chunkx4*with-attribute*apply*complete*instance*OpNoChange*t962-1
    :chunk
    (state <s1> ^list <l1> ^world <w1>
          ^{ <a1> << action goal predicate failure heuristic >> } <a2>)
    (<l1> ^game <g1>)
    (<w1> ^objects <o1>)
    (<a2> ^condition <c1>)
    (<c1> ^rtype single ^name object ^type attribute ^attribute primitive
          ^args <a3> ^negative <n1> ^parameter <p1> ^result <r1>)
    (<a3> -^1 <i1>)
    (<r1> ^set <s2>)
    (<o1> ^object <o2>)
    (<o2> -^handle self)
    -->
    (<s2> ^instance <i2> +)
    (<i2> ^1 <o2> +)
}



