sp {chunk*chunk-puzzle-impasse*apply*complete*OpNoChange*t8072-7
    :chunk
    (state <s1> ^retrieve-game mini-sudoku1 -^opponent <o1>)
    -->
    (<s1> ^retrieve-handle action-default12 +)
}

sp {chunk*chunk-puzzle-impasse*apply*complete*OpNoChange*t8072-6
    :chunk
    (state <s1> ^retrieve-game mini-sudoku1 -^opponent <o1>)
    -->
    (<s1> ^retrieve-handle failure-default20 +)
}

sp {chunk*chunk-puzzle-impasse*apply*complete*OpNoChange*t8072-5
    :chunk
    (state <s1> ^retrieve-game mini-sudoku1 -^opponent <o1>)
    -->
    (<s1> ^retrieve-handle failure-default23 +)
}

sp {chunk*chunk-puzzle-impasse*apply*complete*OpNoChange*t8072-4
    :chunk
    (state <s1> ^retrieve-game mini-sudoku1 -^opponent <o1>)
    -->
    (<s1> ^retrieve-handle failure-default26 +)
}

sp {chunk*chunk-puzzle-impasse*apply*complete*OpNoChange*t8072-3
    :chunk
    (state <s1> ^retrieve-game mini-sudoku1 -^opponent <o1>)
    -->
    (<s1> ^retrieve-handle heuristic-default35 +)
}

sp {chunk*chunk-puzzle-impasse*apply*complete*OpNoChange*t8072-2
    :chunk
    (state <s1> ^retrieve-game mini-sudoku1 -^opponent <o1>)
    -->
    (<s1> ^retrieve-handle goal-default43 +)
}

sp {chunk*chunk-puzzle-impasse*apply*complete*start-search-depth*OpNoChange*t8072-1
    :chunk
    (state <s1> ^retrieve-game mini-sudoku1 -^opponent <o1>)
    -->
    (<s1> ^start-search-depth 4 +)
}

sp {chunk*chunk-predicate-impasse*apply*complete*action*OpNoChange*t7949-1
    :chunk
    (state <s1> ^gtype goal ^retrieve-handle goal-default43)
    -->
    (<s1> ^goal <g1> +)
    (<g1> ^potential-args <p1> + ^parameter-set <p2> + ^formated predicate +
           ^primary-rtype set + ^nlp-set <n1> + ^aname goal-default43 +
           ^handle goal-default43 +)
    (<p2> ^argnum 1 +)
    (<n1> ^conditions <c1> + ^aname goal-default43 +)
    (<c1> ^attribute predicate + ^rtype set + ^args <a1> + ^negative false +
           ^parameter <p5> + ^result <r3> + ^name filled + ^type concept +)
    (<a1> ^num 1 + ^1 <i1> +)
    (<i1> ^attribute category + ^rtype set + ^args <a2> + ^negative false +
           ^parameter <p4> + ^result <r2> + ^name location + ^type attribute +)
    (<a2> ^num 1 + ^1 <i2> +)
    (<i2> ^attribute primitive + ^rtype single + ^args <a3> +
           ^negative false + ^parameter <p3> + ^result <r1> + ^name object +
           ^type attribute +)
    (<p3> ^num 0 +)
    (<r1> ^set <s2> +)
    (<p4> ^num 1 + ^1 <i3> +)
    (<i3> ^param-id 1 + ^type set +)
    (<r2> ^set <s3> +)
    (<p5> ^num 1 + ^1 <i4> +)
    (<i4> ^param-id 1 + ^type set +)
    (<r3> ^set <s4> +)
}

sp {chunkx4*with-attribute*apply*complete*instance*objects*OpNoChange*t7937-2
    :chunk
    (state <s1> ^list <l1>
          ^{ <a1> << action goal predicate failure heuristic >> } <a2>)
    (<l1> ^game <g1>)
    (<a2> ^condition <c1>)
    (<c1> ^rtype set ^type attribute ^args <a3> ^negative <n1> ^parameter <p1>
          ^result <r2> ^attribute <i5> ^name <i6>)
    (<a3> ^1 <i1>)
    (<i1> -^rtype set ^result <r1>)
    (<r1> ^set <s2>)
    (<s2> ^instance <i2>)
    (<i2> ^1 <i3>)
    (<i3> ^predicates <p2>)
    (<r2> ^set <s3>)
    (<s3> ^instance <i4>)
    (<i4> ^3 <i5> ^2 <i6> ^1 <i7>)
    (<p2> ^<i5> <i6>)
    -->
    (<i7> ^object <i3> +)
}

sp {chunkx4*with-attribute*apply*complete*instance*OpNoChange*t7937-1
    :chunk
    (state <s1> ^list <l1>
          ^{ <a1> << action goal predicate failure heuristic >> } <a2>)
    (<l1> ^game <g1>)
    (<a2> ^condition <c1>)
    (<c1> ^rtype set ^type attribute ^args <a3> ^negative <n1> ^parameter <p1>
          ^result <r1> ^name <n2> ^attribute <a4>)
    (<a3> ^1 <i1>)
    (<i1> -^rtype set)
    (<r1> ^set <s2>)
    -->
    (<s2> ^instance <i2> +)
    (<i2> ^2 <n2> + ^3 <a4> + ^1 <i3> +)
}

sp {chunk*chunk-predicate-impasse*apply*complete*OpNoChange*t7578-1
    :chunk
    (state <s1> ^gtype <g1> ^<g1> <g2>)
    (<g2> ^condition <c1>)
    (<c1> ^name filled ^type concept ^attribute predicate)
    -->
    (<s1> ^predicate <p1> + ^gtype predicate +)
    (<p1> ^link <c1> + ^potential-args <p2> + ^parameter-set <p3> +
           ^formated predicate + ^primary-rtype single + ^nlp-set <n1> +
           ^aname filled + ^handle filled +)
    (<p3> ^argnum 2 +)
    (<n1> ^conditions <c2> + ^conditions <c3> + ^aname filled +)
    (<c2> ^return-type number + ^rtype single + ^args <a1> + ^negative false +
           ^parameter <p5> + ^result <r2> + ^name value + ^type attribute-of +)
    (<a1> ^num 1 + ^2 <i1> +)
    (<i1> ^attribute input-arg + ^rtype single + ^args <a2> +
           ^negative false + ^parameter <p4> + ^result <r1> + ^name object +)
    (<p4> ^num 1 + ^1 <i2> +)
    (<i2> ^param-id 1 + ^type single +)
    (<r1> ^set <s2> +)
    (<p5> ^num 2 + ^2 <i3> + ^1 <i4> +)
    (<i3> ^param-id 1 + ^type single +)
    (<i4> ^param-id 2 + ^type single +)
    (<r2> ^set <s3> +)
    (<c3> ^return-type number + ^function soar-greater + ^rtype single +
           ^args <a3> + ^negative false + ^parameter <p7> + ^result <r4> +
           ^name greater + ^type function +)
    (<a3> ^num 2 + ^2 <i5> + ^1 <c2> +)
    (<i5> ^return-type number + ^rtype single + ^args <a3> + ^negative false +
           ^parameter <p6> + ^result <r3> + ^name number +)
    (<p6> ^num 0 +)
    (<r3> ^set <s4> +)
    (<s4> ^instance <i6> +)
    (<i6> ^1 0 +)
    (<p7> ^num 1 + ^1 <i7> +)
    (<i7> ^param-id 2 + ^type single +)
    (<r4> ^set <s5> +)
}

sp {chunkx4*soar-compare*greater*OpNoChange*t7563-1
    :chunk
    (state <s1> ^list <l1>
          ^{ <a1> << action goal predicate failure heuristic >> } <a2>)
    (<l1> ^game <g1>)
    (<a2> ^condition <c1>)
    (<c1> ^function soar-greater ^type function ^args <a3> ^parameter <p1>
          ^negative <n1> ^result <r1> ^name <n2>)
    (<a3> ^num 2 ^2 <i1> ^1 <i2>)
    (<p1> ^num 1)
    (<r1> ^set <s2>)
    (<i2> ^result <r2>)
    (<r2> ^set <s3>)
    (<s3> ^instance <i3>)
    (<i3> ^1 <i4>)
    (<i1> ^result <r3>)
    (<r3> ^set <s4>)
    (<s4> ^instance <i5>)
    (<i5> ^1 { <i6> < <i4> })
    -->
    (<s2> ^instance <i7> +)
    (<i7> ^1 <i4> +)
}

sp {chunk*chunk-predicate-impasse*apply*complete*action*OpNoChange*t6762-1
    :chunk
    (state <s1> ^gtype heuristic ^retrieve-handle heuristic-default35)
    -->
    (<s1> ^heuristic <h1> +)
    (<h1> ^prefer <p1> + ^ntype heuristic + ^potential-args <p2> +
           ^parameter-set <p3> + ^formated predicate + ^primary-rtype single +
           ^nlp-set <n1> + ^aname heuristic-default35 +
           ^handle heuristic-default35 +)
    (<p1> ^2 <i1> + ^1 <i2> +)
    (<p3> ^argnum 4 +)
    (<i2> ^verb on1 + ^return-type number + ^attribute action +
           ^rtype single + ^args <a1> + ^negative false + ^parameter <p4> +
           ^result <r1> + ^name write1 + ^type concept +)
    (<p4> ^num 2 + ^2 <i3> + ^1 <i4> +)
    (<i3> ^param-id 1 + ^type single +)
    (<i4> ^param-id 3 + ^type single +)
    (<r1> ^set <s2> +)
    (<i1> ^verb on1 + ^return-type number + ^attribute action +
           ^rtype single + ^args <a2> + ^negative false + ^parameter <p5> +
           ^result <r2> + ^name write1 + ^type concept +)
    (<p5> ^num 2 + ^2 <i5> + ^1 <i6> +)
    (<i5> ^param-id 2 + ^type single +)
    (<i6> ^param-id 4 + ^type single +)
    (<r2> ^set <s3> +)
    (<n1> ^conditions <i2> + ^conditions <i1> + ^conditions <c1> +
           ^conditions <c2> + ^conditions <c3> + ^aname heuristic-default35 +)
    (<c1> ^attribute predicate + ^rtype single + ^args <a3> +
           ^negative false + ^parameter <p9> + ^result <r6> + ^name higher +
           ^type concept +)
    (<a3> ^num 2 + ^2 <i7> + ^1 <i9> +)
    (<i7> ^attribute category + ^rtype single + ^args <a4> + ^negative false +
           ^parameter <p7> + ^result <r4> + ^name location + ^type attribute +)
    (<a4> ^num 1 + ^1 <i8> +)
    (<i8> ^attribute primitive + ^rtype single + ^args <a5> +
           ^negative false + ^parameter <p6> + ^result <r3> + ^name object +
           ^type attribute +)
    (<p6> ^num 0 +)
    (<r3> ^set <s4> +)
    (<p7> ^num 0 +)
    (<r4> ^set <s5> +)
    (<i9> ^attribute primitive + ^rtype single + ^args <a6> +
           ^negative false + ^parameter <p8> + ^result <r5> + ^name object +
           ^type attribute +)
    (<p8> ^num 0 +)
    (<r5> ^set <s6> +)
    (<p9> ^num 2 + ^2 <i10> + ^1 <i11> +)
    (<i10> ^param-id 1 + ^type single +)
    (<i11> ^param-id 2 + ^type single +)
    (<r6> ^set <s7> +)
    (<c2> ^return-type number + ^rtype single + ^args <a7> + ^negative false +
           ^parameter <p10> + ^result <r7> + ^name number +)
    (<p10> ^num 1 + ^1 <i12> +)
    (<i12> ^param-id 4 + ^type single +)
    (<r7> ^set <s8> +)
    (<s8> ^instance <i13> + ^instance <i14> + ^instance <i15> +
           ^instance <i16> + ^instance <i17> +)
    (<i13> ^1 1 +)
    (<i14> ^1 2 +)
    (<i15> ^1 3 +)
    (<i16> ^1 4 +)
    (<i17> ^1 5 +)
    (<c3> ^return-type number + ^rtype single + ^args <a8> + ^negative false +
           ^parameter <p11> + ^result <r8> + ^name number +)
    (<p11> ^num 1 + ^1 <i18> +)
    (<i18> ^param-id 3 + ^type single +)
    (<r8> ^set <s9> +)
    (<s9> ^instance <i19> + ^instance <i20> + ^instance <i21> +
           ^instance <i22> + ^instance <i23> +)
    (<i19> ^1 1 +)
    (<i20> ^1 2 +)
    (<i21> ^1 3 +)
    (<i22> ^1 4 +)
    (<i23> ^1 5 +)
}

sp {chunkx2*chunk-parameters*preference*prefer*two-operators*2args2*OpNoChange*t6750-1
    :chunk
    (state <s1> ^heuristic <h1> ^heuristic <h2> ^list <l1> ^operator <o1> +
          ^operator <o2> +)
    (<h1> ^ntype heuristic ^parameter-set <p1> ^prefer <p2>)
    (<h2> -^modifier <m1> -^consider <c1> ^ntype heuristic)
    (<p1> ^set <s2>)
    (<p2> ^2 <i1> ^1 <i2>)
    (<i1> ^type concept ^attribute action ^parameter <p3> ^verb <v1>
          ^name <n1>)
    (<p3> ^num 2 ^2 <i4> ^1 <i6>)
    (<i2> ^type concept ^attribute action ^verb <v1> ^parameter <p4>
          ^name <n1>)
    (<p4> ^num 2 ^2 <i3> ^1 <i5>)
    (<l1> ^game <g1>)
    (<i3> ^param-id <p5>)
    (<i4> ^param-id <p6>)
    (<i5> ^param-id <p7>)
    (<i6> ^param-id <p8>)
    (<o1> ^verb-structure <v2> ^parameters <p9>)
    (<v2> ^1 <i7>)
    (<i7> ^verb-prep <v1> ^verb-name <n1> ^2 <i8> ^1 <i10>)
    (<p9> ^<i8> <i9> ^<i10> <i11>)
    (<s2> ^<p5> <i9> ^<p7> <i11> ^<p6> <i14> ^<p8> <i16>)
    (<o2> ^verb-structure <v3> ^parameters <p10>)
    (<v3> ^1 <i12>)
    (<i12> ^verb-prep <v1> ^verb-name <n1> ^2 <i13> ^1 <i15>)
    (<p10> ^<i13> <i14> ^<i15> <i16>)
    -->
    (<s1> ^operator <o1> > <o2>)
}

sp {chunk*chunk-predicate-impasse*apply*complete*OpNoChange*t6319-1
    :chunk
    (state <s1> ^gtype <g1> ^<g1> <g2>)
    (<g2> ^condition <c1>)
    (<c1> ^name higher ^type concept ^attribute predicate)
    -->
    (<s1> ^predicate <p1> + ^gtype predicate +)
    (<p1> ^link <c1> + ^potential-args <p2> + ^parameter-set <p3> +
           ^formated predicate + ^primary-rtype single + ^nlp-set <n1> +
           ^aname higher + ^handle higher +)
    (<p3> ^argnum 4 +)
    (<n1> ^conditions <c2> + ^conditions <c3> + ^conditions <c4> +
           ^aname higher +)
    (<c3> ^return-type number + ^rtype single + ^args <a1> + ^negative false +
           ^parameter <p5> + ^result <r2> + ^name column +
           ^type attribute-of +)
    (<a1> ^num 1 + ^2 <i1> +)
    (<i1> ^attribute input-arg + ^rtype single + ^args <a2> +
           ^negative false + ^parameter <p4> + ^result <r1> + ^name object +)
    (<p4> ^num 1 + ^1 <i2> +)
    (<i2> ^param-id 2 + ^type single +)
    (<r1> ^set <s2> +)
    (<p5> ^num 2 + ^2 <i3> + ^1 <i4> +)
    (<i3> ^param-id 2 + ^type single +)
    (<i4> ^param-id 4 + ^type single +)
    (<r2> ^set <s3> +)
    (<c2> ^return-type number + ^rtype single + ^args <a3> + ^negative false +
           ^parameter <p7> + ^result <r4> + ^name column +
           ^type attribute-of +)
    (<a3> ^num 1 + ^2 <i5> +)
    (<i5> ^attribute input-arg + ^rtype single + ^args <a4> +
           ^negative false + ^parameter <p6> + ^result <r3> + ^name object +)
    (<p6> ^num 1 + ^1 <i6> +)
    (<i6> ^param-id 1 + ^type single +)
    (<r3> ^set <s4> +)
    (<p7> ^num 2 + ^2 <i7> + ^1 <i8> +)
    (<i7> ^param-id 1 + ^type single +)
    (<i8> ^param-id 3 + ^type single +)
    (<r4> ^set <s5> +)
    (<c4> ^return-type number + ^function soar-greater + ^rtype single +
           ^args <a5> + ^negative false + ^parameter <p8> + ^result <r5> +
           ^name greater + ^type function +)
    (<a5> ^num 2 + ^2 <c3> + ^1 <c2> +)
    (<p8> ^num 2 + ^2 <i9> + ^1 <i10> +)
    (<i9> ^param-id 4 + ^type single +)
    (<i10> ^param-id 3 + ^type single +)
    (<r5> ^set <s6> +)
}

sp {chunkx4*soar-compare*greater*param-2*OpNoChange*t6304-1
    :chunk
    (state <s1> ^list <l1>
          ^{ <a1> << action goal predicate failure heuristic >> } <a2>)
    (<l1> ^game <g1>)
    (<a2> ^condition <c1>)
    (<c1> ^function soar-greater ^type function ^args <a3> ^parameter <p1>
          ^negative <n1> ^result <r1> ^name <n2>)
    (<a3> ^num 2 ^2 <i1> ^1 <i2>)
    (<p1> ^num 2)
    (<r1> ^set <s2>)
    (<i2> ^result <r2>)
    (<r2> ^set <s3>)
    (<s3> ^instance <i3>)
    (<i3> ^1 <i4>)
    (<i1> ^result <r3>)
    (<r3> ^set <s4>)
    (<s4> ^instance <i5>)
    (<i5> ^1 { <i6> < <i4> })
    -->
    (<s2> ^instance <i7> +)
    (<i7> ^1 <i4> + ^2 <i6> +)
}

sp {chunk*chunk-predicate-impasse*apply*complete*action*OpNoChange*t5326-1
    :chunk
    (state <s1> ^gtype failure ^retrieve-handle failure-default26)
    -->
    (<s1> ^failure <f1> +)
    (<f1> ^potential-args <p1> + ^parameter-set <p2> + ^formated predicate +
           ^primary-rtype single + ^nlp-set <n1> + ^aname failure-default26 +
           ^handle failure-default26 +)
    (<p2> ^argnum 4 +)
    (<n1> ^conditions <c1> + ^conditions <c2> + ^conditions <c3> +
           ^conditions <c4> + ^aname failure-default26 +)
    (<c1> ^return-type number + ^rtype single + ^args <a1> + ^negative false +
           ^parameter <p3> + ^result <r1> + ^name section +
           ^type attribute-of +)
    (<a1> ^num 1 + ^2 <i1> +)
    (<p3> ^num 2 + ^2 <i2> + ^1 <i3> +)
    (<i2> ^param-id 1 + ^type single +)
    (<i3> ^param-id 3 + ^type single +)
    (<r1> ^set <s2> +)
    (<c2> ^return-type number + ^rtype single + ^args <a2> + ^negative false +
           ^parameter <p4> + ^result <r2> + ^name section +
           ^type attribute-of +)
    (<a2> ^num 1 + ^2 <i4> +)
    (<p4> ^num 2 + ^2 <i5> + ^1 <i6> +)
    (<i5> ^param-id 2 + ^type single +)
    (<i6> ^param-id 3 + ^type single +)
    (<r2> ^set <s3> +)
    (<i1> ^attribute category + ^rtype single + ^args <a3> + ^negative false +
           ^parameter <p6> + ^result <r4> + ^name location + ^type attribute +)
    (<a3> ^num 1 + ^1 <i7> +)
    (<i7> ^attribute primitive + ^rtype single + ^args <a4> +
           ^negative false + ^parameter <p5> + ^result <r3> + ^name object +
           ^type attribute +)
    (<p5> ^num 0 +)
    (<r3> ^set <s4> +)
    (<p6> ^num 0 +)
    (<r4> ^set <s5> +)
    (<c3> ^return-type number + ^rtype single + ^args <a5> + ^negative false +
           ^parameter <p7> + ^result <r5> + ^name value + ^type attribute-of +)
    (<a5> ^num 1 + ^2 <i1> +)
    (<p7> ^num 2 + ^2 <i8> + ^1 <i9> +)
    (<i8> ^param-id 1 + ^type single +)
    (<i9> ^param-id 4 + ^type single +)
    (<r5> ^set <s6> +)
    (<i4> ^attribute category + ^rtype single + ^args <a6> + ^negative false +
           ^parameter <p9> + ^result <r7> + ^name location + ^type attribute +)
    (<a6> ^num 1 + ^1 <i10> +)
    (<i10> ^attribute primitive + ^rtype single + ^args <a7> +
           ^negative false + ^parameter <p8> + ^result <r6> + ^name object +
           ^type attribute +)
    (<p8> ^num 0 +)
    (<r6> ^set <s7> +)
    (<p9> ^num 0 +)
    (<r7> ^set <s8> +)
    (<c4> ^return-type number + ^rtype single + ^args <a8> + ^negative false +
           ^parameter <p10> + ^result <r8> + ^name value +
           ^type attribute-of +)
    (<a8> ^num 1 + ^2 <i4> +)
    (<p10> ^num 2 + ^2 <i11> + ^1 <i12> +)
    (<i11> ^param-id 2 + ^type single +)
    (<i12> ^param-id 4 + ^type single +)
    (<r8> ^set <s9> +)
}

sp {chunk*chunk-predicate-impasse*apply*complete*action*OpNoChange*t4507-1
    :chunk
    (state <s1> ^gtype failure ^retrieve-handle failure-default23)
    -->
    (<s1> ^failure <f1> +)
    (<f1> ^potential-args <p1> + ^parameter-set <p2> + ^formated predicate +
           ^primary-rtype single + ^nlp-set <n1> + ^aname failure-default23 +
           ^handle failure-default23 +)
    (<p2> ^argnum 4 +)
    (<n1> ^conditions <c1> + ^conditions <c2> + ^conditions <c3> +
           ^conditions <c4> + ^aname failure-default23 +)
    (<c1> ^return-type number + ^rtype single + ^args <a1> + ^negative false +
           ^parameter <p3> + ^result <r1> + ^name value + ^type attribute-of +)
    (<a1> ^num 1 + ^2 <i1> +)
    (<p3> ^num 2 + ^2 <i2> + ^1 <i3> +)
    (<i2> ^param-id 2 + ^type single +)
    (<i3> ^param-id 3 + ^type single +)
    (<r1> ^set <s2> +)
    (<i1> ^attribute category + ^rtype single + ^args <a2> + ^negative false +
           ^parameter <p5> + ^result <r3> + ^name location + ^type attribute +)
    (<a2> ^num 1 + ^1 <i4> +)
    (<i4> ^attribute primitive + ^rtype single + ^args <a3> +
           ^negative false + ^parameter <p4> + ^result <r2> + ^name object +
           ^type attribute +)
    (<p4> ^num 0 +)
    (<r2> ^set <s3> +)
    (<p5> ^num 0 +)
    (<r3> ^set <s4> +)
    (<c2> ^return-type number + ^rtype single + ^args <a4> + ^negative false +
           ^parameter <p6> + ^result <r4> + ^name column +
           ^type attribute-of +)
    (<a4> ^num 1 + ^2 <i1> +)
    (<p6> ^num 2 + ^2 <i5> + ^1 <i6> +)
    (<i5> ^param-id 2 + ^type single +)
    (<i6> ^param-id 4 + ^type single +)
    (<r4> ^set <s5> +)
    (<c3> ^return-type number + ^rtype single + ^args <a5> + ^negative false +
           ^parameter <p7> + ^result <r5> + ^name column +
           ^type attribute-of +)
    (<a5> ^num 1 + ^2 <i7> +)
    (<p7> ^num 2 + ^2 <i8> + ^1 <i9> +)
    (<i8> ^param-id 1 + ^type single +)
    (<i9> ^param-id 4 + ^type single +)
    (<r5> ^set <s6> +)
    (<i7> ^attribute category + ^rtype single + ^args <a6> + ^negative false +
           ^parameter <p9> + ^result <r7> + ^name location + ^type attribute +)
    (<a6> ^num 1 + ^1 <i10> +)
    (<i10> ^attribute primitive + ^rtype single + ^args <a7> +
           ^negative false + ^parameter <p8> + ^result <r6> + ^name object +
           ^type attribute +)
    (<p8> ^num 0 +)
    (<r6> ^set <s7> +)
    (<p9> ^num 0 +)
    (<r7> ^set <s8> +)
    (<c4> ^return-type number + ^rtype single + ^args <a8> + ^negative false +
           ^parameter <p10> + ^result <r8> + ^name value +
           ^type attribute-of +)
    (<a8> ^num 1 + ^2 <i7> +)
    (<p10> ^num 2 + ^2 <i11> + ^1 <i12> +)
    (<i11> ^param-id 1 + ^type single +)
    (<i12> ^param-id 3 + ^type single +)
    (<r8> ^set <s9> +)
}

sp {chunk*chunk-predicate-impasse*apply*complete*action*OpNoChange*t3688-1
    :chunk
    (state <s1> ^gtype failure ^retrieve-handle failure-default20)
    -->
    (<s1> ^failure <f1> +)
    (<f1> ^potential-args <p1> + ^parameter-set <p2> + ^formated predicate +
           ^primary-rtype single + ^nlp-set <n1> + ^aname failure-default20 +
           ^handle failure-default20 +)
    (<p2> ^argnum 4 +)
    (<n1> ^conditions <c1> + ^conditions <c2> + ^conditions <c3> +
           ^conditions <c4> + ^aname failure-default20 +)
    (<c1> ^return-type number + ^rtype single + ^args <a1> + ^negative false +
           ^parameter <p3> + ^result <r1> + ^name value + ^type attribute-of +)
    (<a1> ^num 1 + ^2 <i1> +)
    (<p3> ^num 2 + ^2 <i2> + ^1 <i3> +)
    (<i2> ^param-id 1 + ^type single +)
    (<i3> ^param-id 3 + ^type single +)
    (<r1> ^set <s2> +)
    (<i1> ^attribute category + ^rtype single + ^args <a2> + ^negative false +
           ^parameter <p5> + ^result <r3> + ^name location + ^type attribute +)
    (<a2> ^num 1 + ^1 <i4> +)
    (<i4> ^attribute primitive + ^rtype single + ^args <a3> +
           ^negative false + ^parameter <p4> + ^result <r2> + ^name object +
           ^type attribute +)
    (<p4> ^num 0 +)
    (<r2> ^set <s3> +)
    (<p5> ^num 0 +)
    (<r3> ^set <s4> +)
    (<c2> ^return-type number + ^rtype single + ^args <a4> + ^negative false +
           ^parameter <p6> + ^result <r4> + ^name row + ^type attribute-of +)
    (<a4> ^num 1 + ^2 <i1> +)
    (<p6> ^num 2 + ^2 <i5> + ^1 <i6> +)
    (<i5> ^param-id 1 + ^type single +)
    (<i6> ^param-id 4 + ^type single +)
    (<r4> ^set <s5> +)
    (<c3> ^return-type number + ^rtype single + ^args <a5> + ^negative false +
           ^parameter <p7> + ^result <r5> + ^name value + ^type attribute-of +)
    (<a5> ^num 1 + ^2 <i7> +)
    (<p7> ^num 2 + ^2 <i8> + ^1 <i9> +)
    (<i8> ^param-id 2 + ^type single +)
    (<i9> ^param-id 3 + ^type single +)
    (<r5> ^set <s6> +)
    (<i7> ^attribute category + ^rtype single + ^args <a6> + ^negative false +
           ^parameter <p9> + ^result <r7> + ^name location + ^type attribute +)
    (<a6> ^num 1 + ^1 <i10> +)
    (<i10> ^attribute primitive + ^rtype single + ^args <a7> +
           ^negative false + ^parameter <p8> + ^result <r6> + ^name object +
           ^type attribute +)
    (<p8> ^num 0 +)
    (<r6> ^set <s7> +)
    (<p9> ^num 0 +)
    (<r7> ^set <s8> +)
    (<c4> ^return-type number + ^rtype single + ^args <a8> + ^negative false +
           ^parameter <p10> + ^result <r8> + ^name row + ^type attribute-of +)
    (<a8> ^num 1 + ^2 <i7> +)
    (<p10> ^num 2 + ^2 <i11> + ^1 <i12> +)
    (<i11> ^param-id 2 + ^type single +)
    (<i12> ^param-id 4 + ^type single +)
    (<r8> ^set <s9> +)
}

sp {chunkx4*attribute-of*apply*complete*OpNoChange*t3674-1
    :chunk
    (state <s1> ^list <l1>
          ^{ <a1> << action goal predicate failure heuristic >> } <a2>)
    (<l1> ^game <g1>)
    (<a2> ^condition <c1>)
    (<c1> ^type attribute-of ^args <a3> ^parameter <p1> ^negative <n1>
          ^result <r1> ^result <r3> ^name <n2>)
    (<a3> ^num 1 ^2 <i1>)
    (<p1> ^num 2)
    (<i1> -^rtype set ^result <r2>)
    (<r1> ^set <s2>)
    (<r2> ^set <s3>)
    (<s3> ^instance <i2>)
    (<i2> ^1 <i3>)
    (<i3> ^predicates <p2>)
    (<r3> ^set <s4>)
    (<p2> ^<n2> <n3>)
    -->
    (<s2> ^instance <i4> +)
    (<i4> ^2 <i3> + ^1 <n3> +)
}

sp {chunk*chunk-predicate-impasse*apply*complete*action*OpNoChange*t1881-1
    :chunk
    (state <s1> ^gtype action ^retrieve-handle action-default12)
    -->
    (<s1> ^action <a1> +)
    (<a1> ^potential-args <p1> + ^parameter-set <p2> + ^formated predicate +
           ^primary-rtype single + ^nlp-set <n1> + ^verb-structure <v1> +
           ^aname action-default12 + ^handle action-default12 +)
    (<p2> ^argnum 4 +)
    (<n1> ^conditions <c1> + ^conditions <c2> + ^aname action-default12 +)
    (<c1> ^return-type number + ^function numeric-between + ^rtype single +
           ^args <a2> + ^negative false + ^parameter <p5> + ^result <r3> +
           ^name between + ^type function +)
    (<a2> ^num 2 + ^3 <i1> + ^2 <i4> +)
    (<i1> ^return-type number + ^rtype single + ^args <a2> + ^negative false +
           ^parameter <p3> + ^result <r1> + ^name number +)
    (<p3> ^num 1 + ^1 <i2> +)
    (<i2> ^param-id 4 + ^type single +)
    (<r1> ^set <s2> +)
    (<s2> ^instance <i3> +)
    (<i3> ^1 4 +)
    (<i4> ^return-type number + ^rtype single + ^args <a2> + ^negative false +
           ^parameter <p4> + ^result <r2> + ^name number +)
    (<p4> ^num 1 + ^1 <i5> +)
    (<i5> ^param-id 3 + ^type single +)
    (<r2> ^set <s3> +)
    (<s3> ^instance <i6> +)
    (<i6> ^1 0 +)
    (<p5> ^num 3 + ^3 <i7> + ^2 <i8> + ^1 <i9> +)
    (<i7> ^param-id 4 + ^type single +)
    (<i8> ^param-id 3 + ^type single +)
    (<i9> ^param-id 2 + ^type single +)
    (<r3> ^set <s4> +)
    (<c2> ^attribute predicate + ^rtype single + ^args <a3> +
           ^negative false + ^parameter <p8> + ^result <r6> + ^name empty +
           ^type concept +)
    (<a3> ^num 1 + ^1 <i10> +)
    (<i10> ^attribute category + ^rtype single + ^args <a4> +
           ^negative false + ^parameter <p7> + ^result <r5> + ^name location +
           ^type attribute +)
    (<a4> ^num 1 + ^1 <i11> +)
    (<i11> ^attribute primitive + ^rtype single + ^args <a5> +
           ^negative false + ^parameter <p6> + ^result <r4> + ^name object +
           ^type attribute +)
    (<p6> ^num 0 +)
    (<r4> ^set <s5> +)
    (<p7> ^num 0 +)
    (<r5> ^set <s6> +)
    (<p8> ^num 1 + ^1 <i12> +)
    (<i12> ^param-id 1 + ^type single +)
    (<r6> ^set <s7> +)
    (<v1> ^1 <i13> +)
    (<i13> ^verb-prep on1 + ^verb-name write1 + ^2 1 + ^1 2 +)
}

sp {chunkx4*with-attribute*apply*complete*instance*OpNoChange*t1867-1
    :chunk
    (state <s1> ^list <l1>
          ^{ <a1> << action goal predicate failure heuristic >> } <a2>)
    (<l1> ^game <g1>)
    (<a2> ^condition <c1>)
    (<c1> ^rtype single ^type attribute ^args <a3> ^negative <n1>
          ^parameter <p1> ^result <r1> ^name <n3> ^attribute <a4>)
    (<p1> ^num { <n2> < 2 })
    (<a3> ^1 <i1>)
    (<r1> ^set <s2>)
    (<i1> ^result <r2>)
    (<r2> ^set <s3>)
    (<s3> ^instance <i2>)
    (<i2> ^1 <i3>)
    (<i3> ^predicates <p2>)
    (<p2> ^<a4> <n3>)
    -->
    (<s2> ^instance <i4> +)
    (<i4> ^1 <i3> +)
}

sp {chunkx4*numeric-between*elaborate*instances*diagonal*single*OpNoChange*t1861-1
    :chunk
    (state <s1> ^integer-list <i1> ^list <l1>
          ^{ <a1> << action goal predicate failure heuristic >> } <a2>)
    (<i1> ^number <n1>)
    (<l1> ^game <g1>)
    (<a2> ^condition <c1>)
    (<c1> ^function numeric-between ^rtype single ^name between ^type function
          ^args <a3> ^negative <n2> ^parameter <p1> ^result <r1>)
    (<a3> ^3 <i2> ^2 <i3>)
    (<r1> ^set <s2>)
    (<i3> ^result <r2>)
    (<r2> ^set <s3>)
    (<s3> ^instance <i4>)
    (<i4> ^1 { <i5> < <n1> })
    (<i2> ^result <r3>)
    (<r3> ^set <s4>)
    (<s4> ^instance <i6>)
    (<i6> ^1 { <i7> >= <n1> })
    -->
    (<s2> ^instance <i8> +)
    (<i8> ^2 <i5> + ^3 <i7> + ^1 <n1> +)
}

sp {chunkx4*with-attribute*apply*complete*instance*OpNoChange*t1856-1
    :chunk
    (state <s1> ^list <l1> ^world <w1>
          ^{ <a1> << action goal predicate failure heuristic >> } <a2>)
    (<l1> ^game <g1>)
    (<w1> ^objects <o1>)
    (<a2> ^condition <c1>)
    (<c1> ^rtype single ^name object ^type attribute ^attribute primitive
          ^args <a3> ^negative <n1> ^parameter <p1> ^result <r1>)
    (<a3> -^1 <i1>)
    (<r1> ^set <s2>)
    (<o1> ^object <o2>)
    (<o2> -^handle self)
    -->
    (<s2> ^instance <i2> +)
    (<i2> ^1 <o2> +)
}

sp {chunk*chunk-predicate-impasse*apply*complete*OpNoChange*t1158-1
    :chunk
    (state <s1> ^gtype <g1> ^<g1> <g2>)
    (<g2> ^condition <c1>)
    (<c1> ^name empty ^type concept ^attribute predicate)
    -->
    (<s1> ^predicate <p1> + ^gtype predicate +)
    (<p1> ^link <c1> + ^potential-args <p2> + ^parameter-set <p3> +
           ^formated predicate + ^primary-rtype single + ^nlp-set <n1> +
           ^aname empty + ^handle empty +)
    (<p3> ^argnum 1 +)
    (<n1> ^conditions <c2> + ^aname empty +)
    (<c2> ^rtype single + ^args <a1> + ^negative true + ^parameter <p5> +
           ^result <r2> + ^name value + ^type has-attribute +)
    (<a1> ^num 1 + ^1 <i1> +)
    (<i1> ^attribute input-arg + ^rtype single + ^args <a2> +
           ^negative false + ^parameter <p4> + ^result <r1> + ^name object +)
    (<p4> ^num 1 + ^1 <i2> +)
    (<i2> ^param-id 1 + ^type single +)
    (<r1> ^set <s2> +)
    (<p5> ^num 1 + ^1 <i3> +)
    (<i3> ^param-id 1 + ^type single +)
    (<r2> ^set <s3> +)
}

sp {chunkx4*has-attribute*apply*complete*instance*OpNoChange*t1143-1
    :chunk
    (state <s1> ^list <l1>
          ^{ <a1> << action goal predicate failure heuristic >> } <a2>)
    (<l1> ^game <g1>)
    (<a2> ^condition <c1>)
    (<c1> ^rtype single ^negative true ^type has-attribute ^args <a3>
          ^parameter <p1> ^result <r1> ^name <n1>)
    (<a3> ^1 <i1>)
    (<i1> -^rtype set ^result <r2>)
    (<r1> ^set <s2>)
    (<r2> ^set <s3>)
    (<s3> ^instance <i2>)
    (<i2> ^1 <i3>)
    (<i3> ^predicates <p2>)
    (<p2> -^<n1> <n2>)
    -->
    (<s2> ^instance <i4> +)
    (<i4> ^1 <i3> +)
}



