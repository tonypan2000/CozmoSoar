sp {chunk*chunk-puzzle-impasse*apply*complete*StateNoChange*t3560-3
    :chunk
    (state <s1> ^retrieve-game risk1 -^opponent <o*1>)
    -->
    (<s1> ^retrieve-handle action-default18 +)
}

sp {chunk*chunk-puzzle-impasse*apply*complete*StateNoChange*t3560-2
    :chunk
    (state <s1> ^retrieve-game risk1 -^opponent <o*1>)
    -->
    (<s1> ^retrieve-handle goal-default20 +)
}

sp {chunk*chunk-puzzle-impasse*apply*complete*StateNoChange*t3560-1
    :chunk
    (state <s1> ^retrieve-game risk1 -^opponent <o*1>)
    -->
    (<s1> ^retrieve-handle failure-default22 +)
}

sp {chunk*chunk-predicate-impasse*apply*complete*action*StateNoChange*t3446-1
    :chunk
    (state <s1> ^gtype failure ^retrieve-handle failure-default22)
    -->
    (<s1> ^failure <p1> +)
    (<p1> ^potential-args <p2> + ^parameter-set <p3> + ^formated predicate +
           ^primary-rtype set + ^nlp-set <l18> + ^aname failure-default22 +
           ^handle failure-default22 +)
    (<p3> ^argnum 1 +)
    (<l18> ^conditions <l1> + ^aname failure-default22 +)
    (<l1> ^rtype set + ^args <l2> + ^negative false + ^parameter <l14> +
           ^result <l16> + ^attribute predicate + ^name occupied +
           ^type concept +)
    (<l2> ^num 1 + ^1 <l3> +)
    (<l3> ^rtype set + ^args <l4> + ^negative false + ^parameter <l10> +
           ^result <l12> + ^attribute category + ^name location +
           ^type attribute +)
    (<l4> ^num 1 + ^1 <l5> +)
    (<l5> ^rtype single + ^args <l6> + ^negative false + ^parameter <l7> +
           ^result <l8> + ^attribute primitive + ^name object +
           ^type attribute +)
    (<l7> ^num 0 +)
    (<l8> ^set <l9> +)
    (<l10> ^num 1 + ^1 <l11> +)
    (<l11> ^param-id 1 + ^type set +)
    (<l12> ^set <l13> +)
    (<l14> ^num 1 + ^1 <l15> +)
    (<l15> ^param-id 1 + ^type set +)
    (<l16> ^set <l17> +)
}

sp {chunk*chunk-predicate-impasse*apply*complete*action*StateNoChange*t2966-1
    :chunk
    (state <s1> ^gtype goal ^retrieve-handle goal-default20)
    -->
    (<s1> ^goal <p1> +)
    (<p1> ^potential-args <p2> + ^parameter-set <p3> + ^formated predicate +
           ^primary-rtype set + ^nlp-set <l18> + ^aname goal-default20 +
           ^handle goal-default20 +)
    (<p3> ^argnum 1 +)
    (<l18> ^conditions <l1> + ^aname goal-default20 +)
    (<l1> ^rtype set + ^args <l2> + ^negative false + ^parameter <l14> +
           ^result <l16> + ^attribute predicate + ^name captured +
           ^type concept +)
    (<l2> ^num 1 + ^1 <l3> +)
    (<l3> ^rtype set + ^args <l4> + ^negative false + ^parameter <l10> +
           ^result <l12> + ^attribute category + ^name location +
           ^type attribute +)
    (<l4> ^num 1 + ^1 <l5> +)
    (<l5> ^rtype single + ^args <l6> + ^negative false + ^parameter <l7> +
           ^result <l8> + ^attribute primitive + ^name object +
           ^type attribute +)
    (<l7> ^num 0 +)
    (<l8> ^set <l9> +)
    (<l10> ^num 1 + ^1 <l11> +)
    (<l11> ^param-id 1 + ^type set +)
    (<l12> ^set <l13> +)
    (<l14> ^num 1 + ^1 <l15> +)
    (<l15> ^param-id 1 + ^type set +)
    (<l16> ^set <l17> +)
}

sp {chunk*with-attribute*apply*complete*instance*objects*OpNoChange*t2954-2
    :chunk
    (state <s1> ^list <l1>
          ^{ << action goal predicate failure heuristic >> <c6> } <a2>)
    (<l1> ^game <g1>)
    (<a2> ^condition <c1>)
    (<c1> ^rtype set ^type attribute ^args <a1> ^negative <c2> ^parameter <p1>
          ^result <r1> ^name <c4> ^attribute <c5>)
    (<a1> ^1 <c3>)
    (<c3> -^rtype set ^result <r2>)
    (<r2> ^set <r3>)
    (<r3> ^instance <i3>)
    (<i3> ^1 <n1>)
    (<n1> ^predicates <p3>)
    (<r1> ^set <p2>)
    (<p2> ^instance <i1>)
    (<i1> ^2 <c4> ^3 <c5> ^1 <i2>)
    (<p3> ^<c5> <c4>)
    -->
    (<i2> ^object <n1> +)
}

sp {chunk*with-attribute*apply*complete*instance*t2954-1
    :chunk
    (state <s1> ^list <l1>
          ^{ << action goal predicate failure heuristic >> <c6> } <a2>)
    (<l1> ^game <g1>)
    (<a2> ^condition <c1>)
    (<c1> ^rtype set ^type attribute ^args <a1> ^negative <c2> ^parameter <p1>
          ^result <r1> ^name <c4> ^attribute <c5>)
    (<a1> ^1 <c3>)
    (<c3> -^rtype set)
    (<r1> ^set <p2>)
    -->
    (<p2> ^instance <i1> +)
    (<i1> ^2 <c4> + ^3 <c5> + ^1 <i2> +)
}

sp {chunk*chunk-predicate-impasse*apply*complete*action*StateNoChange*t2493-1
    :chunk
    (state <s1> ^gtype action ^retrieve-handle action-default18)
    -->
    (<s1> ^action <p1> +)
    (<p1> ^potential-args <p2> + ^parameter-set <p3> + ^formated predicate +
           ^primary-rtype single + ^nlp-set <l1> + ^verb-structure <l75> +
           ^aname action-default18 + ^handle action-default18 +)
    (<p3> ^argnum 4 +)
    (<l1> ^conditions <l2> + ^conditions <l3> + ^conditions <l26> +
           ^conditions <l27> + ^aname action-default18 +)
    (<l3> ^rtype single + ^args <l4> + ^negative false + ^parameter <l21> +
           ^result <l24> + ^attribute prepositions + ^name near1 +
           ^type state-pair +)
    (<l4> ^num 2 + ^2 <l5> + ^1 <l6> +)
    (<l6> ^rtype single + ^args <l7> + ^negative false + ^parameter <l18> +
           ^result <l19> + ^attribute predicate + ^name occupied +
           ^type concept +)
    (<l7> ^num 1 + ^1 <l8> +)
    (<l8> ^rtype single + ^args <l9> + ^negative false + ^parameter <l15> +
           ^result <l16> + ^attribute category + ^name location +
           ^type attribute +)
    (<l9> ^num 1 + ^1 <l10> +)
    (<l10> ^rtype single + ^args <l11> + ^negative false + ^parameter <l12> +
           ^result <l13> + ^attribute primitive + ^name object +
           ^type attribute +)
    (<l12> ^num 0 +)
    (<l13> ^set <l14> +)
    (<l15> ^num 0 +)
    (<l16> ^set <l17> +)
    (<l18> ^num 0 +)
    (<l19> ^set <l20> +)
    (<l21> ^num 2 + ^2 <l22> + ^1 <l23> +)
    (<l22> ^param-id 1 + ^type single +)
    (<l23> ^param-id 3 + ^type single +)
    (<l24> ^set <l25> +)
    (<l26> ^return-type number + ^function soar-count + ^rtype single +
           ^args <l34> + ^negative false + ^parameter <l65> + ^result <l68> +
           ^name count + ^type function +)
    (<l2> ^rtype set + ^args <l35> + ^negative false + ^parameter <l60> +
           ^result <l63> + ^attribute prepositions + ^name on1 +
           ^type state-pair +)
    (<l5> ^rtype single + ^args <l36> + ^negative false + ^parameter <l47> +
           ^result <l48> + ^attribute predicate + ^name captured +
           ^type concept +)
    (<l36> ^num 1 + ^1 <l37> +)
    (<l37> ^rtype single + ^args <l38> + ^negative false + ^parameter <l44> +
           ^result <l45> + ^attribute category + ^name location +
           ^type attribute +)
    (<l38> ^num 1 + ^1 <l39> +)
    (<l39> ^rtype single + ^args <l40> + ^negative false + ^parameter <l41> +
           ^result <l42> + ^attribute primitive + ^name object +
           ^type attribute +)
    (<l41> ^num 0 +)
    (<l42> ^set <l43> +)
    (<l44> ^num 0 +)
    (<l45> ^set <l46> +)
    (<l47> ^num 0 +)
    (<l48> ^set <l49> +)
    (<l35> ^num 2 + ^2 <l5> + ^1 <l50> +)
    (<l50> ^rtype single + ^args <l51> + ^negative false + ^parameter <l57> +
           ^result <l58> + ^attribute category + ^name block +
           ^type attribute +)
    (<l51> ^num 1 + ^1 <l52> +)
    (<l52> ^rtype single + ^args <l53> + ^negative false + ^parameter <l54> +
           ^result <l55> + ^attribute primitive + ^name object +
           ^type attribute +)
    (<l54> ^num 0 +)
    (<l55> ^set <l56> +)
    (<l57> ^num 0 +)
    (<l58> ^set <l59> +)
    (<l60> ^num 2 + ^2 <l61> + ^1 <l62> +)
    (<l61> ^param-id 1 + ^type single +)
    (<l62> ^param-id 2 + ^type set +)
    (<l63> ^set <l64> +)
    (<l34> ^num 1 + ^2 <l2> +)
    (<l65> ^num 2 + ^2 <l66> + ^1 <l67> +)
    (<l66> ^param-id 2 + ^type set +)
    (<l67> ^param-id 4 + ^type single +)
    (<l68> ^set <l69> +)
    (<l27> ^return-type number + ^function soar-greater + ^rtype single +
           ^args <l28> + ^negative false + ^parameter <l70> + ^result <l72> +
           ^name greater + ^type function +)
    (<l28> ^num 2 + ^2 <l29> + ^1 <l26> +)
    (<l29> ^return-type number + ^rtype single + ^args <l28> +
           ^negative false + ^parameter <l30> + ^result <l33> + ^name number +)
    (<l30> ^num 0 +)
    (<l33> ^set <l32> +)
    (<l32> ^instance <l31> +)
    (<l31> ^1 1 +)
    (<l70> ^num 1 + ^1 <l71> +)
    (<l71> ^param-id 4 + ^type single +)
    (<l72> ^set <l73> +)
    (<l75> ^1 <l74> +)
    (<l74> ^verb-prep attack + ^verb-name attack + ^1 3 +)
}

sp {chunk*soar-compare*greater*OpNoChange*t2479-1
    :chunk
    (state <s1> ^list <l1>
          ^{ << action goal predicate failure heuristic >> <c5> } <a2>)
    (<l1> ^game <g1>)
    (<a2> ^condition <n1>)
    (<n1> ^function soar-greater ^type function ^args <a1> ^parameter <p1>
          ^negative <c1> ^result <r3> ^name <c2>)
    (<a1> ^num 2 ^2 <f1> ^1 <n2>)
    (<p1> ^num 1)
    (<r3> ^set <p4>)
    (<n2> ^result <r2>)
    (<r2> ^set <p2>)
    (<p2> ^instance <p3>)
    (<p3> ^1 <c4>)
    (<f1> ^result <r1>)
    (<r1> ^set <i1>)
    (<i1> ^instance <i2>)
    (<i2> ^1 { < <c4> <c3> })
    -->
    (<p4> ^instance <i3> +)
    (<i3> ^1 <c4> +)
}

sp {chunk*soar-count*apply*complete*t2474-1
    :chunk
    (state <s1> ^list <l1>
          ^{ << action goal predicate failure heuristic >> <c3> } <a2>)
    (<l1> ^game <g1>)
    (<a2> ^condition <n1>)
    (<n1> ^function soar-count ^type function ^args <a1> ^parameter <p1>
          ^negative <c1> ^result <r2> ^name <c2>)
    (<a1> ^num 1 ^2 <n2>)
    (<p1> ^num 2)
    (<n2> ^rtype set ^result <r1>)
    (<r2> ^set <p3>)
    (<r1> ^set <p2>)
    (<p2> ^instance <i1>)
    (<i1> ^1 <i2>)
   -{ (<i2> -^<something> <s*3>)
      (<s1> ^<a*1> <v*1>)}
    -->
    (<p3> ^instance <p4> +)
    (<p4> ^1 (size <i2>) + ^2 <i2> +)
}

sp {chunk*top-pair*with-type*1param*set*noarg-set1*apply*OpNoChange*t2468-2
    :chunk
    (state <s1> ^list <l1> ^world <n2>
          ^{ << action goal predicate failure heuristic >> <c7> } <a2>)
    (<l1> ^game <g1>)
    (<n2> ^predicates <p2>)
    (<p2> ^predicate <n3>)
    (<n3> ^instance <n4> ^handle <c1>)
    (<n4> ^2 <n5> ^1 <n6>)
    (<a2> ^condition <n1>)
    (<n1> ^rtype set ^negative false ^name <c1> ^type state-pair ^args <a1>
          ^parameter <p1> ^result <r3> ^attribute <c2>)
    (<a1> ^num 2 ^2 <c3> ^1 <c4> ^2 <c5> ^1 <c6>)
    (<p1> ^num 2)
    (<c3> -^rtype set ^result <r1>)
    (<c4> -^rtype set ^result <r2>)
    (<c5> ^result <r4>)
    (<r4> ^set <p6>)
    (<p6> ^instance <i5>)
    (<i5> ^1 <n7>)
    (<r3> ^set <p5>)
    (<p5> ^instance <i3>)
    (<i3> ^2 <n5> ^1 <i4>)
    (<r2> ^set <p4>)
    (<p4> ^instance <i2>)
    (<i2> ^1 <n6>)
    (<r1> ^set <p3>)
    (<p3> ^instance <i1>)
    (<i1> ^1 <n5>)
    -->
    (<i4> ^object <n6> +)
}

sp {chunk*top-pair*apply*complete*t2468-1
    :chunk
    (state <s1> ^list <l1>
          ^{ << action goal predicate failure heuristic >> <c5> } <a2>)
    (<l1> ^game <g1>)
    (<a2> ^condition <n1>)
    (<n1> ^rtype set ^negative false ^type state-pair ^args <a1>
          ^parameter <p1> ^result <r2> ^name <c1> ^attribute <c2>)
    (<a1> ^num 2 ^2 <c3> ^1 <c4>)
    (<p1> ^num 2)
    (<c3> -^rtype set ^result <r1>)
    (<c4> -^rtype set)
    (<r2> ^set <p3>)
    (<r1> ^set <p2>)
    (<p2> ^instance <i1>)
    (<i1> ^1 <n2>)
    -->
    (<p3> ^instance <i2> +)
    (<i2> ^2 <n2> + ^1 <i3> +)
}

sp {chunk*top-pair*apply*complete*t2462-1
    :chunk
    (state <s1> ^list <l1> ^world <n2>
          ^{ << action goal predicate failure heuristic >> <c5> } <a2>)
    (<l1> ^game <g1>)
    (<n2> ^predicates <p2>)
    (<p2> ^predicate <n3>)
    (<n3> ^instance <n4> ^handle <c1>)
    (<n4> ^2 <n5> ^1 <n6>)
    (<a2> ^condition <n1>)
    (<n1> ^rtype single ^negative false ^name <c1> ^type state-pair ^args <a1>
          ^parameter <p1> ^result <r3> ^attribute <c2>)
    (<a1> ^num 2 ^2 <c3> ^1 <c4>)
    (<p1> ^num 2)
    (<c3> -^rtype set ^result <r1>)
    (<c4> -^rtype set ^result <r2>)
    (<r3> ^set <p5>)
    (<r2> ^set <p4>)
    (<p4> ^instance <i2>)
    (<i2> ^1 <n6>)
    (<r1> ^set <p3>)
    (<p3> ^instance <i1>)
    (<i1> ^1 <n5>)
    -->
    (<p5> ^instance <i3> +)
    (<i3> ^2 <n5> + ^1 <n6> +)
}

sp {chunk*chunk-predicate-impasse*apply*complete*StateNoChange*t2453-1
    :chunk
    (state <s1> ^gtype <c2> ^<c2> <g1>)
    (<g1> ^condition <c1>)
    (<c1> ^name occupied ^type concept ^attribute predicate)
    -->
    (<s1> ^predicate <p1> + ^gtype predicate +)
    (<p1> ^link <c1> + ^potential-args <p2> + ^parameter-set <p3> +
           ^formated predicate + ^primary-rtype single + ^nlp-set <l28> +
           ^aname occupied + ^handle occupied +)
    (<p3> ^argnum 1 +)
    (<l28> ^conditions <l1> + ^aname occupied +)
    (<l1> ^rtype single + ^args <l2> + ^negative false + ^parameter <l24> +
           ^result <l26> + ^attribute prepositions + ^name below1 +
           ^type state-pair +)
    (<l2> ^num 2 + ^2 <l3> + ^1 <l18> +)
    (<l3> ^rtype single + ^args <l4> + ^negative false + ^parameter <l15> +
           ^result <l16> + ^attribute color + ^name blue1 + ^type attribute +)
    (<l4> ^num 1 + ^1 <l5> +)
    (<l5> ^rtype single + ^args <l6> + ^negative false + ^parameter <l12> +
           ^result <l13> + ^attribute category + ^name block +
           ^type attribute +)
    (<l6> ^num 1 + ^1 <l7> +)
    (<l7> ^rtype single + ^args <l8> + ^negative false + ^parameter <l9> +
           ^result <l10> + ^attribute primitive + ^name object +
           ^type attribute +)
    (<l9> ^num 0 +)
    (<l10> ^set <l11> +)
    (<l12> ^num 0 +)
    (<l13> ^set <l14> +)
    (<l15> ^num 0 +)
    (<l16> ^set <l17> +)
    (<l18> ^rtype single + ^args <l19> + ^negative false + ^parameter <l20> +
           ^result <l22> + ^attribute input-arg + ^name object +)
    (<l20> ^num 1 + ^1 <l21> +)
    (<l21> ^param-id 1 + ^type single +)
    (<l22> ^set <l23> +)
    (<l24> ^num 1 + ^1 <l25> +)
    (<l25> ^param-id 1 + ^type single +)
    (<l26> ^set <l27> +)
}

sp {chunk*chunk-predicate-impasse*apply*complete*StateNoChange*t2443-1
    :chunk
    (state <s1> ^gtype <c2> ^<c2> <g1>)
    (<g1> ^condition <c1>)
    (<c1> ^name captured ^type concept ^attribute predicate)
    -->
    (<s1> ^predicate <p1> + ^gtype predicate +)
    (<p1> ^link <c1> + ^potential-args <p2> + ^parameter-set <p3> +
           ^formated predicate + ^primary-rtype single + ^nlp-set <l28> +
           ^aname captured + ^handle captured +)
    (<p3> ^argnum 1 +)
    (<l28> ^conditions <l1> + ^aname captured +)
    (<l1> ^rtype single + ^args <l2> + ^negative false + ^parameter <l24> +
           ^result <l26> + ^attribute prepositions + ^name below1 +
           ^type state-pair +)
    (<l2> ^num 2 + ^2 <l3> + ^1 <l18> +)
    (<l3> ^rtype single + ^args <l4> + ^negative false + ^parameter <l15> +
           ^result <l16> + ^attribute color + ^name red1 + ^type attribute +)
    (<l4> ^num 1 + ^1 <l5> +)
    (<l5> ^rtype single + ^args <l6> + ^negative false + ^parameter <l12> +
           ^result <l13> + ^attribute category + ^name block +
           ^type attribute +)
    (<l6> ^num 1 + ^1 <l7> +)
    (<l7> ^rtype single + ^args <l8> + ^negative false + ^parameter <l9> +
           ^result <l10> + ^attribute primitive + ^name object +
           ^type attribute +)
    (<l9> ^num 0 +)
    (<l10> ^set <l11> +)
    (<l12> ^num 0 +)
    (<l13> ^set <l14> +)
    (<l15> ^num 0 +)
    (<l16> ^set <l17> +)
    (<l18> ^rtype single + ^args <l19> + ^negative false + ^parameter <l20> +
           ^result <l22> + ^attribute input-arg + ^name object +)
    (<l20> ^num 1 + ^1 <l21> +)
    (<l21> ^param-id 1 + ^type single +)
    (<l22> ^set <l23> +)
    (<l24> ^num 1 + ^1 <l25> +)
    (<l25> ^param-id 1 + ^type single +)
    (<l26> ^set <l27> +)
}

sp {chunk*top-pair*apply*complete*t979-1
    :chunk
    (state <s1> ^list <l1> ^world <n2>
          ^{ << action goal predicate failure heuristic >> <c6> } <a2>)
    (<l1> ^game <g1>)
    (<n2> ^predicates <p2>)
    (<p2> ^predicate <n3>)
    (<n3> ^instance <n4> ^handle <c1>)
    (<n4> ^2 <n5> ^1 <n6>)
    (<a2> ^condition <n1>)
    (<n1> ^rtype single ^negative false ^name <c1> ^type state-pair ^args <a1>
          ^parameter <p1> ^result <r4> ^attribute <c2>)
    (<a1> ^num 2 ^2 <c3> ^1 <c4>)
    (<c3> -^rtype set ^result <r1>)
    (<c4> -^rtype set ^result <r2>)
    (<p1> ^num { < 2 <c5> })
    (<r4> ^set <p4>)
    (<r2> ^set <r3>)
    (<r3> ^instance <i2>)
    (<i2> ^1 <n6>)
    (<r1> ^set <p3>)
    (<p3> ^instance <i1>)
    (<i1> ^1 <n5>)
    -->
    (<p4> ^instance <i3> +)
    (<i3> ^1 <n6> +)
}

sp {chunk*with-attribute*apply*complete*instance*t973-1
    :chunk
    (state <s1> ^list <l1>
          ^{ << action goal predicate failure heuristic >> <c7> } <a2>)
    (<l1> ^game <g1>)
    (<a2> ^condition <c1>)
    (<c1> ^rtype single ^type attribute ^args <a1> ^negative <c2>
          ^parameter <p1> ^result <r3> ^name <c4> ^attribute <c5>)
    (<p1> ^num { < 2 <c6> })
    (<a1> ^1 <c3>)
    (<r3> ^set <p3>)
    (<c3> ^result <r1>)
    (<r1> ^set <r2>)
    (<r2> ^instance <i1>)
    (<i1> ^1 <n1>)
    (<n1> ^predicates <p2>)
    (<p2> ^<c5> <c4>)
    -->
    (<p3> ^instance <i2> +)
    (<i2> ^1 <n1> +)
}

sp {chunk*with-attribute*apply*complete*instance*t967-1
    :chunk
    (state <s1> ^list <l1> ^world <n1>
          ^{ << action goal predicate failure heuristic >> <c4> } <a3>)
    (<l1> ^game <g1>)
    (<n1> ^objects <c3>)
    (<a3> ^condition <c1>)
    (<c1> ^rtype single ^name object ^type attribute ^attribute primitive
          ^args <a2> ^negative <c2> ^parameter <p1> ^result <r1>)
    (<a2> -^1 <a1>)
    (<r1> ^set <r2>)
    (<c3> ^object <n2>)
    (<n2> -^handle self)
    -->
    (<r2> ^instance <i1> +)
    (<i1> ^1 <n2> +)
}



