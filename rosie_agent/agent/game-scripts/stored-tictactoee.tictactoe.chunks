sp {chunk*chunk-puzzle-impasse*apply*complete*StateNoChange*t5812-4
    :chunk
    (state <s1> ^retrieve-game tic-tac-toe1 -^opponent <o*1>)
    -->
    (<s1> ^retrieve-handle action-default20 +)
}

sp {chunk*chunk-puzzle-impasse*apply*complete*StateNoChange*t5812-3
    :chunk
    (state <s1> ^retrieve-game tic-tac-toe1 -^opponent <o*1>)
    -->
    (<s1> ^retrieve-handle heuristic-default36 +)
}

sp {chunk*chunk-puzzle-impasse*apply*complete*StateNoChange*t5812-2
    :chunk
    (state <s1> ^retrieve-game tic-tac-toe1 -^opponent <o*1>)
    -->
    (<s1> ^retrieve-handle goal-default44 +)
}

sp {chunk*chunk-puzzle-impasse*apply*complete*StateNoChange*t5812-1
    :chunk
    (state <s1> ^retrieve-game tic-tac-toe1 -^opponent <o*1>)
    -->
    (<s1> ^retrieve-handle failure-default52 +)
}

sp {chunk*chunk-predicate-impasse*apply*complete*action*StateNoChange*t5695-1
    :chunk
    (state <s1> ^gtype failure ^retrieve-handle failure-default52)
    -->
    (<s1> ^failure <p1> +)
    (<p1> ^potential-args <p2> + ^parameter-set <p3> + ^formated predicate +
           ^primary-rtype set + ^nlp-set <l1> + ^aname failure-default52 +
           ^handle failure-default52 +)
    (<p3> ^argnum 2 +)
    (<l1> ^conditions <l2> + ^conditions <l3> + ^conditions <l31> +
           ^aname failure-default52 +)
    (<l2> ^rtype set + ^args <l5> + ^negative false + ^parameter <l22> +
           ^result <l24> + ^attribute predicate + ^name occupied +
           ^type concept +)
    (<l5> ^num 1 + ^1 <l6> +)
    (<l6> ^rtype set + ^args <l7> + ^negative false + ^parameter <l18> +
           ^result <l20> + ^attribute preposition + ^name linear +
           ^type state-pair +)
    (<l7> ^num 1 + ^1 <l8> +)
    (<l8> ^rtype single + ^args <l9> + ^negative false + ^parameter <l15> +
           ^result <l16> + ^attribute category + ^name location +
           ^type attribute +)
    (<l9> ^num 1 + ^1 <l10> +)
    (<l10> ^rtype single + ^args <l11> + ^negative false + ^parameter <l12> +
           ^result <l13> + ^attribute primitive + ^name object +
           ^type attribute +)
    (<l12> ^num 0 +)
    (<l13> ^set <l14> +)
    (<l15> ^num 0 +)
    (<l16> ^set <l17> +)
    (<l18> ^num 1 + ^1 <l19> +)
    (<l19> ^param-id 1 + ^type set +)
    (<l20> ^set <l21> +)
    (<l22> ^num 1 + ^1 <l23> +)
    (<l23> ^param-id 1 + ^type set +)
    (<l24> ^set <l25> +)
    (<l3> ^return-type number + ^function soar-count + ^rtype single +
           ^args <l4> + ^negative false + ^parameter <l26> + ^result <l29> +
           ^name count + ^type function +)
    (<l4> ^num 1 + ^2 <l2> +)
    (<l26> ^num 2 + ^2 <l27> + ^1 <l28> +)
    (<l27> ^param-id 1 + ^type set +)
    (<l28> ^param-id 2 + ^type single +)
    (<l29> ^set <l30> +)
    (<l31> ^return-type number + ^rtype single + ^args <l32> +
           ^negative false + ^parameter <l33> + ^result <l37> + ^name number +)
    (<l33> ^num 1 + ^1 <l34> +)
    (<l34> ^param-id 2 + ^type single +)
    (<l37> ^set <l36> +)
    (<l36> ^instance <l35> +)
    (<l35> ^1 3 +)
}

sp {chunk*chunk-predicate-impasse*apply*complete*StateNoChange*t5683-1
    :chunk
    (state <s1> ^gtype <c1> ^<c1> <g1>)
    (<g1> ^condition <n1>)
    (<n1> ^name occupied ^type concept ^attribute predicate)
    -->
    (<s1> ^predicate <p1> + ^gtype predicate +)
    (<p1> ^link <n1> + ^potential-args <p2> + ^parameter-set <p3> +
           ^formated predicate + ^primary-rtype single + ^nlp-set <l28> +
           ^aname occupied + ^handle occupied +)
    (<p3> ^argnum 1 +)
    (<l28> ^conditions <l1> + ^aname occupied +)
    (<l1> ^rtype single + ^args <l2> + ^negative false + ^parameter <l24> +
           ^result <l26> + ^attribute prepositions + ^name below1 +
           ^type state-pair +)
    (<l2> ^num 2 + ^2 <l3> + ^1 <l18> +)
    (<l3> ^rtype single + ^args <l4> + ^negative false + ^parameter <l15> +
           ^result <l16> + ^attribute color + ^name blue1 + ^type attribute +)
    (<l4> ^num 1 + ^1 <l5> +)
    (<l5> ^rtype single + ^args <l6> + ^negative false + ^parameter <l12> +
           ^result <l13> + ^attribute category + ^name block +
           ^type attribute +)
    (<l6> ^num 1 + ^1 <l7> +)
    (<l7> ^rtype single + ^args <l8> + ^negative false + ^parameter <l9> +
           ^result <l10> + ^attribute primitive + ^name object +
           ^type attribute +)
    (<l9> ^num 0 +)
    (<l10> ^set <l11> +)
    (<l12> ^num 0 +)
    (<l13> ^set <l14> +)
    (<l15> ^num 0 +)
    (<l16> ^set <l17> +)
    (<l18> ^rtype single + ^args <l19> + ^negative false + ^parameter <l20> +
           ^result <l22> + ^attribute input-arg + ^name object +)
    (<l20> ^num 1 + ^1 <l21> +)
    (<l21> ^param-id 1 + ^type single +)
    (<l22> ^set <l23> +)
    (<l24> ^num 1 + ^1 <l25> +)
    (<l25> ^param-id 1 + ^type single +)
    (<l26> ^set <l27> +)
}

sp {chunk*chunk-predicate-impasse*apply*complete*action*StateNoChange*t4666-1
    :chunk
    (state <s1> ^gtype goal ^retrieve-handle goal-default44)
    -->
    (<s1> ^goal <p1> +)
    (<p1> ^potential-args <p2> + ^parameter-set <p3> + ^formated predicate +
           ^primary-rtype set + ^nlp-set <l1> + ^aname goal-default44 +
           ^handle goal-default44 +)
    (<p3> ^argnum 2 +)
    (<l1> ^conditions <l2> + ^conditions <l3> + ^conditions <l31> +
           ^aname goal-default44 +)
    (<l2> ^rtype set + ^args <l5> + ^negative false + ^parameter <l22> +
           ^result <l24> + ^attribute predicate + ^name captured +
           ^type concept +)
    (<l5> ^num 1 + ^1 <l6> +)
    (<l6> ^rtype set + ^args <l7> + ^negative false + ^parameter <l18> +
           ^result <l20> + ^attribute preposition + ^name linear +
           ^type state-pair +)
    (<l7> ^num 1 + ^1 <l8> +)
    (<l8> ^rtype single + ^args <l9> + ^negative false + ^parameter <l15> +
           ^result <l16> + ^attribute category + ^name location +
           ^type attribute +)
    (<l9> ^num 1 + ^1 <l10> +)
    (<l10> ^rtype single + ^args <l11> + ^negative false + ^parameter <l12> +
           ^result <l13> + ^attribute primitive + ^name object +
           ^type attribute +)
    (<l12> ^num 0 +)
    (<l13> ^set <l14> +)
    (<l15> ^num 0 +)
    (<l16> ^set <l17> +)
    (<l18> ^num 1 + ^1 <l19> +)
    (<l19> ^param-id 1 + ^type set +)
    (<l20> ^set <l21> +)
    (<l22> ^num 1 + ^1 <l23> +)
    (<l23> ^param-id 1 + ^type set +)
    (<l24> ^set <l25> +)
    (<l3> ^return-type number + ^function soar-count + ^rtype single +
           ^args <l4> + ^negative false + ^parameter <l26> + ^result <l29> +
           ^name count + ^type function +)
    (<l4> ^num 1 + ^2 <l2> +)
    (<l26> ^num 2 + ^2 <l27> + ^1 <l28> +)
    (<l27> ^param-id 1 + ^type set +)
    (<l28> ^param-id 2 + ^type single +)
    (<l29> ^set <l30> +)
    (<l31> ^return-type number + ^rtype single + ^args <l32> +
           ^negative false + ^parameter <l33> + ^result <l37> + ^name number +)
    (<l33> ^num 1 + ^1 <l34> +)
    (<l34> ^param-id 2 + ^type single +)
    (<l37> ^set <l36> +)
    (<l36> ^instance <l35> +)
    (<l35> ^1 3 +)
}

sp {chunk*top-pair*apply*complete*t4654-1
    :chunk
    (state <s1> ^list <l1> ^world <n1>
          ^{ << action goal predicate failure heuristic >> <c6> } <a2>)
    (<l1> ^game <g1>)
    (<n1> ^predicates <p2>)
    (<p2> ^predicate <n2>)
    (<n2> ^instance <n3> ^handle <c2>)
    (<n3> ^1 <n4>)
   -{ (<n4> -^<x1> <x*1>)
      (<s1> ^<a*1> <v*1>)}
    (<a2> ^condition <c1>)
    (<c1> ^rtype set ^negative false ^name <c2> ^type state-pair ^args <a1>
          ^parameter <p1> ^result <r1> ^attribute <c3>)
    (<a1> ^num 1 ^1 <c4>)
    (<c4> -^rtype set)
   -{ (<n4> ^<elem> <obja>)
     -{ (<c4> ^result <r*1>)
        (<r*1> ^set <s*3>)
        (<s*3> ^instance <i*1>)
        (<i*1> ^1 <obja>)}}
    (<p1> ^num { < 2 <c5> })
    (<r1> ^set <p3>)
    -->
    (<p3> ^instance <i1> +)
    (<i1> ^1 <n4> +)
}

sp {chunk*chunk-predicate-impasse*apply*complete*StateNoChange*t4645-1
    :chunk
    (state <s1> ^gtype <c1> ^<c1> <g1>)
    (<g1> ^condition <n1>)
    (<n1> ^name captured ^type concept ^attribute predicate)
    -->
    (<s1> ^predicate <p1> + ^gtype predicate +)
    (<p1> ^link <n1> + ^potential-args <p2> + ^parameter-set <p3> +
           ^formated predicate + ^primary-rtype single + ^nlp-set <l28> +
           ^aname captured + ^handle captured +)
    (<p3> ^argnum 1 +)
    (<l28> ^conditions <l1> + ^aname captured +)
    (<l1> ^rtype single + ^args <l2> + ^negative false + ^parameter <l24> +
           ^result <l26> + ^attribute prepositions + ^name below1 +
           ^type state-pair +)
    (<l2> ^num 2 + ^2 <l3> + ^1 <l18> +)
    (<l3> ^rtype single + ^args <l4> + ^negative false + ^parameter <l15> +
           ^result <l16> + ^attribute color + ^name red1 + ^type attribute +)
    (<l4> ^num 1 + ^1 <l5> +)
    (<l5> ^rtype single + ^args <l6> + ^negative false + ^parameter <l12> +
           ^result <l13> + ^attribute category + ^name block +
           ^type attribute +)
    (<l6> ^num 1 + ^1 <l7> +)
    (<l7> ^rtype single + ^args <l8> + ^negative false + ^parameter <l9> +
           ^result <l10> + ^attribute primitive + ^name object +
           ^type attribute +)
    (<l9> ^num 0 +)
    (<l10> ^set <l11> +)
    (<l12> ^num 0 +)
    (<l13> ^set <l14> +)
    (<l15> ^num 0 +)
    (<l16> ^set <l17> +)
    (<l18> ^rtype single + ^args <l19> + ^negative false + ^parameter <l20> +
           ^result <l22> + ^attribute input-arg + ^name object +)
    (<l20> ^num 1 + ^1 <l21> +)
    (<l21> ^param-id 1 + ^type single +)
    (<l22> ^set <l23> +)
    (<l24> ^num 1 + ^1 <l25> +)
    (<l25> ^param-id 1 + ^type single +)
    (<l26> ^set <l27> +)
}

sp {chunk*top-pair*apply*complete*t4269-1
    :chunk
    (state <s1> ^list <l1> ^world <n2>
          ^{ << action goal predicate failure heuristic >> <c6> } <a2>)
    (<l1> ^game <g1>)
    (<n2> ^predicates <p2>)
    (<p2> ^predicate <n3>)
    (<n3> ^instance <n4> ^handle <c1>)
    (<n4> ^2 <n5> ^1 <n6>)
    (<a2> ^condition <n1>)
    (<n1> ^rtype single ^negative false ^name <c1> ^type state-pair ^args <a1>
          ^parameter <p1> ^result <r4> ^attribute <c2>)
    (<a1> ^num 2 ^2 <c3> ^1 <c4>)
    (<c3> -^rtype set ^result <r1>)
    (<c4> -^rtype set ^result <r2>)
    (<p1> ^num { < 2 <c5> })
    (<r4> ^set <p4>)
    (<r2> ^set <r3>)
    (<r3> ^instance <i2>)
    (<i2> ^1 <n6>)
    (<r1> ^set <p3>)
    (<p3> ^instance <i1>)
    (<i1> ^1 <n5>)
    -->
    (<p4> ^instance <i3> +)
    (<i3> ^1 <n6> +)
}

sp {chunk*chunk-predicate-impasse*apply*complete*action*StateNoChange*t3576-1
    :chunk
    (state <s1> ^gtype heuristic ^retrieve-handle heuristic-default36)
    -->
    (<s1> ^heuristic <p1> +)
    (<p1> ^prefer <l1> + ^ntype heuristic + ^potential-args <p2> +
           ^parameter-set <p3> + ^formated predicate + ^primary-rtype single +
           ^nlp-set <l10> + ^aname heuristic-default36 +
           ^handle heuristic-default36 +)
    (<l1> ^2 <l2> + ^1 <l3> +)
    (<p3> ^argnum 3 +)
    (<l3> ^verb on1 + ^rtype single + ^args <l4> + ^negative false +
           ^parameter <l5> + ^result <l8> + ^attribute action + ^name move1 +
           ^type concept +)
    (<l5> ^num 2 + ^2 <l6> + ^1 <l7> +)
    (<l6> ^param-id 1 + ^type single +)
    (<l7> ^param-id 2 + ^type single +)
    (<l8> ^set <l9> +)
    (<l2> ^verb on1 + ^rtype single + ^args <l11> + ^negative false +
           ^parameter <l12> + ^result <l15> + ^attribute action +
           ^name move1 + ^type concept +)
    (<l12> ^num 2 + ^2 <l13> + ^1 <l14> +)
    (<l13> ^param-id 3 + ^type single +)
    (<l14> ^param-id 2 + ^type single +)
    (<l15> ^set <l16> +)
    (<l10> ^conditions <l3> + ^conditions <l2> + ^conditions <l17> +
           ^conditions <l33> + ^conditions <l49> +
           ^aname heuristic-default36 +)
    (<l17> ^rtype single + ^args <l18> + ^negative false + ^parameter <l29> +
           ^result <l31> + ^attribute predicate + ^name corner +
           ^type concept +)
    (<l18> ^num 1 + ^1 <l19> +)
    (<l19> ^rtype single + ^args <l20> + ^negative false + ^parameter <l26> +
           ^result <l27> + ^attribute category + ^name location +
           ^type attribute +)
    (<l20> ^num 1 + ^1 <l21> +)
    (<l21> ^rtype single + ^args <l22> + ^negative false + ^parameter <l23> +
           ^result <l24> + ^attribute primitive + ^name object +
           ^type attribute +)
    (<l23> ^num 0 +)
    (<l24> ^set <l25> +)
    (<l26> ^num 0 +)
    (<l27> ^set <l28> +)
    (<l29> ^num 1 + ^1 <l30> +)
    (<l30> ^param-id 1 + ^type single +)
    (<l31> ^set <l32> +)
    (<l33> ^rtype single + ^args <l34> + ^negative false + ^parameter <l45> +
           ^result <l47> + ^attribute predicate + ^name edge + ^type concept +)
    (<l34> ^num 1 + ^1 <l35> +)
    (<l35> ^rtype single + ^args <l36> + ^negative false + ^parameter <l42> +
           ^result <l43> + ^attribute category + ^name location +
           ^type attribute +)
    (<l36> ^num 1 + ^1 <l37> +)
    (<l37> ^rtype single + ^args <l38> + ^negative false + ^parameter <l39> +
           ^result <l40> + ^attribute primitive + ^name object +
           ^type attribute +)
    (<l39> ^num 0 +)
    (<l40> ^set <l41> +)
    (<l42> ^num 0 +)
    (<l43> ^set <l44> +)
    (<l45> ^num 1 + ^1 <l46> +)
    (<l46> ^param-id 3 + ^type single +)
    (<l47> ^set <l48> +)
    (<l49> ^rtype single + ^args <l50> + ^negative false + ^parameter <l56> +
           ^result <l58> + ^attribute category + ^name block +
           ^type attribute +)
    (<l50> ^num 1 + ^1 <l51> +)
    (<l51> ^rtype single + ^args <l52> + ^negative false + ^parameter <l53> +
           ^result <l54> + ^attribute primitive + ^name object +
           ^type attribute +)
    (<l53> ^num 0 +)
    (<l54> ^set <l55> +)
    (<l56> ^num 1 + ^1 <l57> +)
    (<l57> ^param-id 2 + ^type single +)
    (<l58> ^set <l59> +)
}

sp {chunk*chunk-parameters*preference*prefer*two-operators*2args2*Tie*t3564-1
    :chunk
    (state <s1> ^heuristic <a2> ^heuristic <a1> ^list <l1> ^operator <o2> +
          ^operator <o1> +)
    (<a2> ^ntype heuristic ^parameter-set <p1> ^prefer <n1>)
    (<a1> -^modifier <m*1> -^consider <c*1> ^ntype heuristic)
    (<p1> ^set <i1>)
    (<n1> ^2 <n2> ^1 <n3>)
    (<n2> ^type concept ^attribute action ^parameter <p2> ^verb <c1>
          ^name <c2> ^result <r1>)
    (<p2> ^num 2 ^2 <p4> ^1 <p6>)
    (<n3> ^type concept ^attribute action ^verb <c1> ^parameter <p3>
          ^name <c2> ^result <r2>)
    (<p3> ^num 2 ^2 <p5> ^1 <p7>)
    (<l1> ^game <g1>)
    (<p5> ^param-id <c4>)
    (<p4> ^param-id <c3>)
    (<p7> ^param-id <c6>)
    (<p6> ^param-id <c5>)
    (<r2> ^set <p9>)
    (<p9> ^instance <i3>)
    (<r1> ^set <p8>)
    (<p8> ^instance <i2>)
    (<o2> ^verb-structure <l4> ^parameters <i5>)
    (<l4> ^1 <l5>)
    (<l5> ^verb-prep <c1> ^verb-name <c2> ^2 <c9> ^1 <c10>)
    (<i3> ^<c9> <n6> ^<c10> <n7>)
    (<i1> ^<c4> <n6> ^<c6> <n7> ^<c3> <n4> ^<c5> <n5>)
    (<i5> ^<c9> <n6> ^<c10> <n7>)
    (<o1> ^verb-structure <l2> ^parameters <i4>)
    (<l2> ^1 <l3>)
    (<l3> ^verb-prep <c1> ^verb-name <c2> ^2 <c7> ^1 <c8>)
    (<i2> ^<c7> <n4> ^<c8> <n5>)
    (<i4> ^<c7> <n4> ^<c8> <n5>)
    -->
    (<s1> ^operator <o2> > <o1>)
}

sp {chunk*chunk-predicate-impasse*apply*complete*StateNoChange*t3562-1
    :chunk
    (state <s1> ^gtype <c2> ^<c2> <g1>)
    (<g1> ^condition <c1>)
    (<c1> ^name edge ^type concept ^attribute predicate)
    -->
    (<s1> ^predicate <p1> + ^gtype predicate +)
    (<p1> ^link <c1> + ^potential-args <p2> + ^parameter-set <p3> +
           ^formated predicate + ^primary-rtype single + ^nlp-set <l1> +
           ^aname edge + ^handle edge +)
    (<p3> ^argnum 3 +)
    (<l1> ^conditions <l2> + ^conditions <l3> + ^conditions <l32> +
           ^aname edge +)
    (<l2> ^rtype set + ^args <l5> + ^negative false + ^parameter <l22> +
           ^result <l25> + ^attribute prepositions + ^name diagonal-with1 +
           ^type state-pair +)
    (<l5> ^num 2 + ^2 <l6> + ^1 <l12> +)
    (<l6> ^rtype single + ^args <l7> + ^negative false + ^parameter <l8> +
           ^result <l10> + ^attribute input-arg + ^name object +)
    (<l8> ^num 1 + ^1 <l9> +)
    (<l9> ^param-id 1 + ^type single +)
    (<l10> ^set <l11> +)
    (<l12> ^rtype single + ^args <l13> + ^negative false + ^parameter <l19> +
           ^result <l20> + ^attribute category + ^name location +
           ^type attribute +)
    (<l13> ^num 1 + ^1 <l14> +)
    (<l14> ^rtype single + ^args <l15> + ^negative false + ^parameter <l16> +
           ^result <l17> + ^attribute primitive + ^name object +
           ^type attribute +)
    (<l16> ^num 0 +)
    (<l17> ^set <l18> +)
    (<l19> ^num 0 +)
    (<l20> ^set <l21> +)
    (<l22> ^num 2 + ^2 <l23> + ^1 <l24> +)
    (<l23> ^param-id 1 + ^type single +)
    (<l24> ^param-id 2 + ^type set +)
    (<l25> ^set <l26> +)
    (<l3> ^return-type number + ^function soar-count + ^rtype single +
           ^args <l4> + ^negative false + ^parameter <l27> + ^result <l30> +
           ^name count + ^type function +)
    (<l4> ^num 1 + ^2 <l2> +)
    (<l27> ^num 2 + ^2 <l28> + ^1 <l29> +)
    (<l28> ^param-id 2 + ^type set +)
    (<l29> ^param-id 3 + ^type single +)
    (<l30> ^set <l31> +)
    (<l32> ^return-type number + ^rtype single + ^args <l33> +
           ^negative false + ^parameter <l34> + ^result <l38> + ^name number +)
    (<l34> ^num 1 + ^1 <l35> +)
    (<l35> ^param-id 3 + ^type single +)
    (<l38> ^set <l37> +)
    (<l37> ^instance <l36> +)
    (<l36> ^1 2 +)
}

sp {chunk*chunk-predicate-impasse*apply*complete*StateNoChange*t3552-1
    :chunk
    (state <s1> ^gtype <c2> ^<c2> <g1>)
    (<g1> ^condition <c1>)
    (<c1> ^name corner ^type concept ^attribute predicate)
    -->
    (<s1> ^predicate <p1> + ^gtype predicate +)
    (<p1> ^link <c1> + ^potential-args <p2> + ^parameter-set <p3> +
           ^formated predicate + ^primary-rtype single + ^nlp-set <l1> +
           ^aname corner + ^handle corner +)
    (<p3> ^argnum 3 +)
    (<l1> ^conditions <l2> + ^conditions <l3> + ^conditions <l32> +
           ^aname corner +)
    (<l2> ^rtype set + ^args <l5> + ^negative false + ^parameter <l22> +
           ^result <l25> + ^attribute prepositions + ^name diagonal-with1 +
           ^type state-pair +)
    (<l5> ^num 2 + ^2 <l6> + ^1 <l12> +)
    (<l6> ^rtype single + ^args <l7> + ^negative false + ^parameter <l8> +
           ^result <l10> + ^attribute input-arg + ^name object +)
    (<l8> ^num 1 + ^1 <l9> +)
    (<l9> ^param-id 1 + ^type single +)
    (<l10> ^set <l11> +)
    (<l12> ^rtype single + ^args <l13> + ^negative false + ^parameter <l19> +
           ^result <l20> + ^attribute category + ^name location +
           ^type attribute +)
    (<l13> ^num 1 + ^1 <l14> +)
    (<l14> ^rtype single + ^args <l15> + ^negative false + ^parameter <l16> +
           ^result <l17> + ^attribute primitive + ^name object +
           ^type attribute +)
    (<l16> ^num 0 +)
    (<l17> ^set <l18> +)
    (<l19> ^num 0 +)
    (<l20> ^set <l21> +)
    (<l22> ^num 2 + ^2 <l23> + ^1 <l24> +)
    (<l23> ^param-id 1 + ^type single +)
    (<l24> ^param-id 2 + ^type set +)
    (<l25> ^set <l26> +)
    (<l3> ^return-type number + ^function soar-count + ^rtype single +
           ^args <l4> + ^negative false + ^parameter <l27> + ^result <l30> +
           ^name count + ^type function +)
    (<l4> ^num 1 + ^2 <l2> +)
    (<l27> ^num 2 + ^2 <l28> + ^1 <l29> +)
    (<l28> ^param-id 2 + ^type set +)
    (<l29> ^param-id 3 + ^type single +)
    (<l30> ^set <l31> +)
    (<l32> ^return-type number + ^rtype single + ^args <l33> +
           ^negative false + ^parameter <l34> + ^result <l38> + ^name number +)
    (<l34> ^num 1 + ^1 <l35> +)
    (<l35> ^param-id 3 + ^type single +)
    (<l38> ^set <l37> +)
    (<l37> ^instance <l36> +)
    (<l36> ^1 1 +)
}

sp {chunk*soar-count*apply*complete*t2413-1
    :chunk
    (state <s1> ^list <l1>
          ^{ << action goal predicate failure heuristic >> <c3> } <a2>)
    (<l1> ^game <g1>)
    (<a2> ^condition <n1>)
    (<n1> ^function soar-count ^type function ^args <a1> ^parameter <p1>
          ^negative <c1> ^result <r2> ^name <c2>)
    (<a1> ^num 1 ^2 <n2>)
    (<p1> ^num 2)
    (<n2> ^rtype set ^result <r1>)
    (<r2> ^set <p3>)
    (<r1> ^set <p2>)
    (<p2> ^instance <i1>)
    (<i1> ^1 <i2>)
   -{ (<i2> -^<something> <s*3>)
      (<s1> ^<a*1> <v*1>)}
    -->
    (<p3> ^instance <p4> +)
    (<p4> ^1 (size <i2>) + ^2 <i2> +)
}

sp {chunk*top-pair*with-type*1param*set*noarg-set1*apply*OpNoChange*t2407-2
    :chunk
    (state <s1> ^list <l1> ^world <n2>
          ^{ << action goal predicate failure heuristic >> <c7> } <a2>)
    (<l1> ^game <g1>)
    (<n2> ^predicates <p2>)
    (<p2> ^predicate <n3>)
    (<n3> ^instance <n4> ^handle <c1>)
    (<n4> ^2 <n5> ^1 <n6>)
    (<a2> ^condition <n1>)
    (<n1> ^rtype set ^negative false ^name <c1> ^type state-pair ^args <a1>
          ^parameter <p1> ^result <r4> ^attribute <c2>)
    (<a1> ^num 2 ^2 <c3> ^1 <c4> ^2 <c5> ^1 <c6>)
    (<p1> ^num 2)
    (<c3> -^rtype set ^result <r1>)
    (<c4> -^rtype set ^result <r3>)
    (<c5> ^result <r5>)
    (<r5> ^set <r6>)
    (<r6> ^instance <i5>)
    (<i5> ^1 <n7>)
    (<r4> ^set <p4>)
    (<p4> ^instance <i3>)
    (<i3> ^2 <n5> ^1 <i4>)
    (<r3> ^set <p3>)
    (<p3> ^instance <i2>)
    (<i2> ^1 <n6>)
    (<r1> ^set <r2>)
    (<r2> ^instance <i1>)
    (<i1> ^1 <n5>)
    -->
    (<i4> ^object <n6> +)
}

sp {chunk*top-pair*apply*complete*t2407-1
    :chunk
    (state <s1> ^list <l1>
          ^{ << action goal predicate failure heuristic >> <c5> } <a2>)
    (<l1> ^game <g1>)
    (<a2> ^condition <n1>)
    (<n1> ^rtype set ^negative false ^type state-pair ^args <a1>
          ^parameter <p1> ^result <r3> ^name <c1> ^attribute <c2>)
    (<a1> ^num 2 ^2 <c3> ^1 <c4>)
    (<p1> ^num 2)
    (<c3> -^rtype set ^result <r1>)
    (<c4> -^rtype set)
    (<r3> ^set <p2>)
    (<r1> ^set <r2>)
    (<r2> ^instance <i1>)
    (<i1> ^1 <n2>)
    -->
    (<p2> ^instance <i2> +)
    (<i2> ^2 <n2> + ^1 <i3> +)
}

sp {chunk*chunk-predicate-impasse*apply*complete*action*StateNoChange*t1764-1
    :chunk
    (state <s1> ^gtype action ^retrieve-handle action-default20)
    -->
    (<s1> ^action <p1> +)
    (<p1> ^potential-args <p2> + ^parameter-set <p3> + ^formated predicate +
           ^primary-rtype single + ^nlp-set <l17> + ^verb-structure <l45> +
           ^aname action-default20 + ^handle action-default20 +)
    (<p3> ^argnum 2 +)
    (<l17> ^conditions <l1> + ^conditions <l18> + ^aname action-default20 +)
    (<l1> ^rtype single + ^args <l2> + ^negative false + ^parameter <l13> +
           ^result <l15> + ^attribute predicate + ^name clear +
           ^type concept +)
    (<l2> ^num 1 + ^1 <l3> +)
    (<l3> ^rtype single + ^args <l4> + ^negative false + ^parameter <l10> +
           ^result <l11> + ^attribute category + ^name location +
           ^type attribute +)
    (<l4> ^num 1 + ^1 <l5> +)
    (<l5> ^rtype single + ^args <l6> + ^negative false + ^parameter <l7> +
           ^result <l8> + ^attribute primitive + ^name object +
           ^type attribute +)
    (<l7> ^num 0 +)
    (<l8> ^set <l9> +)
    (<l10> ^num 0 +)
    (<l11> ^set <l12> +)
    (<l13> ^num 1 + ^1 <l14> +)
    (<l14> ^param-id 2 + ^type single +)
    (<l15> ^set <l16> +)
    (<l18> ^rtype single + ^args <l19> + ^negative false + ^parameter <l40> +
           ^result <l42> + ^attribute predicate + ^name clear +
           ^type concept +)
    (<l19> ^num 1 + ^1 <l20> +)
    (<l20> ^rtype single + ^args <l21> + ^negative false + ^parameter <l37> +
           ^result <l38> + ^attribute predicate + ^name free + ^type concept +)
    (<l21> ^num 1 + ^1 <l22> +)
    (<l22> ^rtype single + ^args <l23> + ^negative false + ^parameter <l34> +
           ^result <l35> + ^attribute color + ^name red1 + ^type attribute +)
    (<l23> ^num 1 + ^1 <l24> +)
    (<l24> ^rtype single + ^args <l25> + ^negative false + ^parameter <l31> +
           ^result <l32> + ^attribute category + ^name block +
           ^type attribute +)
    (<l25> ^num 1 + ^1 <l26> +)
    (<l26> ^rtype single + ^args <l27> + ^negative false + ^parameter <l28> +
           ^result <l29> + ^attribute primitive + ^name object +
           ^type attribute +)
    (<l28> ^num 0 +)
    (<l29> ^set <l30> +)
    (<l31> ^num 0 +)
    (<l32> ^set <l33> +)
    (<l34> ^num 0 +)
    (<l35> ^set <l36> +)
    (<l37> ^num 0 +)
    (<l38> ^set <l39> +)
    (<l40> ^num 1 + ^1 <l41> +)
    (<l41> ^param-id 1 + ^type single +)
    (<l42> ^set <l43> +)
    (<l45> ^1 <l44> +)
    (<l44> ^verb-prep on1 + ^verb-name move1 + ^2 2 + ^1 1 +)
}

sp {chunk*chunk-predicate-impasse*apply*complete*StateNoChange*t1750-1
    :chunk
    (state <s1> ^gtype <c2> ^<c2> <g1>)
    (<g1> ^condition <c1>)
    (<c1> ^name free ^type concept ^attribute predicate)
    -->
    (<s1> ^predicate <p1> + ^gtype predicate +)
    (<p1> ^link <c1> + ^potential-args <p2> + ^parameter-set <p3> +
           ^formated predicate + ^primary-rtype single + ^nlp-set <l23> +
           ^aname free + ^handle free +)
    (<p3> ^argnum 1 +)
    (<l23> ^conditions <l1> + ^aname free +)
    (<l1> ^rtype single + ^args <l2> + ^negative true + ^parameter <l19> +
           ^result <l21> + ^attribute prepositions + ^name on1 +
           ^type state-pair +)
    (<l2> ^num 2 + ^2 <l3> + ^1 <l13> +)
    (<l3> ^rtype single + ^args <l4> + ^negative false + ^parameter <l10> +
           ^result <l11> + ^attribute category + ^name location +
           ^type attribute +)
    (<l4> ^num 1 + ^1 <l5> +)
    (<l5> ^rtype single + ^args <l6> + ^negative false + ^parameter <l7> +
           ^result <l8> + ^attribute primitive + ^name object +
           ^type attribute +)
    (<l7> ^num 0 +)
    (<l8> ^set <l9> +)
    (<l10> ^num 0 +)
    (<l11> ^set <l12> +)
    (<l13> ^rtype single + ^args <l14> + ^negative false + ^parameter <l15> +
           ^result <l17> + ^attribute input-arg + ^name object +)
    (<l15> ^num 1 + ^1 <l16> +)
    (<l16> ^param-id 1 + ^type single +)
    (<l17> ^set <l18> +)
    (<l19> ^num 1 + ^1 <l20> +)
    (<l20> ^param-id 1 + ^type single +)
    (<l21> ^set <l22> +)
}

sp {chunk*chunk-predicate-impasse*apply*complete*StateNoChange*t1740-1
    :chunk
    (state <s1> ^gtype <c2> ^<c2> <g1>)
    (<g1> ^condition <c1>)
    (<c1> ^name clear ^type concept ^attribute predicate)
    -->
    (<s1> ^predicate <p1> + ^gtype predicate +)
    (<p1> ^link <c1> + ^potential-args <p2> + ^parameter-set <p3> +
           ^formated predicate + ^primary-rtype single + ^nlp-set <l18> +
           ^aname clear + ^handle clear +)
    (<p3> ^argnum 1 +)
    (<l18> ^conditions <l1> + ^aname clear +)
    (<l1> ^rtype single + ^args <l2> + ^negative true + ^parameter <l14> +
           ^result <l16> + ^attribute prepositions + ^name below1 +
           ^type state-pair +)
    (<l2> ^num 2 + ^2 <l3> + ^1 <l8> +)
    (<l3> ^rtype single + ^args <l4> + ^negative false + ^parameter <l5> +
           ^result <l6> + ^attribute primitive + ^name object +
           ^type attribute +)
    (<l5> ^num 0 +)
    (<l6> ^set <l7> +)
    (<l8> ^rtype single + ^args <l9> + ^negative false + ^parameter <l10> +
           ^result <l12> + ^attribute input-arg + ^name object +)
    (<l10> ^num 1 + ^1 <l11> +)
    (<l11> ^param-id 1 + ^type single +)
    (<l12> ^set <l13> +)
    (<l14> ^num 1 + ^1 <l15> +)
    (<l15> ^param-id 1 + ^type single +)
    (<l16> ^set <l17> +)
}

sp {chunk*top-pair*apply*complete*t928-1
    :chunk
    (state <s1> ^list <l1> ^world <n2>
          ^{ << action goal predicate failure heuristic >> <c6> } <a2>)
    (<l1> ^game <g1>)
    (<n2> ^predicates <p2>)
    (<p2> ^predicate <n3>)
    (<n3> ^handle <c1>)
    (<a2> ^condition <n1>)
    (<n1> ^rtype single ^negative true ^name <c1> ^type state-pair ^args <a1>
          ^parameter <p1> ^result <r3> ^attribute <c2>)
    (<a1> ^num 2 ^1 <c3> ^2 <c5>)
    (<c3> -^rtype set ^result <r1>)
    (<p1> ^num { < 2 <c4> })
    (<r3> ^set <p3>)
    (<r1> ^set <r2>)
    (<r2> ^instance <i1>)
    (<i1> ^1 <n4>)
   -{ (<n3> ^instance <instance>)
      (<instance> ^1 <n4> ^2 <objb>)
      (<c5> ^result <r*2>)
      (<r*2> ^set <s*4>)
      (<s*4> ^instance <i*2>)
      (<i*2> ^1 <objb>)}
    -->
    (<p3> ^instance <i2> +)
    (<i2> ^1 <n4> +)
}

sp {chunk*with-attribute*apply*complete*instance*t922-1
    :chunk
    (state <s1> ^list <l1>
          ^{ << action goal predicate failure heuristic >> <c7> } <a2>)
    (<l1> ^game <g1>)
    (<a2> ^condition <c1>)
    (<c1> ^rtype single ^type attribute ^args <a1> ^negative <c2>
          ^parameter <p1> ^result <r3> ^name <c4> ^attribute <c5>)
    (<p1> ^num { < 2 <c6> })
    (<a1> ^1 <c3>)
    (<r3> ^set <p3>)
    (<c3> ^result <r1>)
    (<r1> ^set <r2>)
    (<r2> ^instance <i1>)
    (<i1> ^1 <n1>)
    (<n1> ^predicates <p2>)
    (<p2> ^<c5> <c4>)
    -->
    (<p3> ^instance <i2> +)
    (<i2> ^1 <n1> +)
}

sp {chunk*with-attribute*apply*complete*instance*t916-1
    :chunk
    (state <s1> ^list <l1> ^world <n1>
          ^{ << action goal predicate failure heuristic >> <c4> } <a3>)
    (<l1> ^game <g1>)
    (<n1> ^objects <c3>)
    (<a3> ^condition <c1>)
    (<c1> ^rtype single ^name object ^type attribute ^attribute primitive
          ^args <a2> ^negative <c2> ^parameter <p1> ^result <r1>)
    (<a2> -^1 <a1>)
    (<r1> ^set <r2>)
    (<c3> ^object <n2>)
    (<n2> -^handle self)
    -->
    (<r2> ^instance <i1> +)
    (<i1> ^1 <n2> +)
}



