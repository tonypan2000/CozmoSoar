sp {chunk*chunk-puzzle-impasse*apply*complete*StateNoChange*t5588-4
    :chunk
    (state <s1> ^retrieve-game jealous-husbands1 -^opponent <o*1>)
    -->
    (<s1> ^retrieve-handle action-default17 +)
}

sp {chunk*chunk-puzzle-impasse*apply*complete*StateNoChange*t5588-3
    :chunk
    (state <s1> ^retrieve-game jealous-husbands1 -^opponent <o*1>)
    -->
    (<s1> ^retrieve-handle action-default23 +)
}

sp {chunk*chunk-puzzle-impasse*apply*complete*StateNoChange*t5588-2
    :chunk
    (state <s1> ^retrieve-game jealous-husbands1 -^opponent <o*1>)
    -->
    (<s1> ^retrieve-handle failure-default33 +)
}

sp {chunk*chunk-puzzle-impasse*apply*complete*StateNoChange*t5588-1
    :chunk
    (state <s1> ^retrieve-game jealous-husbands1 -^opponent <o*1>)
    -->
    (<s1> ^retrieve-handle goal-default37 +)
}

sp {chunk*chunk-predicate-impasse*apply*complete*action*StateNoChange*t5471-1
    :chunk
    (state <s1> ^gtype goal ^retrieve-handle goal-default37)
    -->
    (<s1> ^goal <p1> +)
    (<p1> ^potential-args <p2> + ^parameter-set <p3> + ^formated predicate +
           ^primary-rtype set + ^nlp-set <l33> + ^aname goal-default37 +
           ^handle goal-default37 +)
    (<p3> ^argnum 1 +)
    (<l33> ^conditions <l1> + ^aname goal-default37 +)
    (<l1> ^rtype set + ^args <l2> + ^negative false + ^parameter <l29> +
           ^result <l31> + ^attribute prepositions + ^name on1 +
           ^type state-pair +)
    (<l2> ^num 2 + ^2 <l3> + ^1 <l18> +)
    (<l3> ^rtype single + ^args <l4> + ^negative false + ^parameter <l15> +
           ^result <l16> + ^attribute name + ^name destination1 +
           ^type attribute +)
    (<l4> ^num 1 + ^1 <l5> +)
    (<l5> ^rtype single + ^args <l6> + ^negative false + ^parameter <l12> +
           ^result <l13> + ^attribute shape + ^name bank1 + ^type attribute +)
    (<l6> ^num 1 + ^1 <l7> +)
    (<l7> ^rtype single + ^args <l8> + ^negative false + ^parameter <l9> +
           ^result <l10> + ^attribute primitive + ^name object +
           ^type attribute +)
    (<l9> ^num 0 +)
    (<l10> ^set <l11> +)
    (<l12> ^num 0 +)
    (<l13> ^set <l14> +)
    (<l15> ^num 0 +)
    (<l16> ^set <l17> +)
    (<l18> ^rtype set + ^args <l19> + ^negative false + ^parameter <l25> +
           ^result <l27> + ^attribute category + ^name block +
           ^type attribute +)
    (<l19> ^num 1 + ^1 <l20> +)
    (<l20> ^rtype single + ^args <l21> + ^negative false + ^parameter <l22> +
           ^result <l23> + ^attribute primitive + ^name object +
           ^type attribute +)
    (<l22> ^num 0 +)
    (<l23> ^set <l24> +)
    (<l25> ^num 1 + ^1 <l26> +)
    (<l26> ^param-id 1 + ^type set +)
    (<l27> ^set <l28> +)
    (<l29> ^num 1 + ^1 <l30> +)
    (<l30> ^param-id 1 + ^type set +)
    (<l31> ^set <l32> +)
}

sp {chunk*top-pair*apply*complete*t5459-1
    :chunk
    (state <s1> ^list <l1> ^world <n2>
          ^{ << action goal predicate failure heuristic >> <c5> } <a2>)
    (<l1> ^game <g1>)
    (<n2> ^predicates <p2>)
    (<p2> ^predicate <n3>)
    (<n3> ^handle <c1>)
    (<a2> ^condition <n1>)
    (<n1> ^rtype set ^negative false ^name <c1> ^type state-pair ^args <a1>
          ^parameter <p1> ^result <r2> ^attribute <c2>)
    (<a1> ^num 2 ^2 <c3> ^1 <c4>)
    (<p1> ^num 1)
    (<c3> -^rtype set)
    (<c4> ^rtype set ^result <r1>)
    (<r2> ^set <p4>)
    (<r1> ^set <p3>)
    (<p3> ^instance <i1>)
    (<i1> ^1 <i2>)
   -{ (<i2> -^<x1> <x*1>)
      (<s1> ^<a*1> <v*1>)}
   -{ (<i2> ^<elem> <e>)
     -{ (<n3> ^instance <instance1>)
        (<instance1> ^1 <e> ^2 <objb>)
        (<c3> ^result <r*2>)
        (<r*2> ^set <s*4>)
        (<s*4> ^instance <i*2>)
        (<i*2> ^1 <objb>)}}
    -->
    (<p4> ^instance <i3> +)
    (<i3> ^1 <i2> +)
}

sp {chunk*with-attribute*apply*complete*instance*objects*OpNoChange*t5453-2
    :chunk
    (state <s1> ^list <l1>
          ^{ << action goal predicate failure heuristic >> <c6> } <a2>)
    (<l1> ^game <g1>)
    (<a2> ^condition <c1>)
    (<c1> ^rtype set ^type attribute ^args <a1> ^negative <c2> ^parameter <p1>
          ^result <r1> ^name <c4> ^attribute <c5>)
    (<a1> ^1 <c3>)
    (<c3> -^rtype set ^result <r2>)
    (<r2> ^set <r3>)
    (<r3> ^instance <i3>)
    (<i3> ^1 <n1>)
    (<n1> ^predicates <p3>)
    (<r1> ^set <p2>)
    (<p2> ^instance <i1>)
    (<i1> ^2 <c4> ^3 <c5> ^1 <i2>)
    (<p3> ^<c5> <c4>)
    -->
    (<i2> ^object <n1> +)
}

sp {chunk*with-attribute*apply*complete*instance*t5453-1
    :chunk
    (state <s1> ^list <l1>
          ^{ << action goal predicate failure heuristic >> <c6> } <a2>)
    (<l1> ^game <g1>)
    (<a2> ^condition <c1>)
    (<c1> ^rtype set ^type attribute ^args <a1> ^negative <c2> ^parameter <p1>
          ^result <r1> ^name <c4> ^attribute <c5>)
    (<a1> ^1 <c3>)
    (<c3> -^rtype set)
    (<r1> ^set <p2>)
    -->
    (<p2> ^instance <i1> +)
    (<i1> ^2 <c4> + ^3 <c5> + ^1 <i2> +)
}

sp {chunk*chunk-predicate-impasse*apply*complete*action*StateNoChange*t4908-1
    :chunk
    (state <s1> ^gtype failure ^retrieve-handle failure-default33)
    -->
    (<s1> ^failure <p1> +)
    (<p1> ^potential-args <p2> + ^parameter-set <p3> + ^formated predicate +
           ^primary-rtype single + ^nlp-set <l19> + ^aname failure-default33 +
           ^handle failure-default33 +)
    (<p3> ^argnum 4 +)
    (<l19> ^conditions <l1> + ^conditions <l20> + ^conditions <l28> +
           ^conditions <l29> + ^aname failure-default33 +)
    (<l1> ^rtype single + ^args <l2> + ^negative false + ^parameter <l14> +
           ^result <l17> + ^attribute prepositions + ^name on1 +
           ^type state-pair +)
    (<l2> ^num 2 + ^2 <l3> + ^1 <l4> +)
    (<l4> ^rtype single + ^args <l5> + ^negative false + ^parameter <l11> +
           ^result <l12> + ^attribute shape + ^name man1 + ^type attribute +)
    (<l5> ^num 1 + ^1 <l6> +)
    (<l6> ^rtype single + ^args <l7> + ^negative false + ^parameter <l8> +
           ^result <l9> + ^attribute primitive + ^name object +
           ^type attribute +)
    (<l8> ^num 0 +)
    (<l9> ^set <l10> +)
    (<l11> ^num 0 +)
    (<l12> ^set <l13> +)
    (<l14> ^num 2 + ^2 <l15> + ^1 <l16> +)
    (<l15> ^param-id 2 + ^type single +)
    (<l16> ^param-id 3 + ^type single +)
    (<l17> ^set <l18> +)
    (<l20> ^rtype single + ^args <l21> + ^negative false + ^parameter <l23> +
           ^result <l26> + ^attribute prepositions + ^name on1 +
           ^type state-pair +)
    (<l21> ^num 2 + ^2 <l3> + ^1 <l22> +)
    (<l23> ^num 2 + ^2 <l24> + ^1 <l25> +)
    (<l24> ^param-id 2 + ^type single +)
    (<l25> ^param-id 1 + ^type single +)
    (<l26> ^set <l27> +)
    (<l3> ^rtype single + ^args <l31> + ^negative false + ^parameter <l37> +
           ^result <l38> + ^attribute shape + ^name bank1 + ^type attribute +)
    (<l31> ^num 1 + ^1 <l32> +)
    (<l32> ^rtype single + ^args <l33> + ^negative false + ^parameter <l34> +
           ^result <l35> + ^attribute primitive + ^name object +
           ^type attribute +)
    (<l34> ^num 0 +)
    (<l35> ^set <l36> +)
    (<l37> ^num 0 +)
    (<l38> ^set <l39> +)
    (<l28> ^rtype single + ^args <l40> + ^negative false + ^parameter <l50> +
           ^result <l53> + ^attribute predicate + ^name husband +
           ^type concept +)
    (<l22> ^rtype single + ^args <l41> + ^negative false + ^parameter <l47> +
           ^result <l48> + ^attribute shape + ^name woman1 + ^type attribute +)
    (<l41> ^num 1 + ^1 <l42> +)
    (<l42> ^rtype single + ^args <l43> + ^negative false + ^parameter <l44> +
           ^result <l45> + ^attribute primitive + ^name object +
           ^type attribute +)
    (<l44> ^num 0 +)
    (<l45> ^set <l46> +)
    (<l47> ^num 0 +)
    (<l48> ^set <l49> +)
    (<l40> ^num 1 + ^2 <l22> +)
    (<l50> ^num 2 + ^2 <l51> + ^1 <l52> +)
    (<l51> ^param-id 1 + ^type single +)
    (<l52> ^param-id 4 + ^type single +)
    (<l53> ^set <l54> +)
    (<l29> ^rtype single + ^args <l30> + ^negative true + ^parameter <l55> +
           ^result <l58> + ^attribute prepositions + ^name on1 +
           ^type state-pair +)
    (<l30> ^num 2 + ^2 <l3> + ^1 <l28> +)
    (<l55> ^num 2 + ^2 <l56> + ^1 <l57> +)
    (<l56> ^param-id 2 + ^type single +)
    (<l57> ^param-id 4 + ^type single +)
    (<l58> ^set <l59> +)
}

sp {chunk*top-pair*apply*complete*t4894-1
    :chunk
    (state <s1> ^list <l1> ^world <n2>
          ^{ << action goal predicate failure heuristic >> <c4> } <a2>)
    (<l1> ^game <g1>)
    (<n2> ^predicates <p2>)
    (<p2> ^predicate <n3>)
    (<n3> ^handle <c1>)
    (<a2> ^condition <n1>)
    (<n1> ^rtype single ^negative true ^name <c1> ^type state-pair ^args <a1>
          ^parameter <p1> ^result <r3> ^attribute <c2>)
    (<a1> ^num 2 ^2 <c3> ^1 <n4>)
    (<p1> ^num 2)
    (<c3> -^rtype set ^result <r1>)
    (<n4> -^rtype set ^result <r2>)
    (<r3> ^set <p5>)
    (<r2> ^set <p4>)
    (<p4> ^instance <i2>)
    (<i2> ^1 <n6>)
    (<r1> ^set <p3>)
    (<p3> ^instance <i1>)
    (<i1> ^1 { <> <n6> <n5> })
   -{ (<n3> ^instance <instance1>)
      (<instance1> ^2 <n5> ^1 <n6>)}
    -->
    (<p5> ^instance <i3> +)
    (<i3> ^2 <n5> + ^1 <n6> +)
}

sp {chunk*chunk-predicate-impasse*apply*complete*StateNoChange*t4885-1
    :chunk
    (state <s1> ^gtype <c1> ^<c1> <g1>)
    (<g1> ^condition <n1>)
    (<n1> ^name husband ^type concept ^attribute predicate)
    -->
    (<s1> ^predicate <p1> + ^gtype predicate +)
    (<p1> ^link <n1> + ^potential-args <p2> + ^parameter-set <p3> +
           ^formated predicate + ^primary-rtype single + ^nlp-set <l18> +
           ^aname husband + ^handle husband +)
    (<p3> ^argnum 3 +)
    (<l18> ^conditions <l1> + ^conditions <l19> + ^aname husband +)
    (<l1> ^return-type number + ^rtype single + ^args <l2> + ^negative false +
           ^parameter <l13> + ^result <l16> + ^name last-name +
           ^type attribute-of +)
    (<l2> ^num 1 + ^2 <l3> +)
    (<l3> ^rtype single + ^args <l4> + ^negative false + ^parameter <l10> +
           ^result <l11> + ^attribute shape + ^name man1 + ^type attribute +)
    (<l4> ^num 1 + ^1 <l5> +)
    (<l5> ^rtype single + ^args <l6> + ^negative false + ^parameter <l7> +
           ^result <l8> + ^attribute primitive + ^name object +
           ^type attribute +)
    (<l7> ^num 0 +)
    (<l8> ^set <l9> +)
    (<l10> ^num 0 +)
    (<l11> ^set <l12> +)
    (<l13> ^num 2 + ^2 <l14> + ^1 <l15> +)
    (<l14> ^param-id 1 + ^type single +)
    (<l15> ^param-id 3 + ^type single +)
    (<l16> ^set <l17> +)
    (<l19> ^return-type number + ^rtype single + ^args <l20> +
           ^negative false + ^parameter <l27> + ^result <l30> +
           ^name last-name + ^type attribute-of +)
    (<l20> ^num 1 + ^2 <l21> +)
    (<l21> ^rtype single + ^args <l22> + ^negative false + ^parameter <l23> +
           ^result <l25> + ^attribute input-arg + ^name object +)
    (<l23> ^num 1 + ^1 <l24> +)
    (<l24> ^param-id 2 + ^type single +)
    (<l25> ^set <l26> +)
    (<l27> ^num 2 + ^2 <l28> + ^1 <l29> +)
    (<l28> ^param-id 2 + ^type single +)
    (<l29> ^param-id 3 + ^type single +)
    (<l30> ^set <l31> +)
}

sp {chunk*attribute-of*apply*complete*t4069-1
    :chunk
    (state <s1> ^list <l1>
          ^{ << action goal predicate failure heuristic >> <c5> } <a2>)
    (<l1> ^game <g1>)
    (<a2> ^condition <n1>)
    (<n1> ^type attribute-of ^args <a1> ^parameter <p1> ^negative <c1>
          ^result <r3> ^result <r1> ^name <c2>)
    (<a1> ^num 1 ^2 <c3>)
    (<p1> ^num 2)
    (<c3> -^rtype set ^result <r2>)
    (<r3> ^set <p5>)
    (<r2> ^set <p3>)
    (<p3> ^instance <i1>)
    (<i1> ^1 <n2>)
    (<n2> ^predicates <p4>)
    (<r1> ^set <p2>)
    (<p4> ^<c2> <c4>)
    -->
    (<p5> ^instance <i2> +)
    (<i2> ^2 <n2> + ^1 <c4> +)
}

sp {chunk*chunk-predicate-impasse*apply*complete*action*StateNoChange*t3163-1
    :chunk
    (state <s1> ^gtype action ^retrieve-handle action-default23)
    -->
    (<s1> ^action <p1> +)
    (<p1> ^potential-args <p2> + ^parameter-set <p3> + ^formated predicate +
           ^primary-rtype single + ^nlp-set <l19> + ^verb-structure <l79> +
           ^aname action-default23 + ^handle action-default23 +)
    (<p3> ^argnum 5 +)
    (<l19> ^conditions <l1> + ^conditions <l20> + ^conditions <l51> +
           ^conditions <l67> + ^aname action-default23 +)
    (<l1> ^rtype single + ^args <l2> + ^negative false + ^parameter <l14> +
           ^result <l17> + ^attribute prepositions + ^name on1 +
           ^type state-pair +)
    (<l2> ^num 2 + ^2 <l3> + ^1 <l4> +)
    (<l4> ^rtype single + ^args <l5> + ^negative false + ^parameter <l11> +
           ^result <l12> + ^attribute category + ^name block +
           ^type attribute +)
    (<l5> ^num 1 + ^1 <l6> +)
    (<l6> ^rtype single + ^args <l7> + ^negative false + ^parameter <l8> +
           ^result <l9> + ^attribute primitive + ^name object +
           ^type attribute +)
    (<l8> ^num 0 +)
    (<l9> ^set <l10> +)
    (<l11> ^num 0 +)
    (<l12> ^set <l13> +)
    (<l14> ^num 2 + ^2 <l15> + ^1 <l16> +)
    (<l15> ^param-id 1 + ^type single +)
    (<l16> ^param-id 3 + ^type single +)
    (<l17> ^set <l18> +)
    (<l3> ^rtype single + ^args <l22> + ^negative false + ^parameter <l33> +
           ^result <l34> + ^attribute predicate + ^name current +
           ^type concept +)
    (<l22> ^num 1 + ^1 <l23> +)
    (<l23> ^rtype single + ^args <l24> + ^negative false + ^parameter <l30> +
           ^result <l31> + ^attribute shape + ^name bank1 + ^type attribute +)
    (<l24> ^num 1 + ^1 <l25> +)
    (<l25> ^rtype single + ^args <l26> + ^negative false + ^parameter <l27> +
           ^result <l28> + ^attribute primitive + ^name object +
           ^type attribute +)
    (<l27> ^num 0 +)
    (<l28> ^set <l29> +)
    (<l30> ^num 0 +)
    (<l31> ^set <l32> +)
    (<l33> ^num 0 +)
    (<l34> ^set <l35> +)
    (<l20> ^rtype single + ^args <l21> + ^negative false + ^parameter <l46> +
           ^result <l49> + ^attribute prepositions + ^name on1 +
           ^type state-pair +)
    (<l21> ^num 2 + ^2 <l3> + ^1 <l36> +)
    (<l36> ^rtype single + ^args <l37> + ^negative false + ^parameter <l43> +
           ^result <l44> + ^attribute category + ^name block +
           ^type attribute +)
    (<l37> ^num 1 + ^1 <l38> +)
    (<l38> ^rtype single + ^args <l39> + ^negative false + ^parameter <l40> +
           ^result <l41> + ^attribute primitive + ^name object +
           ^type attribute +)
    (<l40> ^num 0 +)
    (<l41> ^set <l42> +)
    (<l43> ^num 0 +)
    (<l44> ^set <l45> +)
    (<l46> ^num 2 + ^2 <l47> + ^1 <l48> +)
    (<l47> ^param-id 1 + ^type single +)
    (<l48> ^param-id 2 + ^type single +)
    (<l49> ^set <l50> +)
    (<l51> ^rtype single + ^args <l52> + ^negative false + ^parameter <l63> +
           ^result <l65> + ^attribute predicate + ^name opposite +
           ^type concept +)
    (<l52> ^num 1 + ^1 <l53> +)
    (<l53> ^rtype single + ^args <l54> + ^negative false + ^parameter <l60> +
           ^result <l61> + ^attribute shape + ^name bank1 + ^type attribute +)
    (<l54> ^num 1 + ^1 <l55> +)
    (<l55> ^rtype single + ^args <l56> + ^negative false + ^parameter <l57> +
           ^result <l58> + ^attribute primitive + ^name object +
           ^type attribute +)
    (<l57> ^num 0 +)
    (<l58> ^set <l59> +)
    (<l60> ^num 0 +)
    (<l61> ^set <l62> +)
    (<l63> ^num 1 + ^1 <l64> +)
    (<l64> ^param-id 5 + ^type single +)
    (<l65> ^set <l66> +)
    (<l67> ^rtype single + ^args <l68> + ^negative false + ^parameter <l74> +
           ^result <l76> + ^attribute shape + ^name boat1 + ^type attribute +)
    (<l68> ^num 1 + ^1 <l69> +)
    (<l69> ^rtype single + ^args <l70> + ^negative false + ^parameter <l71> +
           ^result <l72> + ^attribute primitive + ^name object +
           ^type attribute +)
    (<l71> ^num 0 +)
    (<l72> ^set <l73> +)
    (<l74> ^num 1 + ^1 <l75> +)
    (<l75> ^param-id 4 + ^type single +)
    (<l76> ^set <l77> +)
    (<l79> ^3 <l78> + ^2 <l80> + ^1 <l81> +)
    (<l78> ^verb-prep on1 + ^verb-name move1 + ^2 5 + ^1 2 +)
    (<l80> ^verb-prep on1 + ^verb-name move1 + ^2 5 + ^1 4 +)
    (<l81> ^verb-prep on1 + ^verb-name move1 + ^2 5 + ^1 3 +)
}

sp {chunk*chunk-predicate-impasse*apply*complete*action*StateNoChange*t2519-1
    :chunk
    (state <s1> ^gtype action ^retrieve-handle action-default17)
    -->
    (<s1> ^action <p1> +)
    (<p1> ^potential-args <p2> + ^parameter-set <p3> + ^formated predicate +
           ^primary-rtype single + ^nlp-set <l33> + ^verb-structure <l62> +
           ^aname action-default17 + ^handle action-default17 +)
    (<p3> ^argnum 4 +)
    (<l33> ^conditions <l1> + ^conditions <l34> + ^conditions <l50> +
           ^aname action-default17 +)
    (<l1> ^rtype single + ^args <l2> + ^negative false + ^parameter <l28> +
           ^result <l31> + ^attribute prepositions + ^name on1 +
           ^type state-pair +)
    (<l2> ^num 2 + ^2 <l3> + ^1 <l18> +)
    (<l3> ^rtype single + ^args <l4> + ^negative false + ^parameter <l15> +
           ^result <l16> + ^attribute predicate + ^name current +
           ^type concept +)
    (<l4> ^num 1 + ^1 <l5> +)
    (<l5> ^rtype single + ^args <l6> + ^negative false + ^parameter <l12> +
           ^result <l13> + ^attribute shape + ^name bank1 + ^type attribute +)
    (<l6> ^num 1 + ^1 <l7> +)
    (<l7> ^rtype single + ^args <l8> + ^negative false + ^parameter <l9> +
           ^result <l10> + ^attribute primitive + ^name object +
           ^type attribute +)
    (<l9> ^num 0 +)
    (<l10> ^set <l11> +)
    (<l12> ^num 0 +)
    (<l13> ^set <l14> +)
    (<l15> ^num 0 +)
    (<l16> ^set <l17> +)
    (<l18> ^rtype single + ^args <l19> + ^negative false + ^parameter <l25> +
           ^result <l26> + ^attribute category + ^name block +
           ^type attribute +)
    (<l19> ^num 1 + ^1 <l20> +)
    (<l20> ^rtype single + ^args <l21> + ^negative false + ^parameter <l22> +
           ^result <l23> + ^attribute primitive + ^name object +
           ^type attribute +)
    (<l22> ^num 0 +)
    (<l23> ^set <l24> +)
    (<l25> ^num 0 +)
    (<l26> ^set <l27> +)
    (<l28> ^num 2 + ^2 <l29> + ^1 <l30> +)
    (<l29> ^param-id 3 + ^type single +)
    (<l30> ^param-id 4 + ^type single +)
    (<l31> ^set <l32> +)
    (<l34> ^rtype single + ^args <l35> + ^negative false + ^parameter <l46> +
           ^result <l48> + ^attribute predicate + ^name opposite +
           ^type concept +)
    (<l35> ^num 1 + ^1 <l36> +)
    (<l36> ^rtype single + ^args <l37> + ^negative false + ^parameter <l43> +
           ^result <l44> + ^attribute shape + ^name bank1 + ^type attribute +)
    (<l37> ^num 1 + ^1 <l38> +)
    (<l38> ^rtype single + ^args <l39> + ^negative false + ^parameter <l40> +
           ^result <l41> + ^attribute primitive + ^name object +
           ^type attribute +)
    (<l40> ^num 0 +)
    (<l41> ^set <l42> +)
    (<l43> ^num 0 +)
    (<l44> ^set <l45> +)
    (<l46> ^num 1 + ^1 <l47> +)
    (<l47> ^param-id 2 + ^type single +)
    (<l48> ^set <l49> +)
    (<l50> ^rtype single + ^args <l51> + ^negative false + ^parameter <l57> +
           ^result <l59> + ^attribute shape + ^name boat1 + ^type attribute +)
    (<l51> ^num 1 + ^1 <l52> +)
    (<l52> ^rtype single + ^args <l53> + ^negative false + ^parameter <l54> +
           ^result <l55> + ^attribute primitive + ^name object +
           ^type attribute +)
    (<l54> ^num 0 +)
    (<l55> ^set <l56> +)
    (<l57> ^num 1 + ^1 <l58> +)
    (<l58> ^param-id 1 + ^type single +)
    (<l59> ^set <l60> +)
    (<l62> ^2 <l61> + ^1 <l63> +)
    (<l61> ^verb-prep on1 + ^verb-name move1 + ^2 2 + ^1 4 +)
    (<l63> ^verb-prep on1 + ^verb-name move1 + ^2 2 + ^1 1 +)
}

sp {chunk*top-pair*apply*complete*t2505-1
    :chunk
    (state <s1> ^list <l1> ^world <n2>
          ^{ << action goal predicate failure heuristic >> <c5> } <a2>)
    (<l1> ^game <g1>)
    (<n2> ^predicates <p2>)
    (<p2> ^predicate <n3>)
    (<n3> ^instance <n4> ^handle <c1>)
    (<n4> ^2 <n5> ^1 <n6>)
    (<a2> ^condition <n1>)
    (<n1> ^rtype single ^negative false ^name <c1> ^type state-pair ^args <a1>
          ^parameter <p1> ^result <r3> ^attribute <c2>)
    (<a1> ^num 2 ^2 <c3> ^1 <c4>)
    (<p1> ^num 2)
    (<c3> -^rtype set ^result <r1>)
    (<c4> -^rtype set ^result <r2>)
    (<r3> ^set <p5>)
    (<r2> ^set <p4>)
    (<p4> ^instance <i2>)
    (<i2> ^1 <n6>)
    (<r1> ^set <p3>)
    (<p3> ^instance <i1>)
    (<i1> ^1 <n5>)
    -->
    (<p5> ^instance <i3> +)
    (<i3> ^2 <n5> + ^1 <n6> +)
}

sp {chunk*chunk-predicate-impasse*apply*complete*StateNoChange*t2496-1
    :chunk
    (state <s1> ^gtype <c2> ^<c2> <g1>)
    (<g1> ^condition <c1>)
    (<c1> ^name opposite ^type concept ^attribute predicate)
    -->
    (<s1> ^predicate <p1> + ^gtype predicate +)
    (<p1> ^link <c1> + ^potential-args <p2> + ^parameter-set <p3> +
           ^formated predicate + ^primary-rtype single + ^nlp-set <l23> +
           ^aname opposite + ^handle opposite +)
    (<p3> ^argnum 1 +)
    (<l23> ^conditions <l1> + ^aname opposite +)
    (<l1> ^rtype single + ^args <l2> + ^negative true + ^parameter <l19> +
           ^result <l21> + ^attribute prepositions + ^name below1 +
           ^type state-pair +)
    (<l2> ^num 2 + ^2 <l3> + ^1 <l13> +)
    (<l3> ^rtype single + ^args <l4> + ^negative false + ^parameter <l10> +
           ^result <l11> + ^attribute shape + ^name boat1 + ^type attribute +)
    (<l4> ^num 1 + ^1 <l5> +)
    (<l5> ^rtype single + ^args <l6> + ^negative false + ^parameter <l7> +
           ^result <l8> + ^attribute primitive + ^name object +
           ^type attribute +)
    (<l7> ^num 0 +)
    (<l8> ^set <l9> +)
    (<l10> ^num 0 +)
    (<l11> ^set <l12> +)
    (<l13> ^rtype single + ^args <l14> + ^negative false + ^parameter <l15> +
           ^result <l17> + ^attribute input-arg + ^name object +)
    (<l15> ^num 1 + ^1 <l16> +)
    (<l16> ^param-id 1 + ^type single +)
    (<l17> ^set <l18> +)
    (<l19> ^num 1 + ^1 <l20> +)
    (<l20> ^param-id 1 + ^type single +)
    (<l21> ^set <l22> +)
}

sp {chunk*chunk-predicate-impasse*apply*complete*StateNoChange*t2486-1
    :chunk
    (state <s1> ^gtype <c2> ^<c2> <g1>)
    (<g1> ^condition <c1>)
    (<c1> ^name current ^type concept ^attribute predicate)
    -->
    (<s1> ^predicate <p1> + ^gtype predicate +)
    (<p1> ^link <c1> + ^potential-args <p2> + ^parameter-set <p3> +
           ^formated predicate + ^primary-rtype single + ^nlp-set <l23> +
           ^aname current + ^handle current +)
    (<p3> ^argnum 1 +)
    (<l23> ^conditions <l1> + ^aname current +)
    (<l1> ^rtype single + ^args <l2> + ^negative false + ^parameter <l19> +
           ^result <l21> + ^attribute prepositions + ^name below1 +
           ^type state-pair +)
    (<l2> ^num 2 + ^2 <l3> + ^1 <l13> +)
    (<l3> ^rtype single + ^args <l4> + ^negative false + ^parameter <l10> +
           ^result <l11> + ^attribute shape + ^name boat1 + ^type attribute +)
    (<l4> ^num 1 + ^1 <l5> +)
    (<l5> ^rtype single + ^args <l6> + ^negative false + ^parameter <l7> +
           ^result <l8> + ^attribute primitive + ^name object +
           ^type attribute +)
    (<l7> ^num 0 +)
    (<l8> ^set <l9> +)
    (<l10> ^num 0 +)
    (<l11> ^set <l12> +)
    (<l13> ^rtype single + ^args <l14> + ^negative false + ^parameter <l15> +
           ^result <l17> + ^attribute input-arg + ^name object +)
    (<l15> ^num 1 + ^1 <l16> +)
    (<l16> ^param-id 1 + ^type single +)
    (<l17> ^set <l18> +)
    (<l19> ^num 1 + ^1 <l20> +)
    (<l20> ^param-id 1 + ^type single +)
    (<l21> ^set <l22> +)
}

sp {chunk*top-pair*apply*complete*t1725-1
    :chunk
    (state <s1> ^list <l1> ^world <n2>
          ^{ << action goal predicate failure heuristic >> <c6> } <a2>)
    (<l1> ^game <g1>)
    (<n2> ^predicates <p2>)
    (<p2> ^predicate <n3>)
    (<n3> ^handle <c1>)
    (<a2> ^condition <n1>)
    (<n1> ^rtype single ^negative true ^name <c1> ^type state-pair ^args <a1>
          ^parameter <p1> ^result <r3> ^attribute <c2>)
    (<a1> ^num 2 ^1 <c3> ^2 <c5>)
    (<c3> -^rtype set ^result <r1>)
    (<p1> ^num { < 2 <c4> })
    (<r3> ^set <p3>)
    (<r1> ^set <r2>)
    (<r2> ^instance <i1>)
    (<i1> ^1 <n4>)
   -{ (<n3> ^instance <instance>)
      (<instance> ^1 <n4> ^2 <objb>)
      (<c5> ^result <r*2>)
      (<r*2> ^set <s*4>)
      (<s*4> ^instance <i*2>)
      (<i*2> ^1 <objb>)}
    -->
    (<p3> ^instance <i2> +)
    (<i2> ^1 <n4> +)
}

sp {chunk*top-pair*apply*complete*t1056-1
    :chunk
    (state <s1> ^list <l1> ^world <n2>
          ^{ << action goal predicate failure heuristic >> <c6> } <a2>)
    (<l1> ^game <g1>)
    (<n2> ^predicates <p2>)
    (<p2> ^predicate <n3>)
    (<n3> ^instance <n4> ^handle <c1>)
    (<n4> ^2 <n5> ^1 <n6>)
    (<a2> ^condition <n1>)
    (<n1> ^rtype single ^negative false ^name <c1> ^type state-pair ^args <a1>
          ^parameter <p1> ^result <r4> ^attribute <c2>)
    (<a1> ^num 2 ^2 <c3> ^1 <c4>)
    (<c3> -^rtype set ^result <r1>)
    (<c4> -^rtype set ^result <r2>)
    (<p1> ^num { < 2 <c5> })
    (<r4> ^set <p4>)
    (<r2> ^set <r3>)
    (<r3> ^instance <i2>)
    (<i2> ^1 <n6>)
    (<r1> ^set <p3>)
    (<p3> ^instance <i1>)
    (<i1> ^1 <n5>)
    -->
    (<p4> ^instance <i3> +)
    (<i3> ^1 <n6> +)
}

sp {chunk*with-attribute*apply*complete*instance*t1050-1
    :chunk
    (state <s1> ^list <l1>
          ^{ << action goal predicate failure heuristic >> <c7> } <a2>)
    (<l1> ^game <g1>)
    (<a2> ^condition <c1>)
    (<c1> ^rtype single ^type attribute ^args <a1> ^negative <c2>
          ^parameter <p1> ^result <r2> ^name <c4> ^attribute <c5>)
    (<p1> ^num { < 2 <c6> })
    (<a1> ^1 <c3>)
    (<r2> ^set <p4>)
    (<c3> ^result <r1>)
    (<r1> ^set <p2>)
    (<p2> ^instance <i1>)
    (<i1> ^1 <n1>)
    (<n1> ^predicates <p3>)
    (<p3> ^<c5> <c4>)
    -->
    (<p4> ^instance <i2> +)
    (<i2> ^1 <n1> +)
}

sp {chunk*with-attribute*apply*complete*instance*t1044-1
    :chunk
    (state <s1> ^list <l1> ^world <n1>
          ^{ << action goal predicate failure heuristic >> <c4> } <a3>)
    (<l1> ^game <g1>)
    (<n1> ^objects <c3>)
    (<a3> ^condition <c1>)
    (<c1> ^rtype single ^name object ^type attribute ^attribute primitive
          ^args <a2> ^negative <c2> ^parameter <p1> ^result <r1>)
    (<a2> -^1 <a1>)
    (<r1> ^set <p2>)
    (<c3> ^object <n2>)
    (<n2> -^handle self)
    -->
    (<p2> ^instance <i1> +)
    (<i1> ^1 <n2> +)
}



