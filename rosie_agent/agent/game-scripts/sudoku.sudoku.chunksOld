sp {chunk*chunk-puzzle-impasse*apply*complete*StateNoChange*t6983-6
    :chunk
    (state <s1> ^retrieve-game mini-sudoku1 -^opponent <o*1>)
    -->
    (<s1> ^retrieve-handle action-default12 +)
}

sp {chunk*chunk-puzzle-impasse*apply*complete*StateNoChange*t6983-5
    :chunk
    (state <s1> ^retrieve-game mini-sudoku1 -^opponent <o*1>)
    -->
    (<s1> ^retrieve-handle failure-default20 +)
}

sp {chunk*chunk-puzzle-impasse*apply*complete*StateNoChange*t6983-4
    :chunk
    (state <s1> ^retrieve-game mini-sudoku1 -^opponent <o*1>)
    -->
    (<s1> ^retrieve-handle failure-default23 +)
}

sp {chunk*chunk-puzzle-impasse*apply*complete*StateNoChange*t6983-3
    :chunk
    (state <s1> ^retrieve-game mini-sudoku1 -^opponent <o*1>)
    -->
    (<s1> ^retrieve-handle failure-default28 +)
}

sp {chunk*chunk-puzzle-impasse*apply*complete*StateNoChange*t6983-2
    :chunk
    (state <s1> ^retrieve-game mini-sudoku1 -^opponent <o*1>)
    -->
    (<s1> ^retrieve-handle goal-default36 +)
}

sp {chunk*chunk-puzzle-impasse*apply*complete*start-search-depth*StateNoChange*t6983-1
    :chunk
    (state <s1> ^retrieve-game mini-sudoku1 -^opponent <o*1>)
    -->
    (<s1> ^start-search-depth 4 +)
}

sp {chunk*chunk-predicate-impasse*apply*complete*action*StateNoChange*t6863-1
    :chunk
    (state <s1> ^gtype goal ^retrieve-handle goal-default36)
    -->
    (<s1> ^goal <p1> +)
    (<p1> ^potential-args <p2> + ^parameter-set <p3> + ^formated predicate +
           ^primary-rtype set + ^nlp-set <l18> + ^aname goal-default36 +
           ^handle goal-default36 +)
    (<p3> ^argnum 1 +)
    (<l18> ^conditions <l1> + ^aname goal-default36 +)
    (<l1> ^rtype set + ^args <l2> + ^negative false + ^parameter <l14> +
           ^result <l16> + ^attribute predicate + ^name filled +
           ^type concept +)
    (<l2> ^num 1 + ^1 <l3> +)
    (<l3> ^rtype set + ^args <l4> + ^negative false + ^parameter <l10> +
           ^result <l12> + ^attribute category + ^name location +
           ^type attribute +)
    (<l4> ^num 1 + ^1 <l5> +)
    (<l5> ^rtype single + ^args <l6> + ^negative false + ^parameter <l7> +
           ^result <l8> + ^attribute primitive + ^name object +
           ^type attribute +)
    (<l7> ^num 0 +)
    (<l8> ^set <l9> +)
    (<l10> ^num 1 + ^1 <l11> +)
    (<l11> ^param-id 1 + ^type set +)
    (<l12> ^set <l13> +)
    (<l14> ^num 1 + ^1 <l15> +)
    (<l15> ^param-id 1 + ^type set +)
    (<l16> ^set <l17> +)
}

sp {chunk*with-attribute*apply*complete*instance*objects*OpNoChange*t6851-2
    :chunk
    (state <s1> ^list <l1>
          ^{ << action goal predicate failure heuristic >> <c6> } <a2>)
    (<l1> ^game <g1>)
    (<a2> ^condition <c1>)
    (<c1> ^rtype set ^type attribute ^args <a1> ^negative <c2> ^parameter <p1>
          ^result <r1> ^name <c4> ^attribute <c5>)
    (<a1> ^1 <c3>)
    (<c3> -^rtype set ^result <r2>)
    (<r2> ^set <r3>)
    (<r3> ^instance <i3>)
    (<i3> ^1 <n1>)
    (<n1> ^predicates <p3>)
    (<r1> ^set <p2>)
    (<p2> ^instance <i1>)
    (<i1> ^2 <c4> ^3 <c5> ^1 <i2>)
    (<p3> ^<c5> <c4>)
    -->
    (<i2> ^object <n1> +)
}

sp {chunk*with-attribute*apply*complete*instance*t6851-1
    :chunk
    (state <s1> ^list <l1>
          ^{ << action goal predicate failure heuristic >> <c6> } <a2>)
    (<l1> ^game <g1>)
    (<a2> ^condition <c1>)
    (<c1> ^rtype set ^type attribute ^args <a1> ^negative <c2> ^parameter <p1>
          ^result <r1> ^name <c4> ^attribute <c5>)
    (<a1> ^1 <c3>)
    (<c3> -^rtype set)
    (<r1> ^set <p2>)
    -->
    (<p2> ^instance <i1> +)
    (<i1> ^2 <c4> + ^3 <c5> + ^1 <i2> +)
}

sp {chunk*chunk-predicate-impasse*apply*complete*StateNoChange*t6842-1
    :chunk
    (state <s1> ^gtype <c1> ^<c1> <g1>)
    (<g1> ^condition <n1>)
    (<n1> ^name filled ^type concept ^attribute predicate)
    -->
    (<s1> ^predicate <p1> + ^gtype predicate +)
    (<p1> ^link <n1> + ^potential-args <p2> + ^parameter-set <p3> +
           ^formated predicate + ^primary-rtype single + ^nlp-set <l1> +
           ^aname filled + ^handle filled +)
    (<p3> ^argnum 2 +)
    (<l1> ^conditions <l2> + ^conditions <l3> + ^aname filled +)
    (<l2> ^return-type number + ^rtype single + ^args <l10> +
           ^negative false + ^parameter <l17> + ^result <l20> + ^name value +
           ^type attribute-of +)
    (<l10> ^num 1 + ^2 <l11> +)
    (<l11> ^rtype single + ^args <l12> + ^negative false + ^parameter <l13> +
           ^result <l15> + ^attribute input-arg + ^name object +)
    (<l13> ^num 1 + ^1 <l14> +)
    (<l14> ^param-id 1 + ^type single +)
    (<l15> ^set <l16> +)
    (<l17> ^num 2 + ^2 <l18> + ^1 <l19> +)
    (<l18> ^param-id 1 + ^type single +)
    (<l19> ^param-id 2 + ^type single +)
    (<l20> ^set <l21> +)
    (<l3> ^return-type number + ^function soar-greater + ^rtype single +
           ^args <l4> + ^negative false + ^parameter <l22> + ^result <l24> +
           ^name greater + ^type function +)
    (<l4> ^num 2 + ^2 <l5> + ^1 <l2> +)
    (<l5> ^return-type number + ^rtype single + ^args <l4> + ^negative false +
           ^parameter <l6> + ^result <l9> + ^name number +)
    (<l6> ^num 0 +)
    (<l9> ^set <l8> +)
    (<l8> ^instance <l7> +)
    (<l7> ^1 0 +)
    (<l22> ^num 1 + ^1 <l23> +)
    (<l23> ^param-id 2 + ^type single +)
    (<l24> ^set <l25> +)
}

sp {chunk*soar-compare*greater*OpNoChange*t6478-1
    :chunk
    (state <s1> ^list <l1>
          ^{ << action goal predicate failure heuristic >> <c5> } <a2>)
    (<l1> ^game <g1>)
    (<a2> ^condition <n1>)
    (<n1> ^function soar-greater ^type function ^args <a1> ^parameter <p1>
          ^negative <c1> ^result <r3> ^name <c2>)
    (<a1> ^num 2 ^2 <f1> ^1 <n2>)
    (<p1> ^num 1)
    (<r3> ^set <p3>)
    (<n2> ^result <r2>)
    (<r2> ^set <p2>)
    (<p2> ^instance <i3>)
    (<i3> ^1 <c4>)
    (<f1> ^result <r1>)
    (<r1> ^set <i1>)
    (<i1> ^instance <i2>)
    (<i2> ^1 { < <c4> <c3> })
    -->
    (<p3> ^instance <i4> +)
    (<i4> ^1 <c4> +)
}

sp {chunk*chunk-predicate-impasse*apply*complete*action*StateNoChange*t5718-1
    :chunk
    (state <s1> ^gtype failure ^retrieve-handle failure-default28)
    -->
    (<s1> ^failure <p1> +)
    (<p1> ^potential-args <p2> + ^parameter-set <p3> + ^formated predicate +
           ^primary-rtype single + ^nlp-set <l9> + ^aname failure-default28 +
           ^handle failure-default28 +)
    (<p3> ^argnum 4 +)
    (<l9> ^conditions <l1> + ^conditions <l10> + ^conditions <l18> +
           ^conditions <l34> + ^aname failure-default28 +)
    (<l1> ^return-type number + ^rtype single + ^args <l2> + ^negative false +
           ^parameter <l4> + ^result <l7> + ^name value + ^type attribute-of +)
    (<l2> ^num 1 + ^2 <l3> +)
    (<l4> ^num 2 + ^2 <l5> + ^1 <l6> +)
    (<l5> ^param-id 1 + ^type single +)
    (<l6> ^param-id 3 + ^type single +)
    (<l7> ^set <l8> +)
    (<l10> ^return-type number + ^rtype single + ^args <l11> +
           ^negative false + ^parameter <l13> + ^result <l16> +
           ^name section + ^type attribute-of +)
    (<l11> ^num 1 + ^2 <l12> +)
    (<l13> ^num 2 + ^2 <l14> + ^1 <l15> +)
    (<l14> ^param-id 2 + ^type single +)
    (<l15> ^param-id 4 + ^type single +)
    (<l16> ^set <l17> +)
    (<l12> ^rtype single + ^args <l20> + ^negative false + ^parameter <l26> +
           ^result <l27> + ^attribute category + ^name location +
           ^type attribute +)
    (<l20> ^num 1 + ^1 <l21> +)
    (<l21> ^rtype single + ^args <l22> + ^negative false + ^parameter <l23> +
           ^result <l24> + ^attribute primitive + ^name object +
           ^type attribute +)
    (<l23> ^num 0 +)
    (<l24> ^set <l25> +)
    (<l26> ^num 0 +)
    (<l27> ^set <l28> +)
    (<l18> ^return-type number + ^rtype single + ^args <l19> +
           ^negative false + ^parameter <l29> + ^result <l32> + ^name value +
           ^type attribute-of +)
    (<l19> ^num 1 + ^2 <l12> +)
    (<l29> ^num 2 + ^2 <l30> + ^1 <l31> +)
    (<l30> ^param-id 2 + ^type single +)
    (<l31> ^param-id 3 + ^type single +)
    (<l32> ^set <l33> +)
    (<l3> ^rtype single + ^args <l36> + ^negative false + ^parameter <l42> +
           ^result <l43> + ^attribute category + ^name location +
           ^type attribute +)
    (<l36> ^num 1 + ^1 <l37> +)
    (<l37> ^rtype single + ^args <l38> + ^negative false + ^parameter <l39> +
           ^result <l40> + ^attribute primitive + ^name object +
           ^type attribute +)
    (<l39> ^num 0 +)
    (<l40> ^set <l41> +)
    (<l42> ^num 0 +)
    (<l43> ^set <l44> +)
    (<l34> ^return-type number + ^rtype single + ^args <l35> +
           ^negative false + ^parameter <l45> + ^result <l48> +
           ^name section + ^type attribute-of +)
    (<l35> ^num 1 + ^2 <l3> +)
    (<l45> ^num 2 + ^2 <l46> + ^1 <l47> +)
    (<l46> ^param-id 1 + ^type single +)
    (<l47> ^param-id 4 + ^type single +)
    (<l48> ^set <l49> +)
}

sp {chunk*chunk-predicate-impasse*apply*complete*action*StateNoChange*t4286-1
    :chunk
    (state <s1> ^gtype failure ^retrieve-handle failure-default23)
    -->
    (<s1> ^failure <p1> +)
    (<p1> ^potential-args <p2> + ^parameter-set <p3> + ^formated predicate +
           ^primary-rtype single + ^nlp-set <l9> + ^aname failure-default23 +
           ^handle failure-default23 +)
    (<p3> ^argnum 4 +)
    (<l9> ^conditions <l1> + ^conditions <l10> + ^conditions <l26> +
           ^conditions <l34> + ^aname failure-default23 +)
    (<l1> ^return-type number + ^rtype single + ^args <l2> + ^negative false +
           ^parameter <l4> + ^result <l7> + ^name value + ^type attribute-of +)
    (<l2> ^num 1 + ^2 <l3> +)
    (<l4> ^num 2 + ^2 <l5> + ^1 <l6> +)
    (<l5> ^param-id 1 + ^type single +)
    (<l6> ^param-id 3 + ^type single +)
    (<l7> ^set <l8> +)
    (<l3> ^rtype single + ^args <l12> + ^negative false + ^parameter <l18> +
           ^result <l19> + ^attribute category + ^name location +
           ^type attribute +)
    (<l12> ^num 1 + ^1 <l13> +)
    (<l13> ^rtype single + ^args <l14> + ^negative false + ^parameter <l15> +
           ^result <l16> + ^attribute primitive + ^name object +
           ^type attribute +)
    (<l15> ^num 0 +)
    (<l16> ^set <l17> +)
    (<l18> ^num 0 +)
    (<l19> ^set <l20> +)
    (<l10> ^return-type number + ^rtype single + ^args <l11> +
           ^negative false + ^parameter <l21> + ^result <l24> + ^name column +
           ^type attribute-of +)
    (<l11> ^num 1 + ^2 <l3> +)
    (<l21> ^num 2 + ^2 <l22> + ^1 <l23> +)
    (<l22> ^param-id 1 + ^type single +)
    (<l23> ^param-id 4 + ^type single +)
    (<l24> ^set <l25> +)
    (<l26> ^return-type number + ^rtype single + ^args <l27> +
           ^negative false + ^parameter <l29> + ^result <l32> + ^name value +
           ^type attribute-of +)
    (<l27> ^num 1 + ^2 <l28> +)
    (<l29> ^num 2 + ^2 <l30> + ^1 <l31> +)
    (<l30> ^param-id 2 + ^type single +)
    (<l31> ^param-id 3 + ^type single +)
    (<l32> ^set <l33> +)
    (<l28> ^rtype single + ^args <l36> + ^negative false + ^parameter <l42> +
           ^result <l43> + ^attribute category + ^name location +
           ^type attribute +)
    (<l36> ^num 1 + ^1 <l37> +)
    (<l37> ^rtype single + ^args <l38> + ^negative false + ^parameter <l39> +
           ^result <l40> + ^attribute primitive + ^name object +
           ^type attribute +)
    (<l39> ^num 0 +)
    (<l40> ^set <l41> +)
    (<l42> ^num 0 +)
    (<l43> ^set <l44> +)
    (<l34> ^return-type number + ^rtype single + ^args <l35> +
           ^negative false + ^parameter <l45> + ^result <l48> + ^name column +
           ^type attribute-of +)
    (<l35> ^num 1 + ^2 <l28> +)
    (<l45> ^num 2 + ^2 <l46> + ^1 <l47> +)
    (<l46> ^param-id 2 + ^type single +)
    (<l47> ^param-id 4 + ^type single +)
    (<l48> ^set <l49> +)
}

sp {chunk*chunk-predicate-impasse*apply*complete*action*StateNoChange*t3499-1
    :chunk
    (state <s1> ^gtype failure ^retrieve-handle failure-default20)
    -->
    (<s1> ^failure <p1> +)
    (<p1> ^potential-args <p2> + ^parameter-set <p3> + ^formated predicate +
           ^primary-rtype single + ^nlp-set <l9> + ^aname failure-default20 +
           ^handle failure-default20 +)
    (<p3> ^argnum 4 +)
    (<l9> ^conditions <l1> + ^conditions <l10> + ^conditions <l18> +
           ^conditions <l34> + ^aname failure-default20 +)
    (<l1> ^return-type number + ^rtype single + ^args <l2> + ^negative false +
           ^parameter <l4> + ^result <l7> + ^name row + ^type attribute-of +)
    (<l2> ^num 1 + ^2 <l3> +)
    (<l4> ^num 2 + ^2 <l5> + ^1 <l6> +)
    (<l5> ^param-id 1 + ^type single +)
    (<l6> ^param-id 3 + ^type single +)
    (<l7> ^set <l8> +)
    (<l10> ^return-type number + ^rtype single + ^args <l11> +
           ^negative false + ^parameter <l13> + ^result <l16> + ^name row +
           ^type attribute-of +)
    (<l11> ^num 1 + ^2 <l12> +)
    (<l13> ^num 2 + ^2 <l14> + ^1 <l15> +)
    (<l14> ^param-id 2 + ^type single +)
    (<l15> ^param-id 3 + ^type single +)
    (<l16> ^set <l17> +)
    (<l3> ^rtype single + ^args <l20> + ^negative false + ^parameter <l26> +
           ^result <l27> + ^attribute category + ^name location +
           ^type attribute +)
    (<l20> ^num 1 + ^1 <l21> +)
    (<l21> ^rtype single + ^args <l22> + ^negative false + ^parameter <l23> +
           ^result <l24> + ^attribute primitive + ^name object +
           ^type attribute +)
    (<l23> ^num 0 +)
    (<l24> ^set <l25> +)
    (<l26> ^num 0 +)
    (<l27> ^set <l28> +)
    (<l18> ^return-type number + ^rtype single + ^args <l19> +
           ^negative false + ^parameter <l29> + ^result <l32> + ^name value +
           ^type attribute-of +)
    (<l19> ^num 1 + ^2 <l3> +)
    (<l29> ^num 2 + ^2 <l30> + ^1 <l31> +)
    (<l30> ^param-id 1 + ^type single +)
    (<l31> ^param-id 4 + ^type single +)
    (<l32> ^set <l33> +)
    (<l12> ^rtype single + ^args <l36> + ^negative false + ^parameter <l42> +
           ^result <l43> + ^attribute category + ^name location +
           ^type attribute +)
    (<l36> ^num 1 + ^1 <l37> +)
    (<l37> ^rtype single + ^args <l38> + ^negative false + ^parameter <l39> +
           ^result <l40> + ^attribute primitive + ^name object +
           ^type attribute +)
    (<l39> ^num 0 +)
    (<l40> ^set <l41> +)
    (<l42> ^num 0 +)
    (<l43> ^set <l44> +)
    (<l34> ^return-type number + ^rtype single + ^args <l35> +
           ^negative false + ^parameter <l45> + ^result <l48> + ^name value +
           ^type attribute-of +)
    (<l35> ^num 1 + ^2 <l12> +)
    (<l45> ^num 2 + ^2 <l46> + ^1 <l47> +)
    (<l46> ^param-id 2 + ^type single +)
    (<l47> ^param-id 4 + ^type single +)
    (<l48> ^set <l49> +)
}

sp {chunk*attribute-of*apply*complete*t3485-1
    :chunk
    (state <s1> ^list <l1>
          ^{ << action goal predicate failure heuristic >> <c5> } <a2>)
    (<l1> ^game <g1>)
    (<a2> ^condition <n1>)
    (<n1> ^type attribute-of ^args <a1> ^parameter <p1> ^negative <c1>
          ^result <r3> ^result <r1> ^name <c2>)
    (<a1> ^num 1 ^2 <c3>)
    (<p1> ^num 2)
    (<c3> -^rtype set ^result <r2>)
    (<r3> ^set <p5>)
    (<r2> ^set <p3>)
    (<p3> ^instance <i1>)
    (<i1> ^1 <n2>)
    (<n2> ^predicates <p4>)
    (<r1> ^set <p2>)
    (<p4> ^<c2> <c4>)
    -->
    (<p5> ^instance <i2> +)
    (<i2> ^2 <n2> + ^1 <c4> +)
}

sp {chunk*chunk-predicate-impasse*apply*complete*action*StateNoChange*t1785-1
    :chunk
    (state <s1> ^gtype action ^retrieve-handle action-default12)
    -->
    (<s1> ^action <p1> +)
    (<p1> ^potential-args <p2> + ^parameter-set <p3> + ^formated predicate +
           ^primary-rtype single + ^nlp-set <l21> + ^verb-structure <l39> +
           ^aname action-default12 + ^handle action-default12 +)
    (<p3> ^argnum 4 +)
    (<l21> ^conditions <l1> + ^conditions <l22> + ^aname action-default12 +)
    (<l1> ^return-type number + ^function numeric-between + ^rtype single +
           ^args <l2> + ^negative false + ^parameter <l15> + ^result <l19> +
           ^name between + ^type function +)
    (<l2> ^num 2 + ^3 <l3> + ^2 <l9> +)
    (<l3> ^return-type number + ^rtype single + ^args <l2> + ^negative false +
           ^parameter <l4> + ^result <l8> + ^name number +)
    (<l4> ^num 1 + ^1 <l5> +)
    (<l5> ^param-id 4 + ^type single +)
    (<l8> ^set <l7> +)
    (<l7> ^instance <l6> +)
    (<l6> ^1 4 +)
    (<l9> ^return-type number + ^rtype single + ^args <l2> + ^negative false +
           ^parameter <l10> + ^result <l14> + ^name number +)
    (<l10> ^num 1 + ^1 <l11> +)
    (<l11> ^param-id 3 + ^type single +)
    (<l14> ^set <l13> +)
    (<l13> ^instance <l12> +)
    (<l12> ^1 0 +)
    (<l15> ^num 3 + ^3 <l16> + ^2 <l17> + ^1 <l18> +)
    (<l16> ^param-id 4 + ^type single +)
    (<l17> ^param-id 3 + ^type single +)
    (<l18> ^param-id 2 + ^type single +)
    (<l19> ^set <l20> +)
    (<l22> ^rtype single + ^args <l23> + ^negative false + ^parameter <l34> +
           ^result <l36> + ^attribute predicate + ^name empty +
           ^type concept +)
    (<l23> ^num 1 + ^1 <l24> +)
    (<l24> ^rtype single + ^args <l25> + ^negative false + ^parameter <l31> +
           ^result <l32> + ^attribute category + ^name location +
           ^type attribute +)
    (<l25> ^num 1 + ^1 <l26> +)
    (<l26> ^rtype single + ^args <l27> + ^negative false + ^parameter <l28> +
           ^result <l29> + ^attribute primitive + ^name object +
           ^type attribute +)
    (<l28> ^num 0 +)
    (<l29> ^set <l30> +)
    (<l31> ^num 0 +)
    (<l32> ^set <l33> +)
    (<l34> ^num 1 + ^1 <l35> +)
    (<l35> ^param-id 1 + ^type single +)
    (<l36> ^set <l37> +)
    (<l39> ^1 <l38> +)
    (<l38> ^verb-prep on1 + ^verb-name write1 + ^2 1 + ^1 2 +)
}

sp {chunk*numeric-between*elaborate*instances*diagonal*single*OpNoChange*t1771-1
    :chunk
    (state <s1> ^integer-list <i1> ^list <l1>
          ^{ << action goal predicate failure heuristic >> <c5> } <a2>)
    (<i1> ^number <c2>)
    (<l1> ^game <g1>)
    (<a2> ^condition <n1>)
    (<n1> ^function numeric-between ^rtype single ^name between ^type function
          ^args <a1> ^negative <c1> ^parameter <p1> ^result <r3>)
    (<a1> ^2 <p3> ^3 <p2>)
    (<r3> ^set <p4>)
    (<p3> ^result <r2>)
    (<r2> ^set <i4>)
    (<i4> ^instance <i5>)
    (<i5> ^1 { < <c2> <c4> })
    (<p2> ^result <r1>)
    (<r1> ^set <i2>)
    (<i2> ^instance <i3>)
    (<i3> ^1 { >= <c2> <c3> })
    -->
    (<p4> ^instance <i6> +)
    (<i6> ^2 <c4> + ^3 <c3> + ^1 <c2> +)
}

sp {chunk*with-attribute*apply*complete*instance*t1766-1
    :chunk
    (state <s1> ^list <l1> ^world <n1>
          ^{ << action goal predicate failure heuristic >> <c4> } <a3>)
    (<l1> ^game <g1>)
    (<n1> ^objects <c3>)
    (<a3> ^condition <c1>)
    (<c1> ^rtype single ^name object ^type attribute ^attribute primitive
          ^args <a2> ^negative <c2> ^parameter <p1> ^result <r1>)
    (<a2> -^1 <a1>)
    (<r1> ^set <r2>)
    (<c3> ^object <n2>)
    (<n2> -^handle self)
    -->
    (<r2> ^instance <i1> +)
    (<i1> ^1 <n2> +)
}

sp {chunk*chunk-predicate-impasse*apply*complete*StateNoChange*t1757-1
    :chunk
    (state <s1> ^gtype <c2> ^<c2> <g1>)
    (<g1> ^condition <c1>)
    (<c1> ^name empty ^type concept ^attribute predicate)
    -->
    (<s1> ^predicate <p1> + ^gtype predicate +)
    (<p1> ^link <c1> + ^potential-args <p2> + ^parameter-set <p3> +
           ^formated predicate + ^primary-rtype single + ^nlp-set <l13> +
           ^aname empty + ^handle empty +)
    (<p3> ^argnum 1 +)
    (<l13> ^conditions <l1> + ^aname empty +)
    (<l1> ^rtype single + ^args <l2> + ^negative false + ^parameter <l9> +
           ^result <l11> + ^attribute color + ^name black1 + ^type attribute +)
    (<l2> ^num 1 + ^1 <l3> +)
    (<l3> ^rtype single + ^args <l4> + ^negative false + ^parameter <l5> +
           ^result <l7> + ^attribute input-arg + ^name object +)
    (<l5> ^num 1 + ^1 <l6> +)
    (<l6> ^param-id 1 + ^type single +)
    (<l7> ^set <l8> +)
    (<l9> ^num 1 + ^1 <l10> +)
    (<l10> ^param-id 1 + ^type single +)
    (<l11> ^set <l12> +)
}

sp {chunk*with-attribute*apply*complete*instance*t1066-1
    :chunk
    (state <s1> ^list <l1>
          ^{ << action goal predicate failure heuristic >> <c6> } <a2>)
    (<l1> ^game <g1>)
    (<a2> ^condition <n1>)
    (<n1> ^rtype single ^type attribute ^args <a1> ^negative <c1>
          ^parameter <p1> ^result <r3> ^name <c3> ^attribute <c4>)
    (<p1> ^num { < 2 <c5> })
    (<a1> ^1 <c2>)
    (<r3> ^set <p3>)
    (<c2> ^result <r1>)
    (<r1> ^set <r2>)
    (<r2> ^instance <i1>)
    (<i1> ^1 <n2>)
    (<n2> ^predicates <p2>)
    (<p2> ^<c4> <c3>)
    -->
    (<p3> ^instance <i2> +)
    (<i2> ^1 <n2> +)
}



