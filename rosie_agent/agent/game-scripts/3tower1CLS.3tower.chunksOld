sp {chunk*chunk-puzzle-impasse*apply*complete*StateNoChange*t3233-2
    :chunk
    (state <s1> ^retrieve-game tower-of-hanoi-31 -^opponent <o*1>)
    -->
    (<s1> ^retrieve-handle action-default22 +)
}

sp {chunk*chunk-puzzle-impasse*apply*complete*StateNoChange*t3233-1
    :chunk
    (state <s1> ^retrieve-game tower-of-hanoi-31 -^opponent <o*1>)
    -->
    (<s1> ^retrieve-handle goal-default28 +)
}

sp {chunk*chunk-predicate-impasse*apply*complete*action*StateNoChange*t3122-1
    :chunk
    (state <s1> ^gtype goal ^retrieve-handle goal-default28)
    -->
    (<s1> ^goal <p1> +)
    (<p1> ^potential-args <p2> + ^parameter-set <p3> + ^formated predicate +
           ^primary-rtype single + ^nlp-set <l24> + ^aname goal-default28 +
           ^handle goal-default28 +)
    (<p3> ^argnum 3 +)
    (<l24> ^conditions <l1> + ^conditions <l25> + ^conditions <l47> +
           ^aname goal-default28 +)
    (<l1> ^rtype single + ^args <l2> + ^negative false + ^parameter <l19> +
           ^result <l22> + ^attribute prepositions + ^name on1 +
           ^type state-pair +)
    (<l2> ^num 2 + ^2 <l3> + ^1 <l4> +)
    (<l4> ^rtype single + ^args <l5> + ^negative false + ^parameter <l16> +
           ^result <l17> + ^attribute size + ^name small1 + ^type attribute +)
    (<l5> ^num 1 + ^1 <l6> +)
    (<l6> ^rtype single + ^args <l7> + ^negative false + ^parameter <l13> +
           ^result <l14> + ^attribute category + ^name block +
           ^type attribute +)
    (<l7> ^num 1 + ^1 <l8> +)
    (<l8> ^rtype single + ^args <l9> + ^negative false + ^parameter <l10> +
           ^result <l11> + ^attribute primitive + ^name object +
           ^type attribute +)
    (<l10> ^num 0 +)
    (<l11> ^set <l12> +)
    (<l13> ^num 0 +)
    (<l14> ^set <l15> +)
    (<l16> ^num 0 +)
    (<l17> ^set <l18> +)
    (<l19> ^num 2 + ^2 <l20> + ^1 <l21> +)
    (<l20> ^param-id 2 + ^type single +)
    (<l21> ^param-id 1 + ^type single +)
    (<l22> ^set <l23> +)
    (<l3> ^rtype single + ^args <l28> + ^negative false + ^parameter <l39> +
           ^result <l40> + ^attribute size + ^name medium1 + ^type attribute +)
    (<l28> ^num 1 + ^1 <l29> +)
    (<l29> ^rtype single + ^args <l30> + ^negative false + ^parameter <l36> +
           ^result <l37> + ^attribute category + ^name block +
           ^type attribute +)
    (<l30> ^num 1 + ^1 <l31> +)
    (<l31> ^rtype single + ^args <l32> + ^negative false + ^parameter <l33> +
           ^result <l34> + ^attribute primitive + ^name object +
           ^type attribute +)
    (<l33> ^num 0 +)
    (<l34> ^set <l35> +)
    (<l36> ^num 0 +)
    (<l37> ^set <l38> +)
    (<l39> ^num 0 +)
    (<l40> ^set <l41> +)
    (<l25> ^rtype single + ^args <l26> + ^negative false + ^parameter <l42> +
           ^result <l45> + ^attribute prepositions + ^name on1 +
           ^type state-pair +)
    (<l26> ^num 2 + ^2 <l27> + ^1 <l3> +)
    (<l42> ^num 2 + ^2 <l43> + ^1 <l44> +)
    (<l43> ^param-id 3 + ^type single +)
    (<l44> ^param-id 2 + ^type single +)
    (<l45> ^set <l46> +)
    (<l27> ^rtype single + ^args <l64> + ^negative false + ^parameter <l75> +
           ^result <l76> + ^attribute size + ^name large1 + ^type attribute +)
    (<l64> ^num 1 + ^1 <l65> +)
    (<l65> ^rtype single + ^args <l66> + ^negative false + ^parameter <l72> +
           ^result <l73> + ^attribute category + ^name block +
           ^type attribute +)
    (<l66> ^num 1 + ^1 <l67> +)
    (<l67> ^rtype single + ^args <l68> + ^negative false + ^parameter <l69> +
           ^result <l70> + ^attribute primitive + ^name object +
           ^type attribute +)
    (<l69> ^num 0 +)
    (<l70> ^set <l71> +)
    (<l72> ^num 0 +)
    (<l73> ^set <l74> +)
    (<l75> ^num 0 +)
    (<l76> ^set <l77> +)
    (<l47> ^rtype single + ^args <l48> + ^negative false + ^parameter <l78> +
           ^result <l80> + ^attribute prepositions + ^name on1 +
           ^type state-pair +)
    (<l48> ^num 2 + ^2 <l49> + ^1 <l27> +)
    (<l49> ^rtype single + ^args <l50> + ^negative false + ^parameter <l61> +
           ^result <l62> + ^attribute color + ^name blue1 + ^type attribute +)
    (<l50> ^num 1 + ^1 <l51> +)
    (<l51> ^rtype single + ^args <l52> + ^negative false + ^parameter <l58> +
           ^result <l59> + ^attribute category + ^name location +
           ^type attribute +)
    (<l52> ^num 1 + ^1 <l53> +)
    (<l53> ^rtype single + ^args <l54> + ^negative false + ^parameter <l55> +
           ^result <l56> + ^attribute primitive + ^name object +
           ^type attribute +)
    (<l55> ^num 0 +)
    (<l56> ^set <l57> +)
    (<l58> ^num 0 +)
    (<l59> ^set <l60> +)
    (<l61> ^num 0 +)
    (<l62> ^set <l63> +)
    (<l78> ^num 1 + ^1 <l79> +)
    (<l79> ^param-id 3 + ^type single +)
    (<l80> ^set <l81> +)
}

sp {chunk*top-pair*apply*complete*t3110-1
    :chunk
    (state <s1> ^list <l1> ^world <n2>
          ^{ << action goal predicate failure heuristic >> <c6> } <a2>)
    (<l1> ^game <g1>)
    (<n2> ^predicates <p2>)
    (<p2> ^predicate <n3>)
    (<n3> ^instance <n4> ^handle <c1>)
    (<n4> ^2 <n5> ^1 <n6>)
    (<a2> ^condition <n1>)
    (<n1> ^rtype single ^negative false ^name <c1> ^type state-pair ^args <a1>
          ^parameter <p1> ^result <r3> ^attribute <c2>)
    (<a1> ^num 2 ^2 <c3> ^1 <c4>)
    (<c3> -^rtype set ^result <r1>)
    (<c4> -^rtype set ^result <r2>)
    (<p1> ^num { < 2 <c5> })
    (<r3> ^set <p5>)
    (<r2> ^set <p4>)
    (<p4> ^instance <i2>)
    (<i2> ^1 <n6>)
    (<r1> ^set <p3>)
    (<p3> ^instance <i1>)
    (<i1> ^1 <n5>)
    -->
    (<p5> ^instance <i3> +)
    (<i3> ^1 <n6> +)
}

sp {chunk*top-pair*apply*complete*t3104-1
    :chunk
    (state <s1> ^list <l1> ^world <n2>
          ^{ << action goal predicate failure heuristic >> <c5> } <a2>)
    (<l1> ^game <g1>)
    (<n2> ^predicates <p2>)
    (<p2> ^predicate <n3>)
    (<n3> ^instance <n4> ^handle <c1>)
    (<n4> ^2 <n5> ^1 <n6>)
    (<a2> ^condition <n1>)
    (<n1> ^rtype single ^negative false ^name <c1> ^type state-pair ^args <a1>
          ^parameter <p1> ^result <r3> ^attribute <c2>)
    (<a1> ^num 2 ^2 <c3> ^1 <c4>)
    (<p1> ^num 2)
    (<c3> -^rtype set ^result <r1>)
    (<c4> -^rtype set ^result <r2>)
    (<r3> ^set <p5>)
    (<r2> ^set <p4>)
    (<p4> ^instance <i2>)
    (<i2> ^1 <n6>)
    (<r1> ^set <p3>)
    (<p3> ^instance <i1>)
    (<i1> ^1 <n5>)
    -->
    (<p5> ^instance <i3> +)
    (<i3> ^2 <n5> + ^1 <n6> +)
}

sp {chunk*chunk-predicate-impasse*apply*complete*action*StateNoChange*t2152-1
    :chunk
    (state <s1> ^gtype action ^retrieve-handle action-default22)
    -->
    (<s1> ^action <p1> +)
    (<p1> ^potential-args <p2> + ^parameter-set <p3> + ^formated predicate +
           ^primary-rtype single + ^nlp-set <l33> + ^verb-structure <l35> +
           ^aname action-default22 + ^handle action-default22 +)
    (<p3> ^argnum 2 +)
    (<l33> ^conditions <l1> + ^aname action-default22 +)
    (<l1> ^rtype single + ^args <l2> + ^negative false + ^parameter <l28> +
           ^result <l31> + ^attribute predicate + ^name larger +
           ^type concept +)
    (<l2> ^num 2 + ^2 <l3> + ^1 <l18> +)
    (<l3> ^rtype single + ^args <l4> + ^negative false + ^parameter <l15> +
           ^result <l16> + ^attribute predicate + ^name clear +
           ^type concept +)
    (<l4> ^num 1 + ^1 <l5> +)
    (<l5> ^rtype single + ^args <l6> + ^negative false + ^parameter <l12> +
           ^result <l13> + ^attribute category + ^name block +
           ^type attribute +)
    (<l6> ^num 1 + ^1 <l7> +)
    (<l7> ^rtype single + ^args <l8> + ^negative false + ^parameter <l9> +
           ^result <l10> + ^attribute primitive + ^name object +
           ^type attribute +)
    (<l9> ^num 0 +)
    (<l10> ^set <l11> +)
    (<l12> ^num 0 +)
    (<l13> ^set <l14> +)
    (<l15> ^num 0 +)
    (<l16> ^set <l17> +)
    (<l18> ^rtype single + ^args <l19> + ^negative false + ^parameter <l25> +
           ^result <l26> + ^attribute predicate + ^name clear +
           ^type concept +)
    (<l19> ^num 1 + ^1 <l20> +)
    (<l20> ^rtype single + ^args <l21> + ^negative false + ^parameter <l22> +
           ^result <l23> + ^attribute primitive + ^name object +
           ^type attribute +)
    (<l22> ^num 0 +)
    (<l23> ^set <l24> +)
    (<l25> ^num 0 +)
    (<l26> ^set <l27> +)
    (<l28> ^num 2 + ^2 <l29> + ^1 <l30> +)
    (<l29> ^param-id 1 + ^type single +)
    (<l30> ^param-id 2 + ^type single +)
    (<l31> ^set <l32> +)
    (<l35> ^1 <l34> +)
    (<l34> ^verb-prep on1 + ^verb-name move1 + ^2 2 + ^1 1 +)
}

sp {chunk*with-attribute*apply*complete*instance*t2138-1
    :chunk
    (state <s1> ^list <l1>
          ^{ << action goal predicate failure heuristic >> <c7> } <a2>)
    (<l1> ^game <g1>)
    (<a2> ^condition <c1>)
    (<c1> ^rtype single ^type attribute ^args <a1> ^negative <c2>
          ^parameter <p1> ^result <r3> ^name <c4> ^attribute <c5>)
    (<p1> ^num { < 2 <c6> })
    (<a1> ^1 <c3>)
    (<r3> ^set <p3>)
    (<c3> ^result <r1>)
    (<r1> ^set <r2>)
    (<r2> ^instance <i1>)
    (<i1> ^1 <n1>)
    (<n1> ^predicates <p2>)
    (<p2> ^<c5> <c4>)
    -->
    (<p3> ^instance <i2> +)
    (<i2> ^1 <n1> +)
}

sp {chunk*chunk-predicate-impasse*apply*complete*StateNoChange*t2129-1
    :chunk
    (state <s1> ^gtype <c1> ^<c1> <g1>)
    (<g1> ^condition <n1>)
    (<n1> ^name larger ^type concept ^attribute predicate)
    -->
    (<s1> ^predicate <p1> + ^gtype predicate +)
    (<p1> ^link <n1> + ^potential-args <p2> + ^parameter-set <p3> +
           ^formated predicate + ^primary-rtype single + ^nlp-set <l1> +
           ^aname larger + ^handle larger +)
    (<p3> ^argnum 4 +)
    (<l1> ^conditions <l2> + ^conditions <l3> + ^conditions <l4> +
           ^aname larger +)
    (<l3> ^return-type number + ^rtype single + ^args <l6> + ^negative false +
           ^parameter <l13> + ^result <l16> + ^name volume +
           ^type attribute-of +)
    (<l6> ^num 1 + ^2 <l7> +)
    (<l7> ^rtype single + ^args <l8> + ^negative false + ^parameter <l9> +
           ^result <l11> + ^attribute input-arg + ^name object +)
    (<l9> ^num 1 + ^1 <l10> +)
    (<l10> ^param-id 2 + ^type single +)
    (<l11> ^set <l12> +)
    (<l13> ^num 2 + ^2 <l14> + ^1 <l15> +)
    (<l14> ^param-id 2 + ^type single +)
    (<l15> ^param-id 4 + ^type single +)
    (<l16> ^set <l17> +)
    (<l2> ^return-type number + ^rtype single + ^args <l18> +
           ^negative false + ^parameter <l25> + ^result <l28> + ^name volume +
           ^type attribute-of +)
    (<l18> ^num 1 + ^2 <l19> +)
    (<l19> ^rtype single + ^args <l20> + ^negative false + ^parameter <l21> +
           ^result <l23> + ^attribute input-arg + ^name object +)
    (<l21> ^num 1 + ^1 <l22> +)
    (<l22> ^param-id 1 + ^type single +)
    (<l23> ^set <l24> +)
    (<l25> ^num 2 + ^2 <l26> + ^1 <l27> +)
    (<l26> ^param-id 1 + ^type single +)
    (<l27> ^param-id 3 + ^type single +)
    (<l28> ^set <l29> +)
    (<l4> ^function soar-greater + ^return-type number + ^rtype single +
           ^args <l5> + ^negative false + ^parameter <l30> + ^result <l33> +
           ^name greater + ^type function +)
    (<l5> ^num 2 + ^2 <l3> + ^1 <l2> +)
    (<l30> ^num 2 + ^2 <l31> + ^1 <l32> +)
    (<l31> ^param-id 4 + ^type single +)
    (<l32> ^param-id 3 + ^type single +)
    (<l33> ^set <l34> +)
}

sp {chunk*chunk-predicate-impasse*apply*complete*StateNoChange*t2119-1
    :chunk
    (state <s1> ^gtype <c2> ^<c2> <g1>)
    (<g1> ^condition <c1>)
    (<c1> ^name clear ^type concept ^attribute predicate)
    -->
    (<s1> ^predicate <p1> + ^gtype predicate +)
    (<p1> ^link <c1> + ^potential-args <p2> + ^parameter-set <p3> +
           ^formated predicate + ^primary-rtype single + ^nlp-set <l18> +
           ^aname clear + ^handle clear +)
    (<p3> ^argnum 1 +)
    (<l18> ^conditions <l1> + ^aname clear +)
    (<l1> ^rtype single + ^args <l2> + ^negative true + ^parameter <l14> +
           ^result <l16> + ^attribute prepositions + ^name below1 +
           ^type state-pair +)
    (<l2> ^num 2 + ^2 <l3> + ^1 <l8> +)
    (<l3> ^rtype single + ^args <l4> + ^negative false + ^parameter <l5> +
           ^result <l6> + ^attribute primitive + ^name object +
           ^type attribute +)
    (<l5> ^num 0 +)
    (<l6> ^set <l7> +)
    (<l8> ^rtype single + ^args <l9> + ^negative false + ^parameter <l10> +
           ^result <l12> + ^attribute input-arg + ^name object +)
    (<l10> ^num 1 + ^1 <l11> +)
    (<l11> ^param-id 1 + ^type single +)
    (<l12> ^set <l13> +)
    (<l14> ^num 1 + ^1 <l15> +)
    (<l15> ^param-id 1 + ^type single +)
    (<l16> ^set <l17> +)
}

sp {chunk*soar-compare*greater*param-2*OpNoChange*t1739-1
    :chunk
    (state <s1> ^list <l1>
          ^{ << action goal predicate failure heuristic >> <c5> } <a2>)
    (<l1> ^game <g1>)
    (<a2> ^condition <n1>)
    (<n1> ^function soar-greater ^type function ^args <a1> ^parameter <p1>
          ^negative <c1> ^result <r3> ^name <c2>)
    (<a1> ^num 2 ^2 <n2> ^1 <n3>)
    (<p1> ^num 2)
    (<r3> ^set <p4>)
    (<n3> ^result <r2>)
    (<r2> ^set <p3>)
    (<p3> ^instance <i2>)
    (<i2> ^1 <c4>)
    (<n2> ^result <r1>)
    (<r1> ^set <p2>)
    (<p2> ^instance <i1>)
    (<i1> ^1 { < <c4> <c3> })
    -->
    (<p4> ^instance <i3> +)
    (<i3> ^1 <c4> + ^2 <c3> +)
}

sp {chunk*attribute-of*apply*complete*t1734-1
    :chunk
    (state <s1> ^list <l1>
          ^{ << action goal predicate failure heuristic >> <c5> } <a2>)
    (<l1> ^game <g1>)
    (<a2> ^condition <n1>)
    (<n1> ^type attribute-of ^args <a1> ^parameter <p1> ^negative <c1>
          ^result <r4> ^result <r1> ^name <c2>)
    (<a1> ^num 1 ^2 <c3>)
    (<p1> ^num 2)
    (<c3> -^rtype set ^result <r2>)
    (<r4> ^set <p4>)
    (<r2> ^set <r3>)
    (<r3> ^instance <i1>)
    (<i1> ^1 <n2>)
    (<n2> ^predicates <p3>)
    (<r1> ^set <p2>)
    (<p3> ^<c2> <c4>)
    -->
    (<p4> ^instance <i2> +)
    (<i2> ^2 <n2> + ^1 <c4> +)
}

sp {chunk*top-pair*apply*complete*t946-1
    :chunk
    (state <s1> ^list <l1> ^world <n2>
          ^{ << action goal predicate failure heuristic >> <c6> } <a2>)
    (<l1> ^game <g1>)
    (<n2> ^predicates <p2>)
    (<p2> ^predicate <n3>)
    (<n3> ^handle <c1>)
    (<a2> ^condition <n1>)
    (<n1> ^rtype single ^negative true ^name <c1> ^type state-pair ^args <a1>
          ^parameter <p1> ^result <r3> ^attribute <c2>)
    (<a1> ^num 2 ^1 <c3> ^2 <c5>)
    (<c3> -^rtype set ^result <r1>)
    (<p1> ^num { < 2 <c4> })
    (<r3> ^set <p3>)
    (<r1> ^set <r2>)
    (<r2> ^instance <i1>)
    (<i1> ^1 <n4>)
   -{ (<n3> ^instance <instance>)
      (<instance> ^1 <n4> ^2 <objb>)
      (<c5> ^result <r*2>)
      (<r*2> ^set <s*4>)
      (<s*4> ^instance <i*2>)
      (<i*2> ^1 <objb>)}
    -->
    (<p3> ^instance <i2> +)
    (<i2> ^1 <n4> +)
}

sp {chunk*with-attribute*apply*complete*instance*t940-1
    :chunk
    (state <s1> ^list <l1> ^world <n1>
          ^{ << action goal predicate failure heuristic >> <c4> } <a3>)
    (<l1> ^game <g1>)
    (<n1> ^objects <c3>)
    (<a3> ^condition <c1>)
    (<c1> ^rtype single ^name object ^type attribute ^attribute primitive
          ^args <a2> ^negative <c2> ^parameter <p1> ^result <r1>)
    (<a2> -^1 <a1>)
    (<r1> ^set <p2>)
    (<c3> ^object <n2>)
    (<n2> -^handle self)
    -->
    (<p2> ^instance <i1> +)
    (<i1> ^1 <n2> +)
}



