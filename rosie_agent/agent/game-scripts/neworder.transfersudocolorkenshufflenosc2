the name of the puzzle is mini-sudoku.
load init-mini-sudoku2.
ok.
you can write a number that is between zero and four onto an empty location.
if the value of a location is absent then the location is empty.
the solution has four steps.
load fail-mini-sudoku.
if two of the locations are matching and they have the same row then you lose.
ok.
if the locations have the same value then they are matching.
if two of the locations are matching and they have the same column then you lose.
ok.
if two of the locations are matching and they have the same section then you lose.
ok.
load final-mini-sudoku.
the goal is that all locations are filled.
ok.
if the value of a location is more than zero then the location is filled.
done.
load init-mini-sudoku2.
yes.
the name of the puzzle is ken-ken.
load init-color-ken.
ok.
you can write a number that is between zero and four onto an empty location.
the solution has four steps.
load fail-color-ken2.
if two of the locations are matching and they have the same row then you lose.
ok.
if two of the locations are matching and they have the same column then you lose.
ok.
load final-color-ken.
the goal is that all locations are filled.
ok.
load fail-color-ken.
if the locations in a group are filled and the sum of the values of the group is not ten then you lose.
ok.
if the blocks have the same color then they are in a group.
done.
load init-color-ken.
yes.
the name of the puzzle is shuffle.
load init-shuffle.
ok.
you can write a number that is between zero and nine onto an empty location.
the solution has three steps.
load fail-shuffle.
if the value of a green location is the value of another green location then you lose.
ok.
load final-shuffle.
the goal is that all locations are filled.
ok.
load fail-shuffle.
if the green locations in a stack are filled and the sum of the values of the stack is not the value of a location that is below the stack then you lose.
ok.
if the blocks have the same column then they are in a stack.
if a block is blue and the column of the block is the column of a location then the block is below the location.
if the green locations in a line are filled and the sum of the values of the line is not the value of a location that is next to the line then you lose.
ok.
if the blocks have the same row then they are in a line.
if a block is blue and the row of the block is the row of a location then the block is next to the location.
done.
load init-shuffle.
yes.
