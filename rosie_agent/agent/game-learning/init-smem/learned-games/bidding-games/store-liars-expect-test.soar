sp {topstate*elaborate*liars-dice-expectation
   (state <s> ^superstate nil)
-->
   (<s> ^current-game <cg> 
        ^prepositions <F7>
        ^heuristics <heu>
        ^distributions <dibs>
        ^integers <int>
        ^object <o1> ^object <o2>
         ^object <o3> ^object <o4>
         ^object <o1b> 
         ^object <o2b>
#         ^object <o3b> ^object <o4b>
#         ^object <o5> ^object <o6> 
         ^object <o7>
         ^object <o8> ^object <o9>
         ^object <o10> ^object <o11>
#         ^object <o12> ^object <o13>
#         ^object <o14> 
         ^object <o15>
         ^object <o16>
        )
    (<dibs> ^1 <dib1>)
    (<dib1> ^name dice ^value any ^dist 0.166666)
    
#    (<heu> ^1 <heu1>) #do to opponent or not?
# (<heu> ^preference <pref> ^test <t>)
# (<pref> ^1 <pref1> ^2 <pref2> ^num 2)
# (<pref1> ^name stack-block)
# (<pref2> ^name stack-block)
# (<t> ^1 <t1> ^2 <t2> ^function soar-less)
# (<t1> ^args.4 holder)
# (<t2> ^args.4 holder)
# 
   (<int> ^number 1 2 3 4 5 6 7 8 9 10 11)# 12 13 14 15 16 17 28 19 20)
   (<cg> ^game <g> ^name liars-expect-test ^action <T5> ^multiplayer false ^learning <lll>)
    (<lll> ^action-number 1 ^verb-num 1 ^type verb)
   (<g> ^actions <a> ^name liars-expect-test)
   (<a> ^1 <tcn>)
   
 (<F7> ^prep <p200>)
   (<p200> ^name below ^pair <p31>
         ^pair <p32> ^pair <p33>
         ^pair <p34> ^pair <p35>)
   (<p31> ^1 1 ^2 6)
   (<p32> ^1 2 ^2 6)
   (<p33> ^1 3 ^2 6)
   (<p34> ^1 4 ^2 6)
   (<p35> ^1 5 ^2 6)
   
 
   (<o1> ^id 1 ^category block ^word dice ^value 1 ^word ace)
   (<o2> ^id 2 ^category block ^word dice ^value 2 ^word two)
   (<o3> ^id 3 ^category block ^word dice ^value 2 ^word two)
   (<o4> ^id 4 ^category block ^word dice ^value 2 ^word two)
   (<o1b> ^id 5 ^category block ^word dice ^value 4 ^word five)
   (<o2b> ^id 6 ^category block ^word cup)
#   (<o3b> ^id 7 ^category block ^word red ^value 7)
#   (<o4b> ^id 8 ^category block ^word red ^value 8)
#   (<o5> ^id 9  ^category block ^word red ^value 9)
#   (<o6> ^id 10 ^category block ^word red ^value 10)
   (<o7> ^id 11 ^category block ^word dice ^word hidden) 
   (<o8> ^id 12 ^category block ^word dice ^word hidden) 
   (<o9> ^id 13 ^category block ^word dice ^word hidden) 
   (<o10> ^id 14 ^category block ^word dice ^word hidden)
   (<o11> ^id 15 ^category block ^word dice ^word hidden)
#   (<o12> ^id 16 ^category block ^word black ^value 6)
#   (<o13> ^id 17 ^category block ^word black ^value 7)
#   (<o14> ^id 18 ^category block ^word black ^value 8)
   (<o15> ^id 19 ^category block ^word red ^bid 3) #num-bid
   (<o16> ^id 20 ^category block ^word black ^bid 2) #face-bid



(<T5> ^nlp-set <nlps>)
(<nlps> ^nlp <cs>
           ^aname stack-block)
 
   (<cs> ^name add ^return-type number ^args <ag> ^parameter <p3z>)
   (<p3z> ^1 <p1> ^2 <pa2> ^3 <pa3>)
   (<p1> ^param-id 4 ^type single)
   (<pa2> ^param-id 1 ^type single)
   (<pa3> ^param-id 3 ^type single)
   (<ag> ^2 <crs> ^3 <c6>)
   
   (<crs> ^name count ^return-type number ^args <ag34> ^parameter <ppp>)
   (<ppp> ^1 <p22> ^2 <p21>)
   (<p21> ^param-id 6 ^type set)
   (<p22> ^param-id 1 ^type single)
   (<ag34> ^2 <cys>)
   
   (<cys> ^name has-attribute ^args <ayg> ^parameter <py3z>)
   (<py3z> ^1 <py2> ^2 <py1>)
   (<py1> ^param-id 5 ^type single)
   (<py2> ^param-id 6 ^type set)
   (<ayg> ^2 <cqs> ^1 <c6a>)
   
   (<cqs> ^name value ^return-type number ^args <aqg> ^parameter <pq3z>)
   (<pq3z> ^1 <pq1>)
   (<pq1> ^param-id 5 ^type single)
   (<aqg> ^2 <cs1>)
   
   (<c6a> ^name dice ^args <ag33> ^type attribute)
   (<ag33> ^1 <c555a>)
   
   (<c555a> ^name block ^rtype single)
   
   (<cs1> ^name below ^args <ag1>)
   (<ag1> ^1 <c555a> ^2 <c8a>)
   
    (<c8a> ^name cup ^args <ag88> ^type attribute)
   (<ag88> ^1 <c555a>)
   
   (<c6> ^name multiply ^return-type number ^args <ag11> ^parameter <p3z7>)
   (<p3z7> ^1 <p11> ^2 <p11a>)
   (<p11> ^param-id 3 ^type single)
   (<p11a> ^param-id 2 ^type single)
   (<ag11> ^2 <c7> ^3 <c5>)
   (<c5> ^name number ^args <ag11zz> ^rtype single ^result.set.pair <pa22> ^return-type number)
   (<pa22> ^1 0.16666666)
   
   (<c7> ^name count ^return-type number ^args <ag5> ^parameter <p37>)
   (<p37> ^1 <p12>)
   (<p12> ^param-id 2 ^type single)
   (<ag5> ^2 <c3>)
   (<c3> ^name hidden ^type attribute ^args <ag9> ^rtype set)
   (<ag9> ^1 <c555a>)
}

sp {chunk-multi*justification-2605*t125-1
    :chunk
    (state <s1> ^gtype action ^list <l1> ^action <a1>)
    (<l1> ^game <g1>)
    (<a1> ^condition <c1>)
    (<c1> ^negative false ^name multiply ^args <a2> ^parameter <p1>
          ^result <r1>)
    (<a2> ^num 2 ^3 <*1> ^2 <*3>)
    (<p1> ^num 2 ^2 <*2> ^1 { <*4> <> <*2> })
    (<r1> ^set <s2>)
    (<*3> ^result <r2>)
    (<r2> ^set <s3>)
    (<s3> ^pair <p2>)
    (<p2> ^1 <val2>)
    (<*1> ^result <r3>)
    (<r3> ^set <s4>)
    (<s4> ^pair <p3>)
    (<p3> ^1 <val1>)
    -->
    (<s2> ^pair <p4> +)
    (<p4> ^1 (* <val1> <val2>) + ^2 <val2> +)
}

#sp {chunk-multi*justification-747*onc*t102-2
#    :chunk
#    (state <s1> ^gtype action ^list <l1> ^action <a1>)
#    (<l1> ^game <g1>)
#    (<a1> ^condition <c1>)
#    (<c1> ^rtype set ^negative false ^name hidden ^args <a2> ^parameter <p1>
#          ^result <r2>)
#    (<a2> ^num 1 ^1 <*1>)
#    (<*1> -^rtype set ^result <r1>)
#    (<r1> ^set <s2>)
#    (<s2> ^pair <p2>)
#    (<p2> ^1 <*2>)
#    (<*2> ^word hidden)
#    (<r2> ^set <s3>)
#    (<s3> ^pair <p3>)
#    (<p3> ^1 <*3>)
#    -->
#    (<*3> ^object <*2> +)
#}
#
#sp {chunk-multi*justification-740*t102-1
#    :chunk
#    (state <s1> ^gtype action ^list <l1> ^action <a1>)
#    (<l1> ^game <g1>)
#    (<a1> ^condition <c1>)
#    (<c1> ^rtype set ^negative false ^name hidden ^args <a2> ^parameter <p1>
#          ^result <r1>)
#    (<a2> ^num 1 ^1 <*1>)
#    (<r1> ^set <s2>)
#    -->
#    (<s2> ^pair <p2> +)
#    (<p2> ^1 <*2> +)
#}


sp {chunk-multi*justification-808*t110-1
    :chunk
    (state <s1> ^gtype action ^list <l1> ^action <a1>)
    (<l1> ^game <g1>)
    (<a1> ^condition <c1>)
    (<c1> ^negative false ^name add ^args <a2> ^parameter <p1> ^result <r1>)
    (<a2> ^num 2 ^3 <*1> ^2 <*2>)
    (<p1> ^num 3)
    (<r1> ^set <s2>)
    (<*2> ^result <r2>)
    (<r2> ^set <s3>)
    (<s3> ^pair <p2>)
    (<p2> ^1 <v3>)
    (<*1> ^result <r3>)
    (<r3> ^set <s4>)
    (<s4> ^pair <p3>)
    (<p3> ^1 <v1>)
    -->
    (<s2> ^pair <p4> +)
    (<p4> ^1 (+ <v1> <v3>) + ^3 <v1> + ^2 <v3> +)
}
sp {chunk-multi*justification-2614*onc*t132-1
    :chunk
    (state <s1> ^gtype action ^list <l1> ^action <a1>)
    (<l1> ^game <g1>)
    (<a1> ^condition <c1>)
    (<c1> ^negative false ^name add ^args <a2> ^parameter <p1> ^result <r3>)
    (<a2> ^num 2 ^3 <*1> ^2 <*2>)
    (<p1> ^num 1)
    (<*2> ^result <r1>)
    (<r1> ^set <s2>)
    (<s2> ^pair <p2>)
    (<p2> ^1 <val5>)
    (<*1> ^result <r2>)
    (<r2> ^set <s3>)
    (<s3> ^pair <p3>)
    (<p3> ^1 <val1>)
    (<r3> ^set <s4>)
    -->
    (<s4> ^pair <p4> +)
    (<p4> ^1 (+ <val1> <val5>) +)
}

sp {chunk-multi*justification-715*t94-1
    :chunk
    (state <s1> ^gtype action ^list <l1> ^action <a1>)
    (<l1> ^game <g1>)
    (<a1> ^condition <c1>)
    (<c1> ^negative false ^name count ^args <a2> ^parameter <p1> ^result <r1>)
    (<a2> ^num 1 ^2 <*1>)
    (<p1> ^num 2)
    (<*1> ^rtype set ^result <r2>)
    (<r1> ^set <s2>)
    (<r2> ^set <s3>)
    (<s3> ^pair <p2>)
    (<p2> ^1 <*2>)
   -{(state <s1>)
     (<*2> -^<something>)}
    -->
    (<s2> ^pair <p3> +)
    (<p3> ^1 (size <*2>) + ^2 <*2> +)
}
sp {chunk-multi*justification-2576*t117-1
    :chunk
    (state <s1> ^gtype action ^list <l1> ^action <a1>)
    (<l1> ^game <g1>)
    (<a1> ^condition <c1>)
    (<c1> ^negative false ^name count ^args <a2> ^parameter <p1> ^result <r1>)
    (<a2> ^num 1 ^2 <*1>)
    (<p1> ^num 1)
    (<*1> ^rtype set ^result <r2>)
    (<r1> ^set <s2>)
    (<r2> ^set <s3>)
    (<s3> ^pair <p2>)
    (<p2> ^1 <*2>)
   -{(state <s1>)
     (<*2> -^<something>)}
    -->
    (<s2> ^pair <p3> +)
    (<p3> ^1 (size <*2>) +)
}


sp {chunk-multi*justification-677*onc*t109-2
    :chunk
    (state <s1> ^gtype action ^list <l1> ^action <a1>)
    (<l1> ^game <g1>)
    (<a1> ^condition <c1>)
    (<c1> ^negative false ^name has-attribute ^args <a2> ^parameter <p1>
          ^result <r3>)
    (<a2> ^num 2 ^2 <*2> ^1 <*3>)
    (<p1> ^1 <*1>)
    (<*1> ^type set)
    (<*3> ^result <r1>)
    (<r1> ^set <s2>)
    (<s2> ^pair <p2>)
    (<p2> ^1 <*4>)
    (<*4> ^value <value>)
    (<*2> ^result <r2>)
    (<r2> ^set <s3>)
    (<s3> ^pair <p3>)
    (<p3> ^1 <value>)
    (<r3> ^set <s4>)
    (<s4> ^pair <p5>)
    (<p5> ^2 <value> ^1 <*5>)
    -->
    (<*5> ^object <*4> +)
}

sp {chunk-multi*justification-654*t109-1
    :chunk
    (state <s1> ^gtype action ^list <l1> ^action <a1>)
    (<l1> ^game <g1>)
    (<a1> ^condition <c1>)
    (<c1> ^negative false ^name has-attribute ^args <a2> ^parameter <p1>
          ^result <r1>)
    (<a2> ^num 2 ^2 <*2>)
    (<p1> ^1 <*1>)
    (<*1> ^type set)
    (<r1> ^set <s2>)
    (<*2> ^result <r2>)
    (<r2> ^set <s3>)
    (<s3> ^pair <p2>)
    (<p2> ^1 <value>)
    -->
    (<s2> ^pair <p3> +)
    (<p3> ^2 <value> + ^1 <*3> +)
}

#sp {chunk-multi*justification-601*onc*t101-2
#    :chunk
#    (state <s1> ^gtype action ^list <l1> ^action <a1>)
#    (<l1> ^game <g1>)
#    (<a1> ^condition <c1>)
#    (<c1> ^rtype set ^negative false ^name hidden ^args <a2> ^parameter <p1>
#          ^result <r2>)
#    (<a2> ^num 1 ^1 <*1>)
#    (<*1> -^rtype set ^result <r1>)
#    (<r1> ^set <s2>)
#    (<s2> ^pair <p2>)
#    (<p2> ^1 <*2>)
#    (<*2> ^word hidden)
#    (<r2> ^set <s3>)
#    (<s3> ^pair <p3>)
#    (<p3> ^1 <*3>)
#    -->
#    (<*3> ^object <*2> +)
#}
#
#sp {chunk-multi*justification-594*t101-1
#    :chunk
#    (state <s1> ^gtype action ^list <l1> ^action <a1>)
#    (<l1> ^game <g1>)
#    (<a1> ^condition <c1>)
#    (<c1> ^rtype set ^negative false ^name hidden ^args <a2> ^parameter <p1>
#          ^result <r1>)
#    (<a2> ^num 1 ^1 <*1>)
#    (<r1> ^set <s2>)
#    -->
#    (<s2> ^pair <p2> +)
#    (<p2> ^1 <*2> +)
#}

sp {chunk-multi*justification-549*onc*t93-1
    :chunk
    (state <s1> ^gtype action ^list <l1> ^action <a1>)
    (<l1> ^game <g1>)
    (<a1> ^condition <c1>)
    (<c1> ^negative false ^name value ^args <a2> ^parameter <p1> ^result <r2>)
    (<a2> ^num 1 ^2 <*1>)
    (<p1> ^num 1)
    (<*1> ^result <r1>)
    (<r1> ^set <s2>)
    (<s2> ^pair <p2>)
    (<p2> ^1 <*2>)
    (<*2> ^value <value>)
    (<r2> ^set <s3>)
    -->
    (<s3> ^pair <p3> +)
    (<p3> ^1 <value> +)
}

#sp {chunk-multi*justification-504*t86-1
#    :chunk
#    (state <s1> ^gtype action ^list <l1> ^action <a1>)
#    (<l1> ^game <g1>)
#    (<a1> ^condition <c1>)
#    (<c1> ^negative false ^name dice ^args <a2> ^parameter <p1> ^result <r1>)
#    (<a2> ^num 1 ^1 <*1>)
#    (<*1> -^rtype set ^result <r2>)
#    (<r1> ^set <s2>)
#    (<r2> ^set <s3>)
#    (<s3> ^pair <p2>)
#    (<p2> ^1 <*2>)
#    (<*2> ^word dice)
#    -->
#    (<s2> ^pair <p3> +)
#    (<p3> ^1 <*2> +)
#}
#
#sp {chunk-multi*justification-479*t78-1
#    :chunk
#    (state <s1> ^gtype action ^list <l1> ^action <a1> ^prepositions <p2>)
#    (<l1> ^game <g1>)
#    (<a1> ^condition <c1>)
#    (<c1> ^negative false ^name below ^args <a2> ^parameter <p1> ^result <r3>)
#    (<a2> ^num 2 ^2 <*2> ^1 <*4>)
#   -{ (<p1> ^1 <*1>)
#      (<*1> ^type set)}
#    (<p1> ^num 0)
#    (<p2> ^prep <p3>)
#    (<p3> ^name below ^pair <p4>)
#    (<p4> ^2 <*3> ^1 <*5>)
#    (<*4> ^result <r1>)
#    (<r1> ^set <s2>)
#    (<s2> ^pair <p5>)
#    (<p5> ^1 <*5>)
#    (<*2> ^result <r2>)
#    (<r2> ^set <s3>)
#    (<s3> ^pair <p6>)
#    (<p6> ^1 <*3>)
#    (<r3> ^set <s4>)
#    -->
#    (<s4> ^pair <p7> +)
#    (<p7> ^1 <*5> +)
#}
#
#sp {chunk-multi*justification-469*t68-1
#    :chunk
#    (state <s1> ^gtype action ^list <l1> ^action <a1>)
#    (<l1> ^game <g1>)
#    (<a1> ^condition <c1>)
#    (<c1> ^negative false ^name cup ^args <a2> ^parameter <p1> ^result <r1>)
#    (<a2> ^num 1 ^1 <*1>)
#    (<*1> -^rtype set ^result <r2>)
#    (<r1> ^set <s2>)
#    (<r2> ^set <s3>)
#    (<s3> ^pair <p2>)
#    (<p2> ^1 <*2>)
#    (<*2> ^word cup)
#    -->
#    (<s2> ^pair <p3> +)
#    (<p3> ^1 <*2> +)
#}
#
#sp {chunk-multi*justification-412*t60-1
#    :chunk
#    (state <s1> ^gtype action ^list <l1> ^action <a1>)
#    (<l1> ^game <g1>)
#    (<a1> ^condition <c1>)
#    (<c1> ^negative false ^name block ^args <a2> ^parameter <p1> ^result <r1>)
#    (<a2> ^num 1 ^1 <*1>)
#    (<*1> -^rtype set ^result <r2>)
#    (<r1> ^set <s2>)
#    (<r2> ^set <s3>)
#    (<s3> ^pair <p2>)
#    (<p2> ^1 <*2>)
#    (<*2> ^type block)
#    -->
#    (<s2> ^pair <p3> +)
#    (<p3> ^1 <*2> +)
#}
#
#sp {chunk-multi*justification-355*t52-1
#    :chunk
#    (state <s1> ^gtype action ^list <l1> ^objects <o1> ^action <a1>)
#    (<l1> ^game <g1>)
#    (<a1> ^condition <c1>)
#    (<c1> ^negative false ^name object ^args <a2> ^parameter <p1> ^result <r1>)
#    (<r1> ^set <s2>)
#    (<o1> ^object <o2>)
#    -->
#    (<s2> ^pair <p2> +)
#    (<p2> ^1 <o2> +)
#}