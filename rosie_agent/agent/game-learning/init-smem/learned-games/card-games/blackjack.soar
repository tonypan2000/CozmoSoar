sp {topstate*elaborate*blackjack
   (state <s> ^superstate nil)
-->
   (<s> ^current-game <cg> 
        ^prepositions <F7> ^successive <suc>
        ^object <o1> ^object <o2>
         ^object <o3> ^object <o4> <o5>
         ^object <o1b>)
   (<cg> ^game <g> ^name blackjack ^action <T5> ^multiplayer false ^learning <lll>)
    (<lll> ^action-number 1 ^verb-num 1 ^type verb)# ^action-name <aname>)
   (<g> ^actions <a> ^name blackjack)
   (<a> ^1 <tcn>)
 (<suc> ^pair <suc1> ^pair <suc2> ^pair <suc3> ^pair <suc4> ^pair <suc5>)
 (<suc1> ^1 1 ^2 2)
 (<suc2> ^1 2 ^2 3)
 (<suc3> ^1 3 ^2 4)
 (<suc4> ^1 4 ^2 5)
 (<suc5> ^1 5 ^2 6)
          
 (<F7> ^prep <p100>)
  (<p100> ^name on ^pair <p21>
         ^pair <p22> <p23> <p24>)
   (<p21> ^1 1 ^2 5)
   (<p22> ^1 2 ^2 5)
   (<p23> ^1 3 ^2 6)
   (<p24> ^1 4 ^2 6)
   
   (<o1> ^id 1 ^category block ^word red ^value 9 ^primitive object)
   (<o2> ^id 2 ^category block ^word black ^value 6 ^primitive object)
   (<o3> ^id 3 ^category block ^word red ^value 10 ^primitive object)
   (<o4> ^id 4 ^category block ^word red ^value 4 ^primitive object)
   (<o1b> ^id 5 ^category block ^word hand ^primitive object)
   (<o5> ^id 6 ^category block ^word dealer-hand ^primitive object)

(<T5> ^nlp-set <nlps>)

## action hit
#(<nlps> ^nlp <cs> 
#        ^nlp <c6s>
#           ^aname stack-block)
#(<cs> ^name sum ^args <ag> ^parameter <p3z> ^return-type number ^type function ^function soar-sum)
#   (<p3z> ^1 <p1> ^2 <p2>)
#   (<p1> ^param-id 3 ^type single)
#   (<p2> ^param-id 1 ^type single)
#   (<ag> ^2 <c8>)
#   
#   (<c4> ^name block ^rtype single ^attribute type ^type attribute)
#   
#   (<c3> ^name hand ^type attribute ^args <ag9> ^attribute word ^type attribute)
#   (<ag9> ^1 <c4>)
#   
#   (<c8> ^name value ^args <ag8> ^parameter <p8> ^type attribute-of)#because set TODO fix... ^return-type number)
#   (<p8> ^1 <p18> ^2 <p182>)
#   (<p18> ^param-id 1 ^type set)
#   (<p182> ^param-id 2 ^type set)
#   (<ag8> ^2 <c7>)
#   
#   (<c6s> ^name less ^args <agg5> ^parameter <pg3> ^return-type number ^type function ^function soar-less)
#   (<pg3> ^1 <p1cg> ^2 <p2cg>)
#   (<p1cg> ^param-id 3 ^type single)
#   (<p2cg> ^param-id 4 ^type single)
#   (<agg5> ^1 <cs> ^2 <c5>)
#   (<c5> ^name number ^args <ag11zz> ^rtype single ^result.set.pair <pa22> ^return-type number)
#   (<pa22> ^1 17)
#   
#   (<c7> ^name on ^args <ag5> ^parameter <pzat> ^type state-pair ^attribute prepositions)
#   (<pzat> ^1 <pz1>)
#   (<pz1> ^param-id 2 ^type set)
#   (<ag5> ^1 <c4> ^2 <c3>)

## action stay
#(<nlps> ^nlp <cs> 
#        ^nlp <c6s>
#           ^aname stack-block)
#(<cs> ^name sum ^args <ag> ^parameter <p3z> ^return-type number ^type function ^function soar-sum)
#   (<p3z> ^1 <p1> ^2 <p2>)
#   (<p1> ^param-id 3 ^type single)
#   (<p2> ^param-id 1 ^type single)
#   (<ag> ^2 <c8>)
#   
#   (<c4> ^name block ^rtype single ^attribute type ^type attribute)
#   
#   (<c3> ^name hand ^type attribute ^args <ag9> ^attribute word ^type attribute)
#   (<ag9> ^1 <c4>)
#   
#   (<c8> ^name value ^args <ag8> ^parameter <p8> ^type attribute-of)#because set TODO fix... ^return-type number)
#   (<p8> ^1 <p18> ^2 <p182>)
#   (<p18> ^param-id 1 ^type set)
#   (<p182> ^param-id 2 ^type set)
#   (<ag8> ^2 <c7>)
#   
#   (<c6s> ^name greater ^args <agg5> ^parameter <pg3> ^return-type number ^type function ^function soar-greater)
#   (<pg3> ^1 <p1cg> ^2 <p2cg>)
#   (<p1cg> ^param-id 3 ^type single)
#   (<p2cg> ^param-id 4 ^type single)
#   (<agg5> ^1 <cs> ^2 <c5>)
#   (<c5> ^name number ^args <ag11zz> ^rtype single ^result.set.pair <pa22> ^return-type number)
#   (<pa22> ^1 16)
#   
#   (<c7> ^name on ^args <ag5> ^parameter <pzat> ^type state-pair ^attribute prepositions)
#   (<pzat> ^1 <pz1>)
#   (<pz1> ^param-id 2 ^type set)
#   (<ag5> ^1 <c4> ^2 <c3>)


## failure bust
#(<nlps> ^nlp <cs> 
#        ^nlp <c6s>
#           ^aname stack-block)
#(<cs> ^name sum ^args <ag> ^parameter <p3z> ^return-type number ^type function ^function soar-sum)
#   (<p3z> ^1 <p1> ^2 <p2>)
#   (<p1> ^param-id 3 ^type single)
#   (<p2> ^param-id 1 ^type single)
#   (<ag> ^2 <c8>)
#   
#   (<c4> ^name block ^rtype single ^attribute type ^type attribute)
#   
#   (<c3> ^name hand ^type attribute ^args <ag9> ^attribute word ^type attribute)
#   (<ag9> ^1 <c4>)
#   
#   (<c8> ^name value ^args <ag8> ^parameter <p8> ^type attribute-of)#because set TODO fix... ^return-type number)
#   (<p8> ^1 <p18> ^2 <p182>)
#   (<p18> ^param-id 1 ^type set)
#   (<p182> ^param-id 2 ^type set)
#   (<ag8> ^2 <c7>)
#   
#   (<c6s> ^name greater ^args <agg5> ^parameter <pg3> ^return-type number ^type function ^function soar-greater)
#   (<pg3> ^1 <p1cg> ^2 <p2cg>)
#   (<p1cg> ^param-id 3 ^type single)
#   (<p2cg> ^param-id 4 ^type single)
#   (<agg5> ^1 <cs> ^2 <c5>)
#   (<c5> ^name number ^args <ag11zz> ^rtype single ^result.set.pair <pa22> ^return-type number)
#   (<pa22> ^1 21)
#   
#   (<c7> ^name on ^args <ag5> ^parameter <pzat> ^type state-pair ^attribute prepositions)
#   (<pzat> ^1 <pz1>)
#   (<pz1> ^param-id 2 ^type set)
#   (<ag5> ^1 <c4> ^2 <c3>)

## goal beat-dealer
(<nlps> ^nlp <cs> 
        ^nlp <c6s>
        ^nlp <csx2> 
        ^nlp <c6sx2>
           ^aname stack-block)

(<cs> ^name sum ^args <ag> ^parameter <p3z> ^return-type number ^type function ^function soar-sum)
   (<p3z> ^1 <p1> ^2 <p2>)
   (<p1> ^param-id 3 ^type single)
   (<p2> ^param-id 1 ^type set)
   (<ag> ^2 <c8>)
   
   (<c4> ^name block ^rtype single ^attribute type ^type attribute)
   
   (<c3> ^name hand ^args <ag9> ^attribute word ^type attribute)
   (<ag9> ^1 <c4>)
   
   (<c8> ^name value ^args <ag8> ^parameter <p8> ^type attribute-of)#because set TODO fix... ^return-type number)
   (<p8> ^1 <p18> ^2 <p182>)
   (<p18> ^param-id 1 ^type set)
   (<p182> ^param-id 2 ^type set)
   (<ag8> ^2 <c7>)
   
   (<c6s> ^name less ^args <agg5> ^parameter <pg3> ^return-type number ^type function ^function soar-less)
   (<pg3> ^1 <p1cg> ^2 <p2cg>)
   (<p1cg> ^param-id 3 ^type single)
   (<p2cg> ^param-id 4 ^type single)
   (<agg5> ^1 <cs> ^2 <c5>)
   (<c5> ^name number ^args <ag11zz> ^rtype single ^result.set.pair <pa22> ^return-type number)
   (<pa22> ^1 22)
   
   (<c7> ^name on ^args <ag5> ^parameter <pzat> ^type state-pair ^attribute prepositions)
   (<pzat> ^1 <pz1>)
   (<pz1> ^param-id 2 ^type set)
   (<ag5> ^1 <c4> ^2 <c3>)
   
   
   (<c6sx2> ^name greater ^args <agg5x2> ^parameter <pg3x2> ^return-type number ^type function ^function soar-greater)
   (<pg3x2> ^1 <p1cgx2> ^2 <p2cgx2>)
   (<p1cgx2> ^param-id 3 ^type single)
   (<p2cgx2> ^param-id 7 ^type single)
   (<agg5x2> ^1 <cs> ^2 <csx2>)
   
   (<csx2> ^name sum ^args <agx2> ^parameter <p3zx2> ^return-type number ^type function ^function soar-sum)
   (<p3zx2> ^1 <p1x2> ^2 <p2x2>)
   (<p1x2> ^param-id 7 ^type single)
   (<p2x2> ^param-id 5 ^type set)
   (<agx2> ^2 <c8x2>)
      
   (<c3x2> ^name dealer-hand ^args <ag9x2> ^attribute word ^type attribute)
   (<ag9x2> ^1 <c4>)
   
   (<c8x2> ^name value ^args <ag8x2> ^parameter <p8x2> ^type attribute-of)#because set TODO fix... ^return-type number)
   (<p8x2> ^1 <p18x2> ^2 <p182x2>)
   (<p18x2> ^param-id 5 ^type set)
   (<p182x2> ^param-id 6 ^type set)
   (<ag8x2> ^2 <c7x2>)
   
   
   
   (<c7x2> ^name on ^args <ag5x2> ^parameter <pzatx2> ^type state-pair ^attribute prepositions)
   (<pzatx2> ^1 <pz1x2>)# ^2 <pz1x3>)
   (<pz1x2> ^param-id 6 ^type set)
  # (<pz1x3> ^param-id 7 ^type single)
   (<ag5x2> ^1 <c4> ^2 <c3x2>)


}
#sp {chunk-multi*justification-493*onc*t80-2
#    :chunk
#    (state <s1> ^gtype action ^list <l1> ^action <a1>)
#    (<l1> ^game <g1>)
#    (<a1> ^condition <c1>)
#    (<c1> ^negative false ^name <value> ^type attribute-of ^args <a2>
#          ^parameter <p1> ^result <r2>)
#    (<a2> ^num 1 ^2 <*1>)
#    (<p1> ^num 2 ^1 <*2>)
#    (<*1> ^rtype set ^result <r1>)
#    (<*2> ^type set)
#    (<r1> ^set <s2>)
#    (<s2> ^pair <p2>)
#    (<p2> ^1 <*3>)
#    (<*3> ^object <o1>)
#    (<o1> ^<value> <v9>)
#    (<r2> ^set <s3>)
#    (<s3> ^pair <p3>)
#    (<p3> ^2 <*3> ^1 <*4>)
#    -->
#    (<*4> ^<a3> <v9> +)
#}
#
#sp {chunk-multi*justification-482*t80-1
#    :chunk
#    (state <s1> ^gtype action ^list <l1> ^action <a1>)
#    (<l1> ^game <g1>)
#    (<a1> ^condition <c1>)
#    (<c1> ^negative false ^name value ^type attribute-of ^args <a2>
#          ^parameter <p1> ^result <r1>)
#    (<a2> ^num 1 ^2 <*1>)
#    (<p1> ^num 2 ^1 <*2>)
#    (<*1> ^rtype set ^result <r2>)
#    (<*2> ^type set)
#    (<r1> ^set <s2>)
#    (<r2> ^set <s3>)
#    (<s3> ^pair <p2>)
#    (<p2> ^1 <*3>)
#    -->
#    (<s2> ^pair <p3> +)
#    (<p3> ^2 <*3> + ^1 <*4> +)
#}


#sp {chunk-multi*justification-502*onc*t94-2
#    :chunk
#    (state <s1> ^gtype action ^list <l1> ^action <a1>)
#    (<l1> ^game <g1>)
#    (<a1> ^condition <c1>)
#    (<c1> ^negative false ^name value ^args <a2> ^parameter <p1> ^result <r2>)
#    (<a2> ^num 1 ^2 <*1>)
#    (<p1> ^num 2 ^1 <*2>)
#    (<*1> ^rtype set ^result <r1>)
#    (<*2> ^type set)
#    (<r1> ^set <s2>)
#    (<s2> ^pair <p2>)
#    (<p2> ^1 <*3>)
#    (<*3> ^object <o1>)
#    (<o1> ^value <x9>)
#    (<r2> ^set <s3>)
#    (<s3> ^pair <p3>)
#    (<p3> ^2 <*3> ^1 <*4>)
#    -->
#    (<*4> ^<a3> <x9> +)
#}
#
#sp {chunk-multi*justification-491*t94-1
#    :chunk
#    (state <s1> ^gtype action ^list <l1> ^action <a1>)
#    (<l1> ^game <g1>)
#    (<a1> ^condition <c1>)
#    (<c1> ^negative false ^name value ^args <a2> ^parameter <p1> ^result <r1>)
#    (<a2> ^num 1 ^2 <*1>)
#    (<p1> ^num 2 ^1 <*2>)
#    (<*1> ^rtype set ^result <r2>)
#    (<*2> ^type set)
#    (<r1> ^set <s2>)
#    (<r2> ^set <s3>)
#    (<s3> ^pair <p2>)
#    (<p2> ^1 <*3>)
#    -->
#    (<s2> ^pair <p3> +)
#    (<p3> ^2 <*3> + ^1 <*4> +)
#}
#sp {chunk-multi*justification-297*t93-1
#    :chunk
#    (state <s1> ^gtype action ^list <l1> ^action <a1>)
#    (<l1> ^game <g1>)
#    (<a1> ^condition <c1>)
#    (<c1> ^negative false ^name add ^args <a2> ^parameter <p1> ^result <r1>)
#    (<a2> ^num 2 ^3 <*1> ^2 <*2>)
#    (<p1> ^num 3)
#    (<r1> ^set <s2>)
#    (<*2> ^result <r2>)
#    (<r2> ^set <s3>)
#    (<s3> ^pair <p2>)
#    (<p2> ^1 <x6>)
#    (<*1> ^result <r3>)
#    (<r3> ^set <s4>)
#    (<s4> ^pair <p3>)
#    (<p3> ^1 <x9>)
#    -->
#    (<s2> ^pair <p4> +)
#    (<p4> ^1 (+ <x6> <x9>) + ^3 <x9> + ^2 <x6> +)
#}


#sp {chunk*justification-308*onc*t68-2
#    :chunk
#    (state <s1> ^gtype <c1> ^list <l1> ^<c1> <a1>)
#    (<l1> ^game <g1>)
#    (<a1> ^condition <c3>)
#    (<c3> ^type attribute-of ^args <a2> ^parameter <p1> ^negative <c4>
#          ^result <r1> ^name <c5>)
#    (<a2> ^num 1 ^2 <c7>)
#    (<p1> ^num 2 ^1 <p3>)
#    (<c7> ^rtype set ^result <r2>)
#    (<p3> ^type set)
#    (<r2> ^set <s3>)
#    (<s3> ^pair <p4>)
#    (<p4> ^1 <s4>)
#    (<r1> ^set <s2>)
#    (<s2> ^pair <p2>)
#    (<p2> ^2 <s4> ^1 <s5>)
#    (<s4> ^object <o1>)
#    (<o1> ^<c5> <c8>)
#    -->
#    (<s5> ^<r3> <c8> +)
#}
#
#sp {chunk*justification-301*t68-1
#    :chunk
#    (state <s1> ^gtype <c1> ^list <l1> ^<c1> <a1>)
#    (<l1> ^game <g1>)
#    (<a1> ^condition <c3>)
#    (<c3> ^type attribute-of ^args <a2> ^parameter <p1> ^negative <c4>
#          ^result <r2> ^name <c5>)
#    (<a2> ^num 1 ^2 <c6>)
#    (<p1> ^num 2 ^1 <p2>)
#    (<c6> ^rtype set ^result <r1>)
#    (<p2> ^type set)
#    (<r2> ^set <s4>)
#    (<r1> ^set <s2>)
#    (<s2> ^pair <p3>)
#    (<p3> ^1 <s3>)
#    -->
#    (<s4> ^pair <p4> +)
#    (<p4> ^2 <s3> + ^1 <s5> +)
#}