#contains poker related concepts
#
#predicate hands (start from set of values?) and value of hand?
#2kind
#3kind
#4kind
#2pair
#fullhouse
#straight
#flush
#straight-flush

#with sets or individual?
#set for straight and flush?

#start with kinds
#hole cards

#use my-card as root

#heuristic
#preferbetterhand

#set operators
#ordered, homogeneous set all same values the set of values are homogenous
#subset make sets of size n of set S

#retest same-rank!!
#also plan for option to input, but default object
#^if args.num 0 elaborate default else input args
#duplicate tier 1 def for diff games
#different number of arg version same-rank(1,2) same-rank(1,2,3)
#ordering problem 3 results for same 3 of a kind


#tested slow/duplicates  
sp {topstate*elaborate*2-of-a-kind
   (state <s> ^name learn-param
            #  ^condition.name adjacent
              ^gtype <gtype>
              ^<gtype>.condition <co>)
   (<co> ^type concept ^attribute predicate ^name 2-of-a-kind)
-->
    (<s> ^predicate <T5> ^gtype predicate)
   
   (<T5> ^nlp-set <nlps> ^formated predicate ^parameter-set <P124> ^potential-args <P125> ^link <co>)
(<P124> ^argnum 3)


  (<nlps> ^nlp <cs> ^aname 2-of-a-kind)#^nlp <cs> <cs1>

   
   (<cs> ^name same-rank ^parameter <param1> ^rtype single ^negative false ^args <ag> ^type concept ^attribute predicate ^result.set <rset12>)
   (<ag> ^1 <cs2> ^2 <cs2> ^num 2)
   (<param1> ^1 <p11> ^2 <p12> ^3 <p13> ^num 3)
   (<p11> ^param-id 1 ^type single)
   (<p12> ^param-id 2 ^type single)
   (<p13> ^param-id 3 ^type single)
   
   (<cs2> ^name my-card ^rtype single ^negative false ^args <ag5asdf> ^parameter.num 0 ^type concept ^attribute predicate ^result.set <rset>)
    
}
#tested slow/duplicates  
sp {topstate*elaborate*3-of-a-kind
   (state <s> ^name learn-param
            #  ^condition.name adjacent
              ^gtype <gtype>
              ^<gtype>.condition <co>)
   (<co> ^type concept ^attribute predicate ^name 3-of-a-kind)
-->
    (<s> ^predicate <T5> ^gtype predicate)
   
   (<T5> ^nlp-set <nlps> ^formated predicate ^parameter-set <P124> ^potential-args <P125> ^link <co>)
(<P124> ^argnum 3)


  (<nlps> ^nlp <cs> ^aname 3-of-a-kind)#^nlp <cs> <cs1>

   
   (<cs> ^name same-rank ^parameter <param1> ^rtype single ^negative false ^args <ag> ^type concept ^attribute predicate ^result.set <rset123>)
   (<ag> ^1 <cs2> ^2 <cs2> ^3 <cs2> ^num 3)
   (<param1> ^1 <p11> ^2 <p12> ^3 <p13> ^num 3)
   (<p11> ^param-id 1 ^type single)
   (<p12> ^param-id 2 ^type single)
   (<p13> ^param-id 3 ^type single)
   
   (<cs2> ^name my-card ^rtype single ^negative false ^args <ag5asdf> ^parameter.num 0 ^type concept ^attribute predicate ^result.set <rset>)
    
}
#tested slow/duplicates  
#expect 6 version instead of
sp {topstate*elaborate*full-house
   (state <s> ^name learn-param
              ^gtype <gtype>
              ^<gtype>.condition <co>)
   (<co> ^type concept ^attribute predicate ^name full-house)
-->
    (<s> ^predicate <T5> ^gtype predicate)
   
  (<T5> ^nlp-set <nlps> ^formated predicate ^parameter-set <P124> ^potential-args <P125> ^link <co>)
(<P124> ^argnum 5)

  (<nlps> ^nlp <cs> <cs3> ^aname full-house)
  
   (<cs> ^name 3-of-a-kind ^parameter <param1> ^rtype single ^negative false ^args <ag> ^type concept ^attribute predicate ^result.set <rset12>)
   (<param1> ^1 <p11> ^2 <p12> ^3 <p13> ^num 3)
   (<p11> ^param-id 1 ^type single)
   (<p12> ^param-id 2 ^type single)
   (<p13> ^param-id 3 ^type single)
   
  (<cs3> ^name 2-of-a-kind ^rtype single ^negative false ^args <ag5ff> ^parameter <p33> ^type concept ^attribute predicate ^result.set <rset1>)
   (<p33> ^1 <p333> ^2 <p332> ^num 2)
   (<p333> ^param-id 4 ^type single)
   (<p332> ^param-id 5 ^type single)
   
}
#tested slow/duplicates  
sp {topstate*elaborate*4-of-a-kind
   (state <s> ^name learn-param
              ^gtype <gtype>
              ^<gtype>.condition <co>)
   (<co> ^type concept ^attribute predicate ^name 4-of-a-kind)
-->
    (<s> ^predicate <T5> ^gtype predicate)
   
  (<T5> ^nlp-set <nlps> ^formated predicate ^parameter-set <P124> ^potential-args <P125> ^link <co>)
(<P124> ^argnum 5)

  (<nlps> ^nlp <cs> <cs3> ^aname 4-of-a-kind)
  
   (<cs> ^name 2-of-a-kind ^parameter <param1> ^rtype single ^negative false ^args <ag> ^type concept ^attribute predicate ^result.set <rset12>)
   (<param1> ^1 <p11> ^2 <p12> ^3 <p13> ^num 3)
   (<p11> ^param-id 1 ^type single)
   (<p12> ^param-id 2 ^type single)
   (<p13> ^param-id 5 ^type single)
   
  (<cs3> ^name 2-of-a-kind ^rtype single ^negative false ^args <ag5ff> ^parameter <p33> ^type concept ^attribute predicate ^result.set <rset1>)
   (<p33> ^1 <p333> ^2 <p332> ^3 <p334> ^num 3)
   (<p333> ^param-id 3 ^type single)
   (<p332> ^param-id 4 ^type single)
   (<p334> ^param-id 5 ^type single)
   
}
#tested slow/duplicates  
sp {topstate*elaborate*2-pair
   (state <s> ^name learn-param
              ^gtype <gtype>
              ^<gtype>.condition <co>)
   (<co> ^type concept ^attribute predicate ^name 2-pair)
-->
    (<s> ^predicate <T5> ^gtype predicate)
   
  (<T5> ^nlp-set <nlps> ^formated predicate ^parameter-set <P124> ^potential-args <P125> ^link <co>)
(<P124> ^argnum 6)

  (<nlps> ^nlp <cs> <cs3> ^aname 2-pair)
  
   (<cs> ^name 2-of-a-kind ^parameter <param1> ^rtype single ^negative false ^args <ag> ^type concept ^attribute predicate ^result.set <rset12>)
   (<param1> ^1 <p11> ^2 <p12> ^3 <p13> ^num 3)
   (<p11> ^param-id 1 ^type single)
   (<p12> ^param-id 2 ^type single)
   (<p13> ^param-id 5 ^type single)
   
  (<cs3> ^name 2-of-a-kind ^rtype single ^negative false ^args <ag5ff> ^parameter <p33> ^type concept ^attribute predicate ^result.set <rset1>)
   (<p33> ^1 <p333> ^2 <p332> ^3 <p334> ^num 3)
   (<p333> ^param-id 3 ^type single)
   (<p332> ^param-id 4 ^type single)
   (<p334> ^param-id 6 ^type single)
   
}

sp {topstate*elaborate*flush
   (state <s> ^name learn-param
            #  ^condition.name adjacent
              ^gtype <gtype>
              ^<gtype>.condition <co>)
   (<co> ^type concept ^attribute predicate ^name flush)
-->
    (<s> ^predicate <T5> ^gtype predicate)
   
   (<T5> ^nlp-set <nlps> ^formated predicate ^parameter-set <P124> ^potential-args <P125> ^link <co>)
(<P124> ^argnum 6)


  (<nlps> ^nlp <cs> <cs1> <cs3> <cs5> <cs4> ^aname flush)

   
   (<cs> ^result.set <res> ^name suit ^parameter <param1> ^return-type number ^rtype single ^negative false ^args <ag> ^type attribute-of)#^type function ^function attribute-of)
   (<ag> ^2 <cs2> ^num 1)
   (<param1> ^1 <p11> ^2 <p12> ^num 2)
   (<p11> ^param-id 6 ^type single)
   (<p12> ^param-id 1 ^type single)
   
   (<cs1> ^result.set <res3> ^name suit ^parameter <param2> ^return-type number ^rtype single ^negative false ^args <ag2> ^type attribute-of)#^type function ^function attribute-of)
   (<ag2> ^2 <cs2> ^num 1)
   (<param2> ^1 <p21> ^2 <p22> ^num 2)
   (<p21> ^param-id 6 ^type single)
   (<p22> ^param-id 2 ^type single)
   
   (<cs3> ^result.set <res33> ^name suit ^parameter <param23> ^return-type number ^rtype single ^negative false ^args <ag23> ^type attribute-of)#^type function ^function attribute-of)
   (<ag23> ^2 <cs2> ^num 1)
   (<param23> ^1 <p213> ^2 <p223> ^num 2)
   (<p213> ^param-id 6 ^type single)
   (<p223> ^param-id 3 ^type single)
   
   (<cs4> ^result.set <res34> ^name suit ^parameter <param4> ^return-type number ^rtype single ^negative false ^args <ag4> ^type attribute-of)#^type function ^function attribute-of)
   (<ag4> ^2 <cs2> ^num 1)
   (<param4> ^1 <p214> ^2 <p224> ^num 2)
   (<p214> ^param-id 6 ^type single)
   (<p224> ^param-id 4 ^type single)
   
   (<cs5> ^result.set <res335> ^name suit ^parameter <param25> ^return-type number ^rtype single ^negative false ^args <ag25> ^type attribute-of)#^type function ^function attribute-of)
   (<ag25> ^2 <cs2> ^num 1)
   (<param25> ^1 <p215> ^2 <p225> ^num 2)
   (<p215> ^param-id 6 ^type single)
   (<p225> ^param-id 5 ^type single)
   
   (<cs2> ^name my-card ^rtype single ^negative false ^args <ag5asdf> ^parameter.num 0 ^type concept ^attribute predicate ^result.set <rset2>)
}

sp {topstate*elaborate*straight
   (state <s> ^name learn-param
            #  ^condition.name adjacent
              ^gtype <gtype>
              ^<gtype>.condition <co>)
   (<co> ^type concept ^attribute predicate ^name straight)
-->
    (<s> ^predicate <T5> ^gtype predicate)
   
   (<T5> ^nlp-set <nlps> ^formated predicate ^parameter-set <P124> ^potential-args <P125> ^link <co>)
(<P124> ^argnum 5)


  (<nlps> ^nlp <cs6> <cs3> <cs5> <cs4> ^aname straight)

   (<cs3> ^name successive-cards ^rtype single ^negative false ^args <ag5ff> ^parameter <p3> ^type concept ^attribute predicate ^result.set <rset13>)
   (<p3> ^1 <p31> ^2 <p32> ^num 2)
   (<p31> ^param-id 1 ^type single)
   (<p32> ^param-id 2 ^type single)
   
   (<cs4> ^name successive-cards ^rtype single ^negative false ^args <ag5ff4> ^parameter <p4> ^type concept ^attribute predicate ^result.set <rset12>)
   (<p4> ^1 <p41> ^2 <p42> ^num 2)
   (<p41> ^param-id 2 ^type single)
   (<p42> ^param-id 3 ^type single)
   
   (<cs5> ^name successive-cards ^rtype single ^negative false ^args <ag5ff5> ^parameter <p5> ^type concept ^attribute predicate ^result.set <rset15>)
   (<p5> ^1 <p51> ^2 <p52> ^num 2)
   (<p51> ^param-id 3 ^type single)
   (<p52> ^param-id 4 ^type single)
   
   (<cs6> ^name successive-cards ^rtype single ^negative false ^args <ag5f3f> ^parameter <p6> ^type concept ^attribute predicate ^result.set <rset16>)
   (<p6> ^1 <p61> ^2 <p62> ^num 2)
   (<p61> ^param-id 4 ^type single)
   (<p62> ^param-id 5 ^type single)
}



sp {topstate*elaborate*straight-flush
   (state <s> ^name learn-param
              ^gtype <gtype>
              ^<gtype>.condition <co>)
   (<co> ^type concept ^attribute predicate ^name straight-flush)
-->
    (<s> ^predicate <T5> ^gtype predicate)
   
  (<T5> ^nlp-set <nlps> ^formated predicate ^parameter-set <P124> ^potential-args <P125> ^link <co>)
(<P124> ^argnum 2)

  (<nlps> ^nlp <cs> <cs3> ^aname straight-flush)
  
   (<cs> ^result.set <res> ^name straight ^parameter <param1> ^rtype single ^negative false ^args <ag> ^type attribute ^attribute word)
   (<param1> ^1 <p11> ^2 <p12> ^num 1)
   (<p11> ^param-id 1 ^type single)
   
  (<cs3> ^name flush ^rtype single ^negative false ^args <ag5ff> ^parameter <p33> ^type concept ^attribute predicate ^result.set <rset1>)
   (<p33> ^1 <p333> ^num 1)
   (<p333> ^param-id 2 ^type single)
   
}
