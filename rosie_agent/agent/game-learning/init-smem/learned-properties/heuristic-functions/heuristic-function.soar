#DEPRICATED
#for notes only


#contains heuristic functions and related functions

#distance functions
#manhattan
#euclidean
#h1 hamming distance = count mismatch
#h2 sum manhattan distances

#predicates
#mismatch-on

#average
#more(set,set)
#max?
#square
#abs

#state-eval

#hamming distance
sp {topstate*elaborate*hamming-distance
   (state <s> ^name learn-param
              ^gtype <gtype>
              ^<gtype>.condition <co>)
   (<co> ^type concept ^attribute predicate ^name hamming-distance)
-->
    (<s> ^predicate <T5> ^gtype predicate)
   
  (<T5> ^nlp-set <nlps> ^formated predicate ^parameter-set <P124> ^potential-args <P125> ^link <co>)
(<P124> ^argnum 1)

  (<nlps> ^nlp <cs1> ^aname hamming-distance)
   
   
   (<cs1> ^name count ^result.set <res2> ^rtype single ^negative true ^parameter <p3z> ^args <ag1> ^return-type number ^type function ^function soar-count)
   (<ag1> ^2 <cs2> ^num 1)
   (<p3z> ^1 <p1b> ^num 1)
   (<p1b> ^param-id 1 ^type single)
  # (<p2b> ^param-id 2 ^type set)
   
   (<cs2> ^name mismatch-on-color ^rtype single ^negative false ^args <ag5asdf> ^parameter.num 0 ^type concept ^attribute predicate ^result.set <rset>)
   
}

#only want sum of location to location of colors
#this sums pairwise all
sp {topstate*elaborate*manhattan-sum
   (state <s> ^name learn-param
              ^gtype <gtype>
              ^<gtype>.condition <co>)
   (<co> ^type concept ^attribute predicate ^name manhattan-sum)
-->
    (<s> ^predicate <T5> ^gtype predicate)
   
  (<T5> ^nlp-set <nlps> ^formated predicate ^parameter-set <P124> ^potential-args <P125> ^link <co>)
(<P124> ^argnum 1)

  (<nlps> ^nlp <cs1> ^aname manhattan-sum)
   
   
   (<cs1> ^name count ^result.set <res2> ^rtype single ^negative true ^parameter <p3z> ^args <ag1> ^return-type number ^type function ^function soar-count)
   (<ag1> ^2 <cs2> ^num 1)
   (<p3z> ^1 <p1b> ^num 1)
   (<p1b> ^param-id 1 ^type single)
  # (<p2b> ^param-id 2 ^type set)
   
   (<cs2> ^name manhattan-distance ^rtype single ^negative false ^args <ag5asdf> ^parameter.num 0 ^type concept ^attribute predicate ^result.set <rset>)
   
}


sp {topstate*elaborate*heuristic
   (state <s> ^name learn-param
            #  ^condition.name adjacent
              ^gtype <gtype>
              ^<gtype>.nlp-set.aname place-block)
#   (<co> ^type concept ^attribute predicate ^name heuristic)
-->
    (<s> ^predicate <T5> ^gtype predicate)
   
   (<T5> ^nlp-set <nlps> ^disprefer <pref> ^formated predicate ^parameter-set <P124> ^potential-args <P125> ^ntype heuristic)
(<P124> ^argnum 2)
(<pref> ^1 <cs2>)
##action stack
  (<nlps> ^nlp <cs2> <c5> ^aname heuristic)#^nlp <cs> <cs1>

   (<cs2> ^result.set <res> ^name place-block ^args <aag5> ^parameter <pa3> ^type concept ^attribute action)
   (<pa3> ^1 <pa1d> ^2 <pa2d> ^num 2)
   (<pa1d> ^param-id 1 ^type single)
   (<pa2d> ^param-id 2 ^type single)
     
   (<c5> ^args <ag> ^attribute predicate ^name center ^negative false
                 ^parameter <param1> ^result <R92> ^rtype single ^type concept)
            (<R94> ^set <S158>)
   (<ag> ^1 <c4> ^num 1)
   (<param1> ^1 <p11> ^num 1)
   (<p11> ^param-id 2 ^type single)
   (<R92> ^set <S152>)
   
   (<c4> ^args <A57> ^attribute primitive ^name object ^negative false
                 ^parameter <P225> ^result <R94> ^rtype single ^type attribute)
            (<P225> ^num 0)
            (<R94> ^set <S158>)

}

sp {topstate*elaborate*heuristic3
   (state <s> ^name learn-param2
            #  ^condition.name adjacent
              ^gtype <gtype>
              ^<gtype>.nlp-set.aname place-block)
#   (<co> ^type concept ^attribute predicate ^name heuristic)
-->
    (<s> ^predicate <T5> ^gtype predicate)
   
   (<T5> ^nlp-set <nlps> ^prefer <pref> ^formated predicate ^parameter-set <P124> ^potential-args <P125> ^ntype heuristic)
(<P124> ^argnum 2)
(<pref> ^1 <cs2>)
  (<nlps> ^nlp <cs2> <c5> ^anam0e heuristic)

   (<cs2> ^result.set <res> ^name place-block ^args <aag5> ^parameter <pa3> ^type concept ^attribute action)
   (<pa3> ^1 <pa1d> ^2 <pa2d> ^num 2)
   (<pa1d> ^param-id 1 ^type single)
   (<pa2d> ^param-id 2 ^type single)
     
   (<c5> ^args <ag> ^attribute predicate ^name win-setup ^negative false
                 ^parameter <param1> ^result <R92> ^rtype single ^type concept)
   (<param1> ^1 <p11> ^num 1)
   (<p11> ^param-id 2 ^type single)
   (<R92> ^set <S152>)

}

sp {topstate*elaborate*heuristic4
   (state <s> ^name learn-param2
              ^gtype <gtype>
              ^<gtype>.nlp-set.aname place-block)
-->
    (<s> ^predicate <T5> ^gtype predicate)
   
   (<T5> ^nlp-set <nlps> ^prefer <pref> ^formated predicate ^parameter-set <P124> ^potential-args <P125> ^ntype heuristic)
(<P124> ^argnum 2)
(<pref> ^1 <cs2>)
  (<nlps> ^nlp <cs2> <c5> ^aname heuristic)

   (<cs2> ^result.set <res> ^name place-block ^args <aag5> ^parameter <pa3> ^type concept ^attribute action)
   (<pa3> ^1 <pa1d> ^2 <pa2d> ^num 2)
   (<pa1d> ^param-id 1 ^type single)
   (<pa2d> ^param-id 2 ^type single)
     
   (<c5> ^args <ag> ^attribute predicate ^name fork-location ^negative false
                 ^parameter <param1> ^result <R92> ^rtype single ^type concept)
   (<param1> ^1 <p11> ^num 1)
   (<p11> ^param-id 2 ^type single)
   (<R92> ^set <S152>)

}

sp {topstate*elaborate*heuristic5
   (state <s> ^name learn-param2
              ^gtype <gtype>
              ^<gtype>.nlp-set.aname place-block)
-->
    (<s> ^predicate <T5> ^gtype predicate)
   
   (<T5> ^nlp-set <nlps> ^prefer <pref> ^formated predicate ^parameter-set <P124> ^potential-args <P125> ^ntype heuristic)
(<P124> ^argnum 2)
(<pref> ^1 <cs2>)
  (<nlps> ^nlp <cs2> <c5> ^aname heuristic)

   (<cs2> ^result.set <res> ^name place-block ^args <aag5> ^parameter <pa3> ^type concept ^attribute action)
   (<pa3> ^1 <pa1d> ^2 <pa2d> ^num 2)
   (<pa1d> ^param-id 1 ^type single)
   (<pa2d> ^param-id 2 ^type single)
     
   (<c5> ^args <ag> ^attribute predicate ^name block-location ^negative false
                 ^parameter <param1> ^result <R92> ^rtype single ^type concept)
   (<param1> ^1 <p11> ^num 1)
   (<p11> ^param-id 2 ^type single)
   (<R92> ^set <S152>)

}

   sp {chunk*chunk-parameters*propose*new-operator*snc*t71-4
    :chunk
    (state <s1> ^gtype action ^action <p1> ^list <l1>)
    (<p1> ^aname place-block ^parameter-set <p2> ^potential-args <p3>)
    (<p2> ^tested calculate3 ^tested calculate2 ^tested calculate5 ^tested calculate6 
          ^tested calculate4 ^tested calculate1 ^set <s2>)
    (<l1> ^game <g1>)
  #  (<g1> ^type predicate)
    -->
    (<p1> ^pair <s2> +)
}


sp {topstate*elaborate*heuristic2
   (state <s> ^name learn-param
            #  ^condition.name adjacent
              ^gtype <gtype>
              ^<gtype>.nlp-set.aname place-block)
#   (<co> ^type concept ^attribute predicate ^name heuristic)
-->
    (<s> ^predicate <T5> ^gtype predicate)
   
   (<T5> ^nlp-set <nlps> ^prefer <p3> ^formated predicate ^parameter-set <P124> ^potential-args <P125> ^ntype heuristic)
(<P124> ^argnum 3)
(<p3> ^1 <cs2> ^2 <cs3>)
##action stack
  (<nlps> ^nlp <cs2> <cs3> <c5> <c6> ^aname heuristic)#^nlp <cs> <cs1>

   (<cs2> ^result.set <res> ^name place-block ^args <aag5> ^parameter <pa3> ^type concept ^attribute action)
   (<pa3> ^1 <pa1d> ^2 <pa2d> ^num 2)
   (<pa1d> ^param-id 1 ^type single)
   (<pa2d> ^param-id 2 ^type single)
   
   (<cs3> ^result.set <res3> ^name place-block ^args <aag3> ^parameter <pa33> ^type concept ^attribute action)
   (<pa33> ^1 <pa1d3> ^2 <pa2d3> ^num 2)
   (<pa1d3> ^param-id 1 ^type single)
   (<pa2d3> ^param-id 3 ^type single)
     
   (<c5> ^args <ag> ^attribute predicate ^name corner ^negative false
                 ^parameter <param1> ^result <R92> ^rtype single ^type concept)
 #  (<ag> ^1 <c4> ^num 1)
   (<param1> ^1 <p11> ^num 1)
   (<p11> ^param-id 2 ^type single)
   (<R92> ^set <S152>)
   
   (<c6> ^args <ag6> ^attribute predicate ^name side ^negative false
                 ^parameter <param6> ^result <R96> ^rtype single ^type concept)

 #  (<ag6> ^1 <c4> ^num 1)
   (<param6> ^1 <p16> ^num 1)
   (<p16> ^param-id 3 ^type single)
   (<R96> ^set <S156>)

}

sp {topstate*elaborate*heuristic3
   (state <s> ^name learn-param2
            #  ^condition.name adjacent
              ^gtype <gtype>
              ^<gtype>.nlp-set.aname play-card)
#   (<co> ^type concept ^attribute predicate ^name heuristic)
-->
    (<s> ^predicate <T5> ^gtype predicate)
   
   (<T5> ^nlp-set <nlps> ^prefer <p3> ^formated predicate ^parameter-set <P124> ^potential-args <P125> ^ntype heuristic)
(<P124> ^argnum 2)
(<p3> ^1 <cs2> ^2 <cs3>)
##action stack
  (<nlps> ^nlp <cs2> <cs3> <c5>  ^aname heuristic)#^nlp <cs> <cs1>

   (<cs2> ^result.set <res> ^name play-card ^args <aag5> ^parameter <pa3> ^type concept ^attribute action ^return-type number)
   (<pa3> ^1 <pa2d>  ^num 1)#^1 <pa1d> ^3 <pa3d>
   #(<pa1d> ^param-id 1 ^type single)
   (<pa2d> ^param-id 1 ^type single)
   #(<pa3d> ^param-id 3 ^type single)
   
   (<cs3> ^result.set <res3> ^name play-card ^args <aag3> ^parameter <pa33> ^type concept ^attribute action ^return-type number)
   (<pa33> ^1 <pa2d3> ^num 1)#^1 <pa1d3> ^3 <pa3d3> 
   #(<pa1d3> ^param-id 4 ^type single)
   (<pa2d3> ^param-id 2 ^type single)
   #(<pa3d3> ^param-id 3 ^type single)
     
   (<c5> ^args <ag> ^function soar-less ^name less ^negative false
                 ^parameter <param1> ^result <R92> ^rtype single ^type function ^return-type number)
   (<ag> ^1 <cs2> ^2 <cs3> ^num 2)
   (<param1> ^1 <p11> ^2 <p12> ^num 2)
   (<p11> ^param-id 1 ^type single)
   (<p12> ^param-id 2 ^type single)
   (<R92> ^set <S152>)
   
#   
#   (<c4> ^args <A57> ^attribute primitive ^name object ^negative false
#                 ^parameter <P225> ^result <R94> ^rtype single ^type attribute)
#            (<P225> ^num 0)
#            (<R94> ^set <S158>)

}
sp {topstate*elaborate*heuristic45
   (state <s> ^name learn-param2
              ^gtype <gtype>
              ^<gtype>.nlp-set.aname draw-card)
-->
    (<s> ^predicate <T5> ^gtype predicate)
   
   (<T5> ^nlp-set <nlps> ^disprefer <pref> ^formated predicate ^parameter-set <P124> ^potential-args <P125> ^ntype heuristic)
(<P124> ^argnum 1)
(<pref> ^1 <cs2>)
  (<nlps> ^nlp <cs2>  ^aname heuristic)

   (<cs2> ^result.set <res> ^name draw-card ^args <aag5> ^parameter <pa3> ^type concept ^attribute action)
   (<pa3> ^1 <pa1d> ^num 1)
   (<pa1d> ^param-id 1 ^type single)

}



#crazy8s heuristics
#1 disfer draw card over any
sp {topstate*elaborate*crazy8s*disprefer*draw-card*any-action
   (state <s> ^name learn-param
              ^gtype <gtype>
              ^<gtype>.nlp-set.aname draw-card)
-->
    (<s> ^predicate <T5> ^gtype predicate)
   
   (<T5> ^nlp-set <nlps> ^disprefer <pref> ^formated predicate ^parameter-set <P124> ^potential-args <P125> ^ntype heuristic)
(<P124> ^argnum 2)
(<pref> ^1 <cs2> ^2 <cs3>)
  (<nlps> ^nlp <cs2> <cs3> ^aname heuristic)

   (<cs2> ^result.set <res> ^name draw-card ^args <aag5> ^parameter <pa3> ^type concept ^attribute action)
   (<pa3> ^1 <pa1d> ^num 1)
   (<pa1d> ^param-id 1 ^type single)
   
   (<cs3> ^result.set <res5> ^name any ^args <aag3> ^parameter <pa5> ^type concept ^attribute action)
   (<pa5> ^1 <pa5d> ^num 1)
   (<pa5d> ^param-id 2 ^type single)

}
#2 disprefer any action with a card with value 8
sp {topstate*elaborate*heuristic-any
   (state <s> ^name learn-param
              ^gtype action)#<gtype>
              #^<gtype>.nlp-set.aname draw-card)
-->
    (<s> ^predicate <T5> ^gtype predicate)
   
   (<T5> ^nlp-set <nlps> ^disprefer <pref> ^formated predicate ^parameter-set <P124> ^potential-args <P125> ^ntype heuristic)
(<P124> ^argnum 2)
(<pref> ^1 <cs2>)
  (<nlps> ^nlp <c6z> <c5z>  ^aname heuristic)

   (<cs2> ^result.set <res> ^name any ^args <aag5> ^parameter <pa3> ^type concept ^attribute action)
   (<pa3> ^1 <pa1d> ^num 1)
   (<pa1d> ^param-id 1 ^type single)
   
   (<c6z> ^name value ^args <ag11z> ^parameter <p3z7z> ^rtype single ^return-type number ^type attribute-of ^attribute none ^negative false ^result.set <resz>)
   (<p3z7z> ^1 <p11z> ^2 <p112z> ^num 2)
   (<p11z> ^param-id 2 ^type single)
   (<p112z> ^param-id 1 ^type single)
   (<ag11z> ^2 <cs2> ^num 1)
   
   (<c5z> ^name number ^args <ag11zz> ^parameter <p4az> ^negative false ^type attribute ^attribute primitive ^rtype single ^result.set.pair <pa22z> ^return-type number)
   (<p4az> ^1 <p4aaz> ^num 1)
   (<p4aaz> ^param-id 2 ^type single)
   (<pa22z> ^1 8)

}
##3 disprefer play-on rank with suited deck card
sp {topstate*elaborate*disprefer*play-on-rank
   (state <s> ^name learn-param
            #  ^condition.name adjacent
              ^gtype <gtype>
              ^<gtype>.nlp-set.aname play-on-rank)
#   (<co> ^type concept ^attribute predicate ^name heuristic)
-->
    (<s> ^predicate <T5> ^gtype predicate)
   
   (<T5> ^nlp-set <nlps> ^disprefer <pref> ^formated predicate ^parameter-set <P124> ^potential-args <P125> ^ntype heuristic)
(<P124> ^argnum 2)
(<pref> ^1 <cs2>)
##action stack
  (<nlps> ^nlp <cs2> <c5> ^aname heuristic)#^nlp <cs> <cs1>

   (<cs2> ^result.set <res> ^name play-on-rank ^args <aag5> ^parameter <pa3> ^type concept ^attribute action)
   (<pa3> ^1 <pa1d> ^2 <pa2d> ^num 2)
   (<pa1d> ^param-id 1 ^type single)
   (<pa2d> ^param-id 2 ^type single)
     
   (<c5> ^args <ag> ^attribute predicate ^name more-suits ^negative false
                 ^parameter <param1> ^result.set <R92> ^rtype single ^type concept)
   (<ag> ^1 <c7x> ^2 <cs2> ^num 2)
   (<param1> ^1 <p11> ^2 <p21> ^num 2)
   (<p11> ^param-id 2 ^type single)
   (<p21> ^param-id 1 ^type single)
   
   (<c7x> ^name on ^args <ag5x> ^parameter <pzatx> ^type state-pair ^attribute prepositions ^rtype single ^negative false ^result.set <res2x>)
   (<pzatx> ^1 <pz1x> ^num 1)
   (<pz1x> ^param-id 2 ^type single)
   (<ag5x> ^1 <c4> ^2 <c3x> ^num 2)
   
   (<c3x> ^name deck ^type attribute ^args <ag9x> ^parameter.num 0 ^attribute word ^type attribute ^rtype single ^negative false ^result.set <resx>)
   (<ag9x> ^1 <c4> ^num 1)
   
   (<c4> ^args <A57> ^attribute primitive ^name object ^negative false
                 ^parameter <P225> ^result <R94> ^rtype single ^type attribute)
            (<P225> ^num 0)
            (<R94> ^set <S158>)

}

#4 perfer play on rank with more hand suits over any action 
sp {topstate*elaborate*prefer*play-on-rank*over*any
   (state <s> ^name learn-param
            #  ^condition.name adjacent
              ^gtype <gtype>
              ^<gtype>.nlp-set.aname play-on-rank)
#   (<co> ^type concept ^attribute predicate ^name heuristic)
-->
    (<s> ^predicate <T5> ^gtype predicate)
   
   (<T5> ^nlp-set <nlps> ^prefer <pref> ^formated predicate ^parameter-set <P124> ^potential-args <P125> ^ntype heuristic)
(<P124> ^argnum 2)
(<pref> ^1 <cs2> ^2 <cs3>)
##action stack
  (<nlps> ^nlp <cs2> <c5> ^aname heuristic)#^nlp <cs> <cs1>

   (<cs2> ^result.set <res> ^name play-on-rank ^args <aag5> ^parameter <pa3> ^type concept ^attribute action)
   (<pa3> ^1 <pa1d> ^num 1)
   (<pa1d> ^param-id 1 ^type single)
   
   (<cs3> ^result.set <res5> ^name any ^args <aag3> ^parameter <pa5> ^type concept ^attribute action)
   (<pa5> ^1 <pa5d> ^num 1)
   (<pa5d> ^param-id 2 ^type single)
     
   (<c5> ^args <ag> ^attribute predicate ^name more-suits ^negative false
                 ^parameter <param1> ^result.set <R92> ^rtype single ^type concept)
   (<ag> ^1 <cs2> ^2 <cs3> ^num 2)
   (<param1> ^1 <p11> ^2 <p21> ^num 2)
   (<p11> ^param-id 1 ^type single)
   (<p21> ^param-id 2 ^type single)

}




sp {topstate*elaborate*prefer*play-on-rank
   (state <s> ^name learn-param2
            #  ^condition.name adjacent
              ^gtype <gtype>
              ^<gtype>.nlp-set.aname play-on-rank)
#   (<co> ^type concept ^attribute predicate ^name heuristic)
-->
    (<s> ^predicate <T5> ^gtype predicate)
   
   (<T5> ^nlp-set <nlps> ^prefer <pref> ^formated predicate ^parameter-set <P124> ^potential-args <P125> ^ntype heuristic)
(<P124> ^argnum 2)
(<pref> ^1 <cs2>)
##action stack
  (<nlps> ^nlp <cs2> <c5> ^aname heuristic)#^nlp <cs> <cs1>

   (<cs2> ^result.set <res> ^name play-on-rank ^args <aag5> ^parameter <pa3> ^type concept ^attribute action)
   (<pa3> ^1 <pa1d> ^2 <pa2d> ^num 2)
   (<pa1d> ^param-id 1 ^type single)
   (<pa2d> ^param-id 2 ^type single)
     
   (<c5> ^args <ag> ^attribute predicate ^name more-same-suits ^negative false
                 ^parameter <param1> ^result.set <R92> ^rtype single ^type concept)
   (<ag> ^1 <cs2> ^2 <c7x> ^num 2)
   (<param1> ^1 <p11> ^2 <p21> ^num 2)
   (<p11> ^param-id 1 ^type single)
   (<p21> ^param-id 2 ^type single)
   
   (<c7x> ^name on ^args <ag5x> ^parameter <pzatx> ^type state-pair ^attribute prepositions ^rtype single ^negative false ^result.set <res2x>)
   (<pzatx> ^1 <pz1x> ^num 1)
   (<pz1x> ^param-id 2 ^type single)
   (<ag5x> ^1 <c4> ^2 <c3x> ^num 2)
   
   (<c3x> ^name deck ^type attribute ^args <ag9x> ^parameter.num 0 ^attribute word ^type attribute ^rtype single ^negative false ^result.set <resx>)
   (<ag9x> ^1 <c4> ^num 1)
   
   (<c4> ^args <A57> ^attribute primitive ^name object ^negative false
                 ^parameter <P225> ^result <R94> ^rtype single ^type attribute)
            (<P225> ^num 0)
            (<R94> ^set <S158>)

}

sp {topstate*elaborate*prefer*play-on-rank2
   (state <s> ^name learn-param2
            #  ^condition.name adjacent
              ^gtype <gtype>
              ^<gtype>.nlp-set.aname play-on-rank)
#   (<co> ^type concept ^attribute predicate ^name heuristic)
-->
    (<s> ^predicate <T5> ^gtype predicate)
   
   (<T5> ^nlp-set <nlps> ^prefer <pref> ^formated predicate ^parameter-set <P124> ^potential-args <P125> ^ntype heuristic)
(<P124> ^argnum 2)
(<pref> ^1 <cs2>)
##action stack
  (<nlps> ^nlp <cs2> <c5> ^aname heuristic)#^nlp <cs> <cs1>

   (<cs2> ^result.set <res> ^name play-on-rank ^args <aag5> ^parameter <pa3> ^type concept ^attribute action)
   (<pa3> ^1 <pa1d> ^2 <pa2d> ^num 2)
   (<pa1d> ^param-id 1 ^type single)
   (<pa2d> ^param-id 2 ^type single)
     
   (<c5> ^args <ag> ^attribute predicate ^name more-suits ^negative false
                 ^parameter <param1> ^result.set <R92> ^rtype single ^type concept)
   (<ag> ^1 <cs2> ^2 <c7x> ^num 2)
   (<param1> ^1 <p11> ^2 <p21> ^num 2)
   (<p11> ^param-id 1 ^type single)
   (<p21> ^param-id 2 ^type single)
   
   (<c7x> ^name on ^args <ag5x> ^parameter <pzatx> ^type state-pair ^attribute prepositions ^rtype single ^negative false ^result.set <res2x>)
   (<pzatx> ^1 <pz1x> ^num 1)
   (<pz1x> ^param-id 2 ^type single)
   (<ag5x> ^1 <c4> ^2 <c3x> ^num 2)
   
   (<c3x> ^name deck ^type attribute ^args <ag9x> ^parameter.num 0 ^attribute word ^type attribute ^rtype single ^negative false ^result.set <resx>)
   (<ag9x> ^1 <c4> ^num 1)
   
   (<c4> ^args <A57> ^attribute primitive ^name object ^negative false
                 ^parameter <P225> ^result <R94> ^rtype single ^type attribute)
            (<P225> ^num 0)
            (<R94> ^set <S158>)

}



#todo test efficiency when moving lower-card calculation up
sp {topstate*elaborate*heuristics-president
   (state <s> ^name learn-param
            #  ^condition.name adjacent
              ^gtype <gtype>
              ^<gtype>.nlp-set.aname play-higher-card)
#   (<co> ^type concept ^attribute predicate ^name heuristic)
-->
    (<s> ^predicate <T5> ^gtype predicate)
   
   (<T5> ^nlp-set <nlps> ^prefer <p3> ^formated predicate ^parameter-set <P124> ^potential-args <P125> ^ntype heuristic)
(<P124> ^argnum 2)
(<p3> ^1 <cs2> ^2 <cs3>)
##action stack
  (<nlps> ^nlp <cs2> <cs3> <c5>  ^aname heuristic)#^nlp <cs> <cs1>

   (<cs2> ^result.set <res> ^name play-higher-card ^args <aag5> ^parameter <pa3> ^type concept ^attribute action ^return-type number)
   (<pa3> ^1 <pa2d>  ^num 1)#^1 <pa1d> ^3 <pa3d>
   #(<pa1d> ^param-id 1 ^type single)
   (<pa2d> ^param-id 1 ^type single)
   #(<pa3d> ^param-id 3 ^type single)
   
   (<cs3> ^result.set <res3> ^name play-higher-card ^args <aag3> ^parameter <pa33> ^type concept ^attribute action ^return-type number)
   (<pa33> ^1 <pa2d3> ^num 1)#^1 <pa1d3> ^3 <pa3d3> 
   #(<pa1d3> ^param-id 4 ^type single)
   (<pa2d3> ^param-id 2 ^type single)
   #(<pa3d3> ^param-id 3 ^type single)
     
   (<c5> ^args <ag> ^attribute predicate ^name lower-card ^negative false
                 ^parameter <param1> ^result <R92> ^rtype single ^type concept)
   (<ag> ^1 <cs2> ^2 <cs3> ^num 2)
   (<param1> ^1 <p11> ^2 <p12> ^num 2)
   (<p11> ^param-id 1 ^type single)
   (<p12> ^param-id 2 ^type single)
   (<R92> ^set <S152>)
}

sp {topstate*elaborate*heuristics-president*play-lower-onempty
   (state <s> ^name learn-param
            #  ^condition.name adjacent
              ^gtype <gtype>
              ^<gtype>.nlp-set.aname play-card-empty)
#   (<co> ^type concept ^attribute predicate ^name heuristic)
-->
    (<s> ^predicate <T5> ^gtype predicate)
   
   (<T5> ^nlp-set <nlps> ^prefer <p3> ^formated predicate ^parameter-set <P124> ^potential-args <P125> ^ntype heuristic)
(<P124> ^argnum 2)
(<p3> ^1 <cs2> ^2 <cs3>)
##action stack
  (<nlps> ^nlp <c5>  ^aname heuristic3)#^nlp <cs> <cs1>

   (<cs2> ^result.set <res> ^name play-card-empty ^args <aag5> ^parameter <pa3> ^type concept ^attribute action ^return-type number)
   (<pa3> ^1 <pa2d>  ^num 1)#^1 <pa1d> ^3 <pa3d>
   #(<pa1d> ^param-id 1 ^type single)
   (<pa2d> ^param-id 1 ^type single)
   #(<pa3d> ^param-id 3 ^type single)
   
   (<cs3> ^result.set <res3> ^name play-card-empty ^args <aag3> ^parameter <pa33> ^type concept ^attribute action ^return-type number)
   (<pa33> ^1 <pa2d3> ^num 1)#^1 <pa1d3> ^3 <pa3d3> 
   #(<pa1d3> ^param-id 4 ^type single)
   (<pa2d3> ^param-id 2 ^type single)
   #(<pa3d3> ^param-id 3 ^type single)
     
   (<c5> ^args <ag> ^attribute predicate ^name lower-card ^negative false
                 ^parameter <param1> ^result <R92> ^rtype single ^type concept)
   (<ag> ^1 <cs2> ^2 <cs3> ^num 2)
   (<param1> ^1 <p11> ^2 <p12> ^num 2)
   (<p11> ^param-id 1 ^type single)
   (<p12> ^param-id 2 ^type single)
   (<R92> ^set <S152>)
}


sp {topstate*elaborate*heuristic-president*clear
   (state <s> ^name learn-param
              ^gtype action
              ^action.nlp-set.aname play-clear)
-->
    (<s> ^predicate <T5> ^gtype predicate)
   
   (<T5> ^nlp-set <nlps> ^disprefer <pref> ^formated predicate ^parameter-set <P124> ^potential-args <P125> ^ntype heuristic)
(<P124> ^argnum 1)
(<pref> ^1 <cs2>)
  (<nlps> ^nlp <cs2> ^aname heuristic2)

   (<cs2> ^result.set <res> ^name play-clear ^args <aag5> ^parameter <pa3> ^type concept ^attribute action)
   (<pa3> ^1 <pa1d> ^num 1)
   (<pa1d> ^param-id 1 ^type single)

}