
#contains math function concepts
#average
#more(set,set)
#max?
#square
#abs

#state-eval
sp {topstate*elaborate*state-sumeval
   (state <s> ^name learn-param
            #  ^condition.name adjacent
              ^gtype <gtype>
              ^<gtype>.condition <co>)
   (<co> ^type concept ^attribute predicate ^name state-sumeval)
-->
    (<s> ^predicate <T5> ^gtype predicate)
   
   (<T5> ^nlp-set <nlps> ^formated predicate ^parameter-set <P124> ^potential-args <P125> ^link <co>)
(<P124> ^argnum 3)


  (<nlps> ^nlp <cs> ^aname state-sumeval)
 
   (<c1> ^name my-pieces ^rtype set ^result.set <res1> ^negative false ^type concept ^attribute predicate ^args <ag2> ^parameter <p37a>) 
   (<p37a> ^1 <p12> ^num 1)
   (<p12> ^param-id 2 ^type set)
   
   (<cs> ^name sum ^rtype single ^result.set <res> ^args <ag> ^negative false ^parameter <p3z> ^return-type number ^type function ^function soar-sum)
   (<p3z> ^1 <p1> ^2 <p2> ^num 2)
   (<p1> ^param-id 1 ^type single)
   (<p2> ^param-id 3 ^type set)
   (<ag> ^2 <c8> ^num 1)
      
   (<c8> ^name value ^rtype set ^result.set <res2> ^args <ag8> ^parameter <p8> ^negative false ^type attribute-of)# ^return-type number)
   (<p8> ^1 <p18> ^2 <p182> ^num 2)
   (<p18> ^param-id 3 ^type set)
   (<p182> ^param-id 2 ^type set)
   (<ag8> ^2 <c1> ^num 1)

   (<T5> ^nlp-set <nlps>)
}


sp {topstate*elaborate*average
   (state <s> ^name learn-param
            #  ^condition.name adjacent
              ^gtype <gtype>
              ^<gtype>.condition <co>)
   (<co> ^type concept ^attribute predicate ^name average)
-->
    (<s> ^predicate <T5> ^gtype predicate)
   
   (<T5> ^nlp-set <nlps> ^formated predicate ^parameter-set <P124> ^potential-args <P125> ^link <co>)
(<P124> ^argnum 4)

  (<nlps> ^nlp <c8> ^aname average)
   
   (<cs> ^name sum ^rtype single ^result.set <res> ^args <ag> ^negative false ^parameter <p3z> ^return-type number ^type function ^function soar-sum)
   (<p3z> ^1 <p1> ^2 <p2> ^num 2)
   (<p1> ^param-id 4 ^type single)
   (<p2> ^param-id 2 ^type set)
   (<ag> ^2 <c5> ^num 1)
   
   (<cs2> ^name count ^rtype single ^result.set <res4> ^args <ag2> ^negative false ^parameter <p2z> ^return-type number ^type function ^function soar-count)
   (<p2z> ^1 <p12> ^2 <p22> ^num 2)
   (<p12> ^param-id 3 ^type single)
   (<p22> ^param-id 2 ^type set)
   (<ag2> ^2 <c5> ^num 1)
      
   (<c8> ^name divide ^rtype single ^result.set <res2> ^args <ag8> ^parameter <p8> ^negative false ^return-type number ^type function ^function soar-math)# ^return-type number)
   (<p8> ^1 <p18> ^2 <p182> ^3 <p184> ^num 3)
   (<p18> ^param-id 1 ^type single)
   (<p182> ^param-id 4 ^type single)
   (<p184> ^param-id 3 ^type single)
   (<ag8> ^2 <cs> ^3 <cs2> ^num 2)
   
      (<c5> ^args <A57> ^attribute input-arg ^name object ^negative false
                 ^parameter <P225> ^rtype set)
      (<P225> ^1 <P224> ^num 1)
      (<P224> ^param-id 2 ^type set)
}




#how to use 1 argument twice...
sp {topstate*elaborate*square
   (state <s> ^name learn-param
            #  ^condition.name adjacent
              ^gtype <gtype>
              ^<gtype>.condition <co>)
   (<co> ^type concept ^attribute predicate ^name square)
-->
    (<s> ^predicate <T5> ^gtype predicate)
   
   (<T5> ^nlp-set <nlps> ^formated predicate ^parameter-set <P124> ^potential-args <P125> ^link <co>)
(<P124> ^argnum 2)

  (<nlps> ^nlp <c8> ^aname square)
   
      
   (<c8> ^name power ^rtype single ^result.set <res2> ^args <ag8> ^parameter <p8> ^negative false ^return-type number ^type function ^function soar-math)# ^return-type number)
   (<p8> ^1 <p18> ^2 <p182> ^num 2)
   (<p18> ^param-id 1 ^type single)
   (<p182> ^param-id 2 ^type single)
   (<ag8> ^2 <c6> ^3 <c7> ^num 2)
   
   (<c7> ^name number ^rtype single ^negative false ^parameter.num 0 ^result.set.pair <resp> ^return-type number)
   (<resp> ^1 2)
      
      (<c6> ^args <A56> ^attribute input-arg ^name object ^negative false ^return-type number
                 ^parameter <P226> ^rtype single)
      (<P226> ^1 <P2246> ^num 1)
      (<P2246> ^param-id 2 ^type single)
}