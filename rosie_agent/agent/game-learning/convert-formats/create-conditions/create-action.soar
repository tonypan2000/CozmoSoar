sp {create-condition*apply*create-action*2args
   (state <s> ^name create-condition
              ^action <a>
              ^action-count <an>
              ^condition-handle <handle>
			  ^superstate <ss>
     		  ^param1 <pa>
         	  ^param2 <pa2>
              ^clause <cl>
              ^verb-prep <vp>
			  ^operator <o>)
   (<o> ^name create-action)
   (<a> ^procedural <pp>)
   (<pp> ^arg1 <pp1> ^arg2 <pp2>)
   (<ss> ^action-count <an> ^nlp-set.verb-structure <va2>)
-->
   (<cl> ^formatted true)
   (<ss> ^action-count <an> -)
   (<ss> ^action-count (+ <an> 1))
   (<ss> ^verb-structure <va2>)
   (<va2> ^<an> <va>)
   (<va> ^verb-name <handle> ^verb-prep <vp> ^1 <pa> ^2 <pa2>)
   (<a> ^formatted true) 
}

sp {create-condition*apply*create-action*1args
   (state <s> ^name create-condition
              ^action <a>
              ^action-count <an>
              ^condition-handle <handle>
			  ^superstate <ss>
     		  ^param1 <pa>
         	  -^param2
              ^clause <cl>
             -^verb-prep
			  ^operator <o>)
   (<o> ^name create-action)
   (<a> ^procedural <pp>)
   (<pp> ^arg1 <pp1> -^arg2)
   (<ss> ^action-count <an> ^nlp-set.verb-structure <va2>)
-->
   (<cl> ^formatted true)
   (<ss> ^action-count <an> -)
   (<ss> ^action-count (+ <an> 1))
   (<ss> ^verb-structure <va2>)
   (<va2> ^<an> <va>)
   (<va> ^verb-name <handle> ^verb-prep <handle> ^1 <pa>)
   (<a> ^formatted true) 
}

## DEBUG
sp {create-condition*apply*create-action*interrupt
:interrupt
   (state <s> ^name create-conditionX
			  ^operator <o>)
   (<o> ^name create-action)
-->
}